
node_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  000050c8  0000517c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  00800308  00800308  00005384  2**0
                  ALLOC
  3 .eeprom       0000033f  00810000  00810000  00005384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000056c3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  0000571f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af69  00000000  00000000  00006097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002942  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003447  00000000  00000000  00013942  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f2c  00000000  00000000  00016d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c6d  00000000  00000000  00018cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078a8  00000000  00000000  0001b925  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  000231cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <StackPaint>
       4:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
       8:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__vector_2>
       c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      10:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      14:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      18:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      1c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      20:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      24:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      28:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__vector_10>
      2c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      30:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      34:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      38:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__vector_14>
      3c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      40:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      44:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      48:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      4c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      50:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      54:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      58:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      5c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      60:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>
      64:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	2e 2e       	mov	r2, r30
      6a:	2f 2e       	mov	r2, r31
      6c:	2e 2f       	mov	r18, r30
      6e:	63 6f       	ori	r22, 0xF3	; 243
      70:	6d 6d       	ori	r22, 0xDD	; 221
      72:	6f 6e       	ori	r22, 0xEF	; 239
      74:	5f 6c       	ori	r21, 0xCF	; 207
      76:	69 62       	ori	r22, 0x29	; 41
      78:	72 61       	ori	r23, 0x12	; 18
      7a:	72 79       	andi	r23, 0x92	; 146
      7c:	2f 63       	ori	r18, 0x3F	; 63
      7e:	6f 6d       	ori	r22, 0xDF	; 223
      80:	6d 6f       	ori	r22, 0xFD	; 253
      82:	6e 2e       	mov	r6, r30
      84:	63 00       	.word	0x0063	; ????

00000086 <__c.1715>:
      86:	62 69 74 5f 69 6e 64 65 78 20 3c 20 38 00           bit_index < 8.

00000094 <__c.1705>:
      94:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
      a4:	72 61 72 79 2f 63 6f 6d 6d 6f 6e 2e 63 00           rary/common.c.

000000b2 <__c.1707>:
      b2:	62 69 74 5f 69 6e 64 65 78 20 3c 20 38 00           bit_index < 8.

000000c0 <__c.1922>:
      c0:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 6f 6e 66     <INFO> %s() Conf
      d0:	69 67 75 72 61 74 69 6f 6e 20 6c 6f 61 64 65 64     iguration loaded
      e0:	0d 0a 00                                            ...

000000e3 <__c.1918>:
      e3:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
      f3:	72 61 72 79 2f 43 6f 6e 66 69 67 2e 63 00           rary/Config.c.

00000101 <__c.1920>:
     101:	43 4f 4e 46 49 47 5f 56 45 52 53 49 4f 4e 20 3d     CONFIG_VERSION =
     111:	3d 20 65 65 70 72 6f 6d 5f 72 65 61 64 5f 77 6f     = eeprom_read_wo
     121:	72 64 28 26 6e 76 6d 5f 63 6f 6e 66 69 67 2e 76     rd(&nvm_config.v
     131:	65 72 73 69 6f 6e 29 00                             ersion).

00000139 <__c.1746>:
     139:	4e 6f 74 69 66 79 20 6c 69 73 74 65 6e 65 72 3a     Notify listener:
     149:	20 25 75 0d 0a 00                                    %u...

0000014f <__c.1742>:
     14f:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     15f:	72 61 72 79 2f 45 76 65 6e 74 2e 63 00              rary/Event.c.

0000016c <__c.1744>:
     16c:	6c 69 73 74 65 6e 65 72 5f 70 6f 6f 6c 5b 69 6e     listener_pool[in
     17c:	64 65 78 5d 2e 63 61 6c 6c 62 61 63 6b 20 21 3d     dex].callback !=
     18c:	20 4e 55 4c 4c 00                                    NULL.

00000192 <__c.1737>:
     192:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     1a2:	72 61 72 79 2f 45 76 65 6e 74 2e 63 00              rary/Event.c.

000001af <__c.1739>:
     1af:	6e 72 5f 6c 69 73 74 65 6e 65 72 73 20 3c 20 4d     nr_listeners < M
     1bf:	41 58 5f 4e 52 5f 4c 49 53 54 45 4e 45 52 53 00     AX_NR_LISTENERS.

000001cf <__c.1730>:
     1cf:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     1df:	72 61 72 79 2f 45 76 65 6e 74 2e 63 00              rary/Event.c.

000001ec <__c.1732>:
     1ec:	6e 72 5f 6c 69 73 74 65 6e 65 72 73 20 3c 20 4d     nr_listeners < M
     1fc:	41 58 5f 4e 52 5f 4c 49 53 54 45 4e 45 52 53 00     AX_NR_LISTENERS.

0000020c <__c.1726>:
     20c:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     21c:	72 61 72 79 2f 45 76 65 6e 74 2e 63 00              rary/Event.c.

00000229 <__c.1728>:
     229:	6c 69 73 74 65 6e 65 72 20 21 3d 20 4e 55 4c 4c     listener != NULL
	...

0000023a <__c.1795>:
     23a:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     24a:	72 61 72 79 2f 6c 69 62 41 44 43 2e 63 00           rary/libADC.c.

00000258 <__c.1797>:
     258:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 41 44 43 5f     index < MAX_ADC_
     268:	49 4e 50 55 54 53 00                                INPUTS.

0000026f <__c.1788>:
     26f:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     27f:	72 61 72 79 2f 6c 69 62 41 44 43 2e 63 00           rary/libADC.c.

0000028d <__c.1790>:
     28d:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 41 44 43 5f     index < MAX_ADC_
     29d:	49 4e 50 55 54 53 00                                INPUTS.

000002a4 <__c.1779>:
     2a4:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     2b4:	72 61 72 79 2f 6c 69 62 41 44 43 2e 63 00           rary/libADC.c.

000002c2 <__c.1781>:
     2c2:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 41 44 43 5f     index < MAX_ADC_
     2d2:	49 4e 50 55 54 53 00                                INPUTS.

000002d9 <__c.1769>:
     2d9:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 55     <WARNING> %s() U
     2e9:	6e 6b 6e 6f 77 6e 20 53 74 61 74 65 0d 0a 00        nknown State...

000002f8 <__c.1754>:
     2f8:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     308:	20 64 6f 6e 65 0d 0a 00                              done...

00000310 <__c.2162>:
     310:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     320:	72 61 72 79 2f 6c 69 62 44 65 62 75 67 2e 63 00     rary/libDebug.c.

00000330 <__c.2164>:
     330:	65 76 65 6e 74 20 21 3d 20 4e 55 4c 4c 00           event != NULL.

0000033e <__c.2151>:
     33e:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     34e:	20 64 6f 6e 65 0d 0a 00                              done...

00000356 <__c.2529>:
     356:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     366:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000376 <__c.2531>:
     376:	61 64 64 72 65 73 73 20 3c 3d 20 52 45 47 5f 54     address <= REG_T
     386:	45 53 54 41 46 43 00                                ESTAFC.

0000038d <__c.2521>:
     38d:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     39d:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000003ad <__c.2523>:
     3ad:	61 64 64 72 65 73 73 20 3c 3d 20 52 45 47 5f 54     address <= REG_T
     3bd:	45 53 54 41 46 43 00                                ESTAFC.

000003c4 <__c.2501>:
     3c4:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     3d4:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000003e4 <__c.2503>:
     3e4:	69 6d 70 65 64 61 6e 63 65 20 3c 3d 20 52 46 4d     impedance <= RFM
     3f4:	5f 4c 4e 41 5f 5a 49 4e 5f 32 30 30 4f 48 4d 00     _LNA_ZIN_200OHM.

00000404 <__c.2493>:
     404:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     414:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000424 <__c.2495>:
     424:	67 61 69 6e 20 3c 3d 20 52 46 4d 5f 4c 4e 41 5f     gain <= RFM_LNA_
     434:	47 41 49 4e 5f 47 36 00                             GAIN_G6.

0000043c <__c.2485>:
     43c:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     44c:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

0000045c <__c.2487>:
     45c:	66 72 65 71 75 65 6e 63 79 20 3c 3d 20 52 46 4d     frequency <= RFM
     46c:	5f 43 4c 4b 4f 55 54 5f 4f 46 46 00                 _CLKOUT_OFF.

00000478 <__c.2431>:
     478:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 49 6e 76     <ERROR> %s() Inv
     488:	61 6c 69 64 20 73 79 6e 63 20 77 6f 72 64 20 76     alid sync word v
     498:	61 6c 75 65 3a 20 30 78 30 30 0d 0a 00              alue: 0x00...

000004a5 <__c.2427>:
     4a5:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 49 6e 76     <ERROR> %s() Inv
     4b5:	61 6c 69 64 20 73 79 6e 63 20 77 6f 72 64 20 6c     alid sync word l
     4c5:	65 6e 67 74 68 3a 20 25 75 0d 0a 00                 ength: %u...

000004d1 <__c.2406>:
     4d1:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     4e1:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000004f1 <__c.2408>:
     4f1:	73 69 7a 65 20 3e 20 30 20 26 26 20 73 69 7a 65     size > 0 && size
     501:	20 3c 3d 20 4d 41 58 5f 53 59 4e 43 5f 57 4f 52      <= MAX_SYNC_WOR
     511:	44 5f 53 49 5a 45 00                                D_SIZE.

00000518 <__c.2386>:
     518:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 54 69 6d     <ERROR> %s() Tim
     528:	65 6f 75 74 20 77 68 69 6c 65 20 77 61 69 74 69     eout while waiti
     538:	6e 67 20 66 6f 72 20 52 53 53 49 2e 0d 0a 00        ng for RSSI....

00000547 <__c.2357>:
     547:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 4f     <WARNING> %s() O
     557:	43 50 20 6d 75 73 74 20 62 65 20 64 69 73 61 62     CP must be disab
     567:	6c 65 64 20 77 68 69 6c 65 20 69 6e 20 68 69 67     led while in hig
     577:	68 20 70 6f 77 65 72 20 6d 6f 64 65 0d 0a 00        h power mode...

00000586 <__c.2345>:
     586:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     596:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000005a6 <__c.2347>:
     5a6:	70 6f 77 65 72 5f 6c 65 76 65 6c 20 3c 3d 20 33     power_level <= 3
     5b6:	31 00                                               1.

000005b8 <__c.2340>:
     5b8:	50 6f 77 65 72 20 61 6d 70 6c 69 66 69 65 72 20     Power amplifier 
     5c8:	6d 6f 64 65 3a 20 30 78 25 30 32 58 0d 0a 00        mode: 0x%02X...

000005d7 <__c.2335>:
     5d7:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     5e7:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000005f7 <__c.2337>:
     5f7:	6d 6f 64 65 20 3e 20 30 78 30 31 20 26 26 20 6d     mode > 0x01 && m
     607:	6f 64 65 20 3c 20 30 78 30 35 00                    ode < 0x05.

00000612 <__c.2330>:
     612:	46 72 65 71 20 64 65 76 69 61 74 69 6f 6e 20 76     Freq deviation v
     622:	61 6c 75 65 3a 20 30 78 25 30 34 58 0d 0a 00        alue: 0x%04X...

00000631 <__c.2328>:
     631:	46 72 65 71 20 64 65 76 69 61 74 69 6f 6e 3a 20     Freq deviation: 
     641:	25 75 0d 0a 00                                      %u...

00000646 <__c.2323>:
     646:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     656:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000666 <__c.2325>:
     666:	66 72 65 71 75 65 6e 63 79 5f 64 65 76 69 61 74     frequency_deviat
     676:	69 6f 6e 20 3e 20 36 30 30 00                       ion > 600.

00000680 <__c.2318>:
     680:	4d 6f 64 75 6c 61 74 69 6f 6e 20 73 68 61 70 69     Modulation shapi
     690:	6e 67 3a 20 30 78 25 30 32 58 0d 0a 00              ng: 0x%02X...

0000069d <__c.2313>:
     69d:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     6ad:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000006bd <__c.2315>:
     6bd:	6d 6f 64 75 6c 61 74 69 6f 6e 5f 73 68 61 70 69     modulation_shapi
     6cd:	6e 67 20 3c 20 30 78 30 34 00                       ng < 0x04.

000006d7 <__c.2305>:
     6d7:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     6e7:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000006f7 <__c.2307>:
     6f7:	6d 6f 64 75 6c 61 74 69 6f 6e 5f 74 79 70 65 20     modulation_type 
     707:	3d 3d 20 52 46 4d 5f 46 53 4b 20 7c 7c 20 6d 6f     == RFM_FSK || mo
     717:	64 75 6c 61 74 69 6f 6e 5f 74 79 70 65 20 3d 3d     dulation_type ==
     727:	20 52 46 4d 5f 4f 4f 4b 00                           RFM_OOK.

00000730 <__c.2287>:
     730:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     740:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000750 <__c.2289>:
     750:	66 69 6c 74 65 72 69 6e 67 20 3c 20 33 00           filtering < 3.

0000075e <__c.2238>:
     75e:	46 72 65 71 20 76 61 6c 75 65 3a 20 30 78 25 30     Freq value: 0x%0
     76e:	33 6c 58 0d 0a 00                                   3lX...

00000774 <__c.2236>:
     774:	46 72 65 71 3a 20 25 6c 75 0d 0a 00                 Freq: %lu...

00000780 <__c.2201>:
     780:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 54 69 6d     <ERROR> %s() Tim
     790:	65 6f 75 74 21 0d 0a 00                             eout!...

00000798 <__c.2185>:
     798:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 6c 65 61     <INFO> %s() Clea
     7a8:	72 20 46 49 46 4f 0d 0a 00                          r FIFO...

000007b1 <__c.2168>:
     7b1:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 46 49 46     <ERROR> %s() FIF
     7c1:	4f 20 69 73 20 66 75 6c 6c 0d 0a 00                 O is full...

000007cd <__c.2163>:
     7cd:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     7dd:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000007ed <__c.2165>:
     7ed:	6c 65 6e 67 74 68 20 3c 3d 20 52 46 4d 5f 46 49     length <= RFM_FI
     7fd:	46 4f 5f 53 49 5a 45 00                             FO_SIZE.

00000805 <__c.2114>:
     805:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 49     <WARNING> %s() I
     815:	6e 76 61 6c 69 64 20 53 50 49 2d 6d 6f 64 65 0d     nvalid SPI-mode.
     825:	0a 00                                               ..

00000827 <__c.2086>:
     827:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     837:	72 61 72 79 2f 6c 69 62 53 50 49 2e 63 00           rary/libSPI.c.

00000845 <__c.2088>:
     845:	62 75 66 66 65 72 20 21 3d 20 4e 55 4c 4c 00        buffer != NULL.

00000854 <__c.2044>:
     854:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 46 61 69     <ERROR> %s() Fai
     864:	6c 65 64 20 74 6f 20 69 6e 69 74 20 53 50 49 2c     led to init SPI,
     874:	20 69 6e 76 61 6c 69 64 20 6d 6f 64 65 3a 20 25      invalid mode: %
     884:	75 0d 0a 00                                         u...

00000888 <__c.2041>:
     888:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     898:	20 64 6f 6e 65 0d 0a 00                              done...

000008a0 <__c.2261>:
     8a0:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     8b0:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000008bb <__c.2263>:
     8bb:	74 69 6d 65 2d 3e 79 65 61 72 20 3c 20 31 30 30     time->year < 100
	...

000008cc <__c.2257>:
     8cc:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     8dc:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000008e7 <__c.2259>:
     8e7:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000008f4 <__c.2248>:
     8f4:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     904:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

0000090f <__c.2250>:
     90f:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

0000091c <__c.2240>:
     91c:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     92c:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000937 <__c.2242>:
     937:	63 61 72 72 79 20 3c 20 32 00                       carry < 2.

00000941 <__c.2234>:
     941:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     951:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

0000095c <__c.2236>:
     95c:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000969 <__c.2225>:
     969:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     979:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000984 <__c.2227>:
     984:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000991 <__c.2216>:
     991:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     9a1:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000009ac <__c.2218>:
     9ac:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000009b9 <__c.2207>:
     9b9:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     9c9:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000009d4 <__c.2209>:
     9d4:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000009e1 <__c.2178>:
     9e1:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     9f1:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000009fc <__c.2180>:
     9fc:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000a09 <__c.2164>:
     a09:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     a19:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000a24 <__c.2166>:
     a24:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000a31 <__c.2489>:
     a31:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 45 78 69 74     <INFO> %s() Exit
     a41:	69 6e 67 20 73 6c 65 65 70 0d 0a 00                 ing sleep...

00000a4d <__c.2481>:
     a4d:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 45 6e 74 65     <INFO> %s() Ente
     a5d:	72 69 6e 67 20 73 6c 65 65 70 0d 0a 00              ring sleep...

00000a6a <__c.2476>:
     a6a:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     a7a:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     a8a:	2e 63 00                                            .c.

00000a8d <__c.2478>:
     a8d:	65 76 65 6e 74 20 21 3d 20 4e 55 4c 4c 00           event != NULL.

00000a9b <__c.2462>:
     a9b:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 53 69 7a     <ERROR> %s() Siz
     aab:	65 20 6f 66 20 70 61 63 6b 65 74 20 63 6f 6e 74     e of packet cont
     abb:	65 6e 74 20 69 73 20 74 6f 20 6c 61 72 67 65 0d     ent is to large.
     acb:	0a 00                                               ..

00000acd <__c.2456>:
     acd:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     add:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     aed:	2e 63 00                                            .c.

00000af0 <__c.2458>:
     af0:	63 6f 6e 74 65 6e 74 20 21 3d 20 4e 55 4c 4c 00     content != NULL.

00000b00 <__c.2564>:
     b00:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     b10:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     b20:	2e 63 00                                            .c.

00000b23 <__c.2566>:
     b23:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000b32 <__c.2559>:
     b32:	4e 6f 20 41 43 4b 20 6e 65 65 64 65 64 0d 0a 00     No ACK needed...

00000b42 <__c.2557>:
     b42:	57 61 69 74 69 6e 67 20 66 6f 72 20 41 43 4b 0d     Waiting for ACK.
     b52:	0a 00                                               ..

00000b54 <__c.2555>:
     b54:	50 61 63 6b 65 74 20 73 65 6e 74 0d 0a 00           Packet sent...

00000b62 <__c.2552>:
     b62:	46 49 46 4f 20 6e 6f 74 20 65 6d 70 74 79 20 31     FIFO not empty 1
     b72:	3a 20 25 75 0d 0a 00                                : %u...

00000b79 <__c.2550>:
     b79:	54 58 20 72 65 61 64 79 3a 20 25 75 0d 0a 00        TX ready: %u...

00000b88 <__c.2548>:
     b88:	57 72 69 74 65 20 70 61 63 6b 65 74 20 74 6f 20     Write packet to 
     b98:	46 49 46 4f 0d 0a 00                                FIFO...

00000b9f <__c.2544>:
     b9f:	46 49 46 4f 20 6e 6f 74 20 65 6d 70 74 79 20 30     FIFO not empty 0
     baf:	3a 20 25 75 0d 0a 00                                : %u...

00000bb6 <__c.2587>:
     bb6:	25 75 0d 0a 00                                      %u...

00000bbb <__c.2585>:
     bbb:	25 75 2c 00                                         %u,.

00000bbf <__c.2583>:
     bbf:	32 30 25 30 32 75 2d 25 30 32 75 2d 25 30 32 75     20%02u-%02u-%02u
     bcf:	20 25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 2c      %02u:%02u:%02u,
	...

00000be0 <__c.2581>:
     be0:	25 75 2c 00                                         %u,.

00000be4 <__c.2579>:
     be4:	25 64 2c 00                                         %d,.

00000be8 <__c.2577>:
     be8:	25 75 2c 00                                         %u,.

00000bec <__c.2575>:
     bec:	25 75 2c 00                                         %u,.

00000bf0 <__c.2573>:
     bf0:	25 75 2c 00                                         %u,.

00000bf4 <__c.2571>:
     bf4:	3c 50 43 4b 3e 00                                   <PCK>.

00000bfa <__c.2512>:
     bfa:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 20 70     <INFO> %s() No p
     c0a:	61 63 6b 65 74 20 68 61 6e 64 6c 65 72 20 66 6f     acket handler fo
     c1a:	72 20 70 61 63 6b 65 74 20 74 79 70 65 20 25 75     r packet type %u
     c2a:	0d 0a 00                                            ...

00000c2d <__c.2509>:
     c2d:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 53 69 7a     <ERROR> %s() Siz
     c3d:	65 20 6f 66 20 64 61 74 61 20 70 61 63 6b 65 74     e of data packet
     c4d:	20 69 73 20 6c 61 72 67 65 72 20 74 68 65 6e 20      is larger then 
     c5d:	74 68 65 20 46 49 46 4f 0d 0a 00                    the FIFO...

00000c68 <__c.2534>:
     c68:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     c78:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     c88:	2e 63 00                                            .c.

00000c8b <__c.2536>:
     c8b:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000c9a <__c.2531>:
     c9a:	41 43 4b 20 6d 6f 64 65 20 72 65 61 64 79 0d 0a     ACK mode ready..
	...

00000cab <__c.2526>:
     cab:	49 6e 69 74 20 6c 69 73 74 65 6e 3a 20 72 65 73     Init listen: res
     cbb:	74 61 72 74 20 52 58 0d 0a 00                       tart RX...

00000cc5 <__c.2518>:
     cc5:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 65 6e 64     <INFO> %s() Send
     cd5:	69 6e 67 20 70 61 63 6b 65 74 20 66 72 6f 6d 20     ing packet from 
     ce5:	62 75 66 66 65 72 0d 0a 00                          buffer...

00000cee <__c.2446>:
     cee:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     cfe:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     d0e:	2e 63 00                                            .c.

00000d11 <__c.2448>:
     d11:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000d20 <__c.2437>:
     d20:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 54     <WARNING> %s() T
     d30:	72 61 6e 73 63 65 69 76 65 72 20 6e 6f 74 20 69     ransceiver not i
     d40:	6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00              nitialized...

00000d4d <__c.2430>:
     d4d:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 54 72 61 6e     <INFO> %s() Tran
     d5d:	73 63 65 69 76 65 72 20 69 6e 69 74 69 61 74 65     sceiver initiate
     d6d:	64 0d 0a 00                                         d...

00000d71 <__c.1958>:
     d71:	3c 43 52 49 54 49 43 41 4c 3e 20 25 73 28 29 20     <CRITICAL> %s() 
     d81:	45 6e 74 65 72 69 6e 67 20 66 61 69 6c 20 73 74     Entering fail st
     d91:	61 74 65 2c 20 6d 61 6e 75 61 6c 20 72 65 62 6f     ate, manual rebo
     da1:	6f 74 20 69 73 20 6e 65 65 64 65 64 2e 0d 0a 00     ot is needed....

00000db1 <__c.1953>:
     db1:	3c 45 52 52 4f 52 3e 20 46 61 69 6c 65 64 20 61     <ERROR> Failed a
     dc1:	73 73 65 72 74 3a 20 25 73 3a 25 75 20 28 25 73     ssert: %s:%u (%s
     dd1:	29 0d 0a 00                                         )...

00000dd5 <__c.1928>:
     dd5:	45 72 72 6f 72 20 6c 6f 67 20 69 6e 64 65 78 3a     Error log index:
     de5:	20 25 75 0d 0a 00                                    %u...

00000deb <__c.1778>:
     deb:	2e 2e 2f 2e 2f 4c 45 44 2e 63 00                    .././LED.c.

00000df6 <__c.1780>:
     df6:	73 74 61 74 65 20 3c 3d 20 4c 45 44 5f 53 54 41     state <= LED_STA
     e06:	54 45 5f 53 4c 45 45 50 49 4e 47 00                 TE_SLEEPING.

00000e12 <__c.1841>:
     e12:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 49 6e 76     <ERROR> %s() Inv
     e22:	61 6c 69 64 20 64 61 74 61 0d 0a 00                 alid data...

00000e2e <__c.1818>:
     e2e:	2e 2e 2f 2e 2f 6c 69 62 44 48 54 32 32 2e 63 00     .././libDHT22.c.

00000e3e <__c.1820>:
     e3e:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000e4d <__c.1814>:
     e4d:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 54 69 6d     <ERROR> %s() Tim
     e5d:	65 6f 75 74 20 77 68 69 6c 65 20 63 61 70 74 75     eout while captu
     e6d:	72 69 6e 67 20 64 61 74 61 0d 0a 00                 ring data...

00000e79 <__c.1784>:
     e79:	2e 2e 2f 2e 2f 6c 69 62 44 48 54 32 32 2e 63 00     .././libDHT22.c.

00000e89 <__c.1786>:
     e89:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000e98 <__c.1771>:
     e98:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     ea8:	20 64 6f 6e 65 0d 0a 00                              done...

00000eb0 <__c.1929>:
     eb0:	43 61 70 61 63 69 74 79 3a 20 30 78 25 30 32 58     Capacity: 0x%02X
     ec0:	0d 0a 00                                            ...

00000ec3 <__c.1927>:
     ec3:	4d 65 6d 6f 72 79 20 74 79 70 65 3a 20 30 78 25     Memory type: 0x%
     ed3:	30 32 58 0d 0a 00                                   02X...

00000ed9 <__c.1925>:
     ed9:	4d 61 6e 75 66 61 63 74 75 72 65 72 3a 20 30 78     Manufacturer: 0x
     ee9:	25 30 32 58 0d 0a 00                                %02X...

00000ef0 <__c.1920>:
     ef0:	53 52 45 47 33 3a 20 30 78 25 30 32 78 0d 0a 00     SREG3: 0x%02x...

00000f00 <__c.1918>:
     f00:	53 52 45 47 32 3a 20 30 78 25 30 32 78 0d 0a 00     SREG2: 0x%02x...

00000f10 <__c.1916>:
     f10:	53 52 45 47 31 3a 20 30 78 25 30 32 78 0d 0a 00     SREG1: 0x%02x...

00000f20 <__c.2049>:
     f20:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     f30:	2e 63 00                                            .c.

00000f33 <__c.2051>:
     f33:	61 6c 61 72 6d 5f 69 6e 64 65 78 20 3c 20 32 00     alarm_index < 2.

00000f43 <__c.2029>:
     f43:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     f53:	2e 63 00                                            .c.

00000f56 <__c.2031>:
     f56:	61 6c 61 72 6d 5f 69 6e 64 65 78 20 3c 20 32 00     alarm_index < 2.

00000f66 <__c.1945>:
     f66:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     f76:	2e 63 00                                            .c.

00000f79 <__c.1947>:
     f79:	61 6c 61 72 6d 5f 69 6e 64 65 78 20 3c 20 32 00     alarm_index < 2.

00000f89 <__c.1941>:
     f89:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     f99:	2e 63 00                                            .c.

00000f9c <__c.1943>:
     f9c:	68 6f 75 72 20 3c 20 32 34 00                       hour < 24.

00000fa6 <__c.1919>:
     fa6:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     fb6:	2e 63 00                                            .c.

00000fb9 <__c.1921>:
     fb9:	61 6c 61 72 6d 5f 69 6e 64 65 78 20 3c 20 32 00     alarm_index < 2.

00000fc9 <__c.1915>:
     fc9:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     fd9:	2e 63 00                                            .c.

00000fdc <__c.1917>:
     fdc:	6d 69 6e 75 74 65 20 3c 20 36 30 00                 minute < 60.

00000fe8 <__c.1896>:
     fe8:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
     ff8:	2e 63 00                                            .c.

00000ffb <__c.1898>:
     ffb:	61 6c 61 72 6d 5f 69 6e 64 65 78 20 3c 20 32 00     alarm_index < 2.

0000100b <__c.1892>:
    100b:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
    101b:	2e 63 00                                            .c.

0000101e <__c.1894>:
    101e:	73 65 63 20 3c 20 36 30 00                          sec < 60.

00001027 <__c.2106>:
    1027:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
    1037:	2e 63 00                                            .c.

0000103a <__c.2108>:
    103a:	61 64 64 72 65 73 73 20 3c 20 30 78 32 30 00        address < 0x20.

00001049 <__c.2113>:
    1049:	2e 2e 2f 2e 2f 6c 69 62 4d 43 50 37 39 35 31 30     .././libMCP79510
    1059:	2e 63 00                                            .c.

0000105c <__c.2115>:
    105c:	61 64 64 72 65 73 73 20 3c 20 30 78 32 30 00        address < 0x20.

0000106b <__c.1853>:
    106b:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
    107b:	20 64 6f 6e 65 0d 0a 00                              done...

00001083 <__c.1762>:
    1083:	2e 2e 2f 2e 2f 6c 69 62 50 6f 77 65 72 2e 63 00     .././libPower.c.

00001093 <__c.1764>:
    1093:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

000010a2 <__c.2362>:
    10a2:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 57 61 6b 65     <INFO> %s() Wake
    10b2:	3a 20 25 75 3a 25 75 3a 25 75 0d 0a 00              : %u:%u:%u...

000010bf <__c.2356>:
    10bf:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 6c 65 65     <INFO> %s() Slee
    10cf:	70 3a 20 25 75 3a 25 75 3a 25 75 0d 0a 00           p: %u:%u:%u...

000010dd <__c.2337>:
    10dd:	2e 2e 2f 2e 2f 6e 6f 64 65 5f 66 69 72 6d 77 61     .././node_firmwa
    10ed:	72 65 2e 63 00                                      re.c.

000010f2 <__c.2339>:
    10f2:	53 74 61 63 6b 43 6f 75 6e 74 28 29 20 3e 20 30     StackCount() > 0
	...

00001103 <__c.2335>:
    1103:	55 6e 75 73 65 64 20 73 74 61 63 6b 3a 20 25 75     Unused stack: %u
    1113:	0d 0a 00                                            ...

00001116 <__c.2333>:
    1116:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 42 61 74 74     <INFO> %s() Batt
    1126:	65 72 79 20 76 6f 6c 74 61 67 65 3a 20 25 6c 75     ery voltage: %lu
    1136:	0d 0a 00                                            ...

00001139 <__c.2331>:
    1139:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 74 61 72     <INFO> %s() Star
    1149:	74 20 75 70 20 64 6f 6e 65 0d 0a 00                 t up done...

00001155 <__c.2329>:
    1155:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4c 61 73 74     <INFO> %s() Last
    1165:	20 72 65 73 65 74 3a 20 30 78 25 30 32 58 0d 0a      reset: 0x%02X..
	...

00001176 <__c.2326>:
    1176:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 64 65     <INFO> %s() Node
    1186:	20 75 6e 69 74 20 73 74 61 72 74 65 64 0d 0a 00      unit started...

00001196 <__c.1933>:
    1196:	43 68 61 72 67 69 6e 67 3a 20 25 75 0d 0a 00        Charging: %u...

000011a5 <__c.1931>:
    11a5:	43 68 61 72 67 65 72 20 63 6f 6e 6e 65 63 74 65     Charger connecte
    11b5:	64 3a 20 25 75 0d 0a 00                             d: %u...

000011bd <__c.1929>:
    11bd:	42 61 74 74 65 72 79 20 76 6f 6c 74 61 67 65 3a     Battery voltage:
    11cd:	20 25 75 0d 0a 00                                    %u...

000011d3 <__c.1925>:
    11d3:	2e 2e 2f 2e 2f 50 6f 77 65 72 2e 63 00              .././Power.c.

000011e0 <__c.1927>:
    11e0:	65 76 65 6e 74 20 21 3d 20 4e 55 4c 4c 00           event != NULL.

000011ee <__c.1978>:
    11ee:	2e 2e 2f 2e 2f 50 6f 77 65 72 2e 63 00              .././Power.c.

000011fb <__c.1980>:
    11fb:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

0000120a <__c.1973>:
    120a:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    121a:	67 65 72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64     ger disconnected
    122a:	0d 0a 00                                            ...

0000122d <__c.1969>:
    122d:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    123d:	67 69 6e 67 20 73 74 61 72 74 65 64 0d 0a 00        ging started...

0000124c <__c.1964>:
    124c:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    125c:	67 69 6e 67 20 73 74 6f 70 70 65 64 0d 0a 00        ging stopped...

0000126b <__c.1959>:
    126b:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    127b:	67 69 6e 67 20 73 74 61 72 74 65 64 0d 0a 00        ging started...

0000128a <__c.1954>:
    128a:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 43     <WARNING> %s() C
    129a:	72 69 74 69 63 61 6c 20 62 61 74 74 65 72 79 20     ritical battery 
    12aa:	76 6f 6c 74 61 67 65 0d 0a 00                       voltage...

000012b4 <__c.1950>:
    12b4:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    12c4:	67 69 6e 67 20 73 74 61 72 74 65 64 0d 0a 00        ging started...

000012d3 <__c.1944>:
    12d3:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4c 6f 77 20     <INFO> %s() Low 
    12e3:	62 61 74 74 65 72 79 20 76 6f 6c 74 61 67 65 0d     battery voltage.
    12f3:	0a 00                                               ..

000012f5 <__c.1939>:
    12f5:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 68 61 72     <INFO> %s() Char
    1305:	67 69 6e 67 20 73 74 61 72 74 65 64 0d 0a 00        ging started...

00001314 <__c.2313>:
    1314:	2e 2e 2f 2e 2f 53 65 6e 73 6f 72 2e 63 00           .././Sensor.c.

00001322 <__c.2315>:
    1322:	65 76 65 6e 74 20 21 3d 20 4e 55 4c 4c 00           event != NULL.

00001330 <__c.2322>:
    1330:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 65 6e 73     <INFO> %s() Sens
    1340:	6f 72 20 63 61 6c 6c 62 61 63 6b 3a 20 25 75 0d     or callback: %u.
    1350:	0a 00                                               ..

00001352 <__c.2307>:
    1352:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 48 75 6d 69     <INFO> %s() Humi
    1362:	64 69 74 79 3a 20 25 75 25 25 0d 0a 00              dity: %u%%...

0000136f <__c.2304>:
    136f:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 54 65 6d 70     <INFO> %s() Temp
    137f:	65 72 61 74 75 72 65 3a 20 25 75 43 0d 0a 00        erature: %uC...

0000138e <__c.2296>:
    138e:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
    139e:	20 64 6f 6e 65 0d 0a 00                              done...

000013a6 <StackPaint>:
    {
        *p = STACK_CANARY;
        p++;
    }
#else
    __asm volatile ("    ldi r30,lo8(_end)\n"
    13a6:	e7 e2       	ldi	r30, 0x27	; 39
    13a8:	f4 e0       	ldi	r31, 0x04	; 4
    13aa:	85 ec       	ldi	r24, 0xC5	; 197
    13ac:	98 e0       	ldi	r25, 0x08	; 8
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <.cmp>

000013b0 <.loop>:
    13b0:	81 93       	st	Z+, r24

000013b2 <.cmp>:
    13b2:	ef 3f       	cpi	r30, 0xFF	; 255
    13b4:	f9 07       	cpc	r31, r25
    13b6:	e0 f3       	brcs	.-8      	; 0x13b0 <.loop>
    13b8:	d9 f3       	breq	.-10     	; 0x13b0 <.loop>
    13ba:	11 24       	eor	r1, r1
    13bc:	1f be       	out	0x3f, r1	; 63
    13be:	cf ef       	ldi	r28, 0xFF	; 255
    13c0:	d8 e0       	ldi	r29, 0x08	; 8
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	cd bf       	out	0x3d, r28	; 61

000013c6 <__do_copy_data>:
    13c6:	13 e0       	ldi	r17, 0x03	; 3
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b1 e0       	ldi	r27, 0x01	; 1
    13cc:	e8 ec       	ldi	r30, 0xC8	; 200
    13ce:	f0 e5       	ldi	r31, 0x50	; 80
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <__do_copy_data+0x10>
    13d2:	05 90       	lpm	r0, Z+
    13d4:	0d 92       	st	X+, r0
    13d6:	a8 30       	cpi	r26, 0x08	; 8
    13d8:	b1 07       	cpc	r27, r17
    13da:	d9 f7       	brne	.-10     	; 0x13d2 <__do_copy_data+0xc>

000013dc <__do_clear_bss>:
    13dc:	24 e0       	ldi	r18, 0x04	; 4
    13de:	a8 e0       	ldi	r26, 0x08	; 8
    13e0:	b3 e0       	ldi	r27, 0x03	; 3
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <.do_clear_bss_start>

000013e4 <.do_clear_bss_loop>:
    13e4:	1d 92       	st	X+, r1

000013e6 <.do_clear_bss_start>:
    13e6:	a7 32       	cpi	r26, 0x27	; 39
    13e8:	b2 07       	cpc	r27, r18
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <.do_clear_bss_loop>
    13ec:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <main>
    13f0:	0c 94 62 28 	jmp	0x50c4	; 0x50c4 <_exit>

000013f4 <__bad_interrupt>:
    13f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000013f8 <BCDToDecimal>:

uint8_t BCDToDecimal(uint8_t bcd_data)
{
    uint8_t data;

    data = ((bcd_data & 0xF0) >> 4) * 10;
    13f8:	98 2f       	mov	r25, r24
    13fa:	92 95       	swap	r25
    13fc:	9f 70       	andi	r25, 0x0F	; 15
    13fe:	99 0f       	add	r25, r25
    1400:	29 2f       	mov	r18, r25
    1402:	22 0f       	add	r18, r18
    1404:	22 0f       	add	r18, r18
    1406:	92 0f       	add	r25, r18
    data += (bcd_data & 0x0F);
    1408:	8f 70       	andi	r24, 0x0F	; 15

    return data;
}
    140a:	89 0f       	add	r24, r25
    140c:	08 95       	ret

0000140e <DecimalToBCD>:

uint16_t DecimalToBCD(uint8_t decimal_data)
{
    uint16_t data = 0;
    uint8_t shift = 0;
    140e:	40 e0       	ldi	r20, 0x00	; 0
    return data;
}

uint16_t DecimalToBCD(uint8_t decimal_data)
{
    uint16_t data = 0;
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t shift = 0;

    do
    {
        data |= (decimal_data % 10) << shift;
    1414:	7d ec       	ldi	r23, 0xCD	; 205
    1416:	87 9f       	mul	r24, r23
    1418:	51 2d       	mov	r21, r1
    141a:	11 24       	eor	r1, r1
    141c:	56 95       	lsr	r21
    141e:	56 95       	lsr	r21
    1420:	56 95       	lsr	r21
    1422:	95 2f       	mov	r25, r21
    1424:	99 0f       	add	r25, r25
    1426:	69 2f       	mov	r22, r25
    1428:	66 0f       	add	r22, r22
    142a:	66 0f       	add	r22, r22
    142c:	96 0f       	add	r25, r22
    142e:	89 1b       	sub	r24, r25
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	04 2e       	mov	r0, r20
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DecimalToBCD+0x2c>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DecimalToBCD+0x28>
    143e:	28 2b       	or	r18, r24
    1440:	39 2b       	or	r19, r25
        shift += 4;
    1442:	4c 5f       	subi	r20, 0xFC	; 252
        decimal_data = decimal_data / 10;
    1444:	85 2f       	mov	r24, r21
    }
    while (decimal_data > 0);
    1446:	51 11       	cpse	r21, r1
    1448:	e6 cf       	rjmp	.-52     	; 0x1416 <DecimalToBCD+0x8>

    return data;
}
    144a:	c9 01       	movw	r24, r18
    144c:	08 95       	ret

0000144e <SetBit>:

void SetBit(uint8_t bit_index, bool state, uint8_t *data)
{
    sc_assert(bit_index < 8);
    144e:	88 30       	cpi	r24, 0x08	; 8
    1450:	40 f0       	brcs	.+16     	; 0x1462 <SetBit+0x14>
    1452:	42 eb       	ldi	r20, 0xB2	; 178
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	6b e7       	ldi	r22, 0x7B	; 123
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	84 e9       	ldi	r24, 0x94	; 148
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    if (state == true)
    1462:	66 23       	and	r22, r22
    1464:	71 f0       	breq	.+28     	; 0x1482 <SetBit+0x34>
    {
        *data |= (1 << bit_index);
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	b9 01       	movw	r22, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <SetBit+0x24>
    146e:	66 0f       	add	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <SetBit+0x20>
    1476:	cb 01       	movw	r24, r22
    1478:	fa 01       	movw	r30, r20
    147a:	90 81       	ld	r25, Z
    147c:	89 2b       	or	r24, r25
    147e:	80 83       	st	Z, r24
    1480:	08 95       	ret
    }
    else
    {
        *data &= ~(1 << bit_index);
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	b9 01       	movw	r22, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <SetBit+0x40>
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <SetBit+0x3c>
    1492:	cb 01       	movw	r24, r22
    1494:	80 95       	com	r24
    1496:	fa 01       	movw	r30, r20
    1498:	90 81       	ld	r25, Z
    149a:	89 23       	and	r24, r25
    149c:	80 83       	st	Z, r24
    149e:	08 95       	ret

000014a0 <IsBitSet>:
    return;
}

bool IsBitSet(uint8_t bit_index, const uint8_t *data)
{
    sc_assert(bit_index < 8);
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	40 f0       	brcs	.+16     	; 0x14b4 <IsBitSet+0x14>
    14a4:	46 e8       	ldi	r20, 0x86	; 134
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	6a e8       	ldi	r22, 0x8A	; 138
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	88 e6       	ldi	r24, 0x68	; 104
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    return (bool)(*data & (1 << bit_index));
    14b4:	fb 01       	movw	r30, r22
    14b6:	20 81       	ld	r18, Z
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <IsBitSet+0x22>
    14be:	55 95       	asr	r21
    14c0:	47 95       	ror	r20
    14c2:	8a 95       	dec	r24
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <IsBitSet+0x1e>
    14c6:	ca 01       	movw	r24, r20
}
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	08 95       	ret

000014cc <IsGlobalInteruptEnabled>:
    }
}

bool IsGlobalInteruptEnabled(void)
{
    return ((SREG & (1 << 7)) > 0);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	07 fe       	sbrs	r0, 7
    14d2:	80 e0       	ldi	r24, 0x00	; 0
}
    14d4:	08 95       	ret

000014d6 <StackCount>:
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    14d6:	80 91 27 04 	lds	r24, 0x0427
    14da:	85 3c       	cpi	r24, 0xC5	; 197
    14dc:	a9 f4       	brne	.+42     	; 0x1508 <StackCount+0x32>
    14de:	87 e2       	ldi	r24, 0x27	; 39
    14e0:	94 e0       	ldi	r25, 0x04	; 4
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	98 40       	sbci	r25, 0x08	; 8
    14e6:	09 f0       	breq	.+2      	; 0x14ea <StackCount+0x14>
    14e8:	90 f4       	brcc	.+36     	; 0x150e <StackCount+0x38>
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
/// @param  None
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    14ee:	e7 e2       	ldi	r30, 0x27	; 39
    14f0:	f4 e0       	ldi	r31, 0x04	; 4
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    {
        p++;
    14f2:	31 96       	adiw	r30, 0x01	; 1
        c++;
    14f4:	01 96       	adiw	r24, 0x01	; 1
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    14f6:	20 81       	ld	r18, Z
    14f8:	25 3c       	cpi	r18, 0xC5	; 197
    14fa:	59 f4       	brne	.+22     	; 0x1512 <StackCount+0x3c>
    14fc:	28 e0       	ldi	r18, 0x08	; 8
    14fe:	ef 3f       	cpi	r30, 0xFF	; 255
    1500:	f2 07       	cpc	r31, r18
    1502:	b9 f3       	breq	.-18     	; 0x14f2 <StackCount+0x1c>
    1504:	b0 f3       	brcs	.-20     	; 0x14f2 <StackCount+0x1c>
    1506:	08 95       	ret
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	08 95       	ret
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
        p++;
        c++;
    }

    return c;
}
    1512:	08 95       	ret

00001514 <Config_Load>:
///
/// @param  None
/// @return bool true if the NVM configuration was valid, otherwise false
///
bool Config_Load(void)
{
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	6f 97       	sbiw	r28, 0x1f	; 31
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    bool status = false;
    config_type new_config;

    sc_assert(CONFIG_VERSION == eeprom_read_word(&nvm_config.version));
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 7f 27 	call	0x4efe	; 0x4efe <__eerd_word_m328p>
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	41 f0       	breq	.+16     	; 0x1544 <Config_Load+0x30>
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	51 e0       	ldi	r21, 0x01	; 1
    1538:	66 e8       	ldi	r22, 0x86	; 134
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	83 ee       	ldi	r24, 0xE3	; 227
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));
    1544:	4f e1       	ldi	r20, 0x1F	; 31
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__eerd_block_m328p>

static bool ValidateConfig(config_type *config)
{
    sc_assert(config != NULL);

    return (config->node_id != 0 &&
    1554:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1556:	88 23       	and	r24, r24
    1558:	31 f0       	breq	.+12     	; 0x1566 <Config_Load+0x52>
            (config->node_role > 0 && config->node_role < 4));
    155a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155c:	81 50       	subi	r24, 0x01	; 1

static bool ValidateConfig(config_type *config)
{
    sc_assert(config != NULL);

    return (config->node_id != 0 &&
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	20 f0       	brcs	.+8      	; 0x156a <Config_Load+0x56>
/// @param  None
/// @return bool true if the NVM configuration was valid, otherwise false
///
bool Config_Load(void)
{
    bool status = false;
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	1a c0       	rjmp	.+52     	; 0x159a <Config_Load+0x86>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	18 c0       	rjmp	.+48     	; 0x159a <Config_Load+0x86>

    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));

    if(ValidateConfig(&new_config) == true)
    {
        active_config = new_config;
    156a:	8f e1       	ldi	r24, 0x1F	; 31
    156c:	fe 01       	movw	r30, r28
    156e:	31 96       	adiw	r30, 0x01	; 1
    1570:	a8 e0       	ldi	r26, 0x08	; 8
    1572:	b3 e0       	ldi	r27, 0x03	; 3
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	8a 95       	dec	r24
    157a:	e1 f7       	brne	.-8      	; 0x1574 <Config_Load+0x60>
        status = true;
        INFO("Configuration loaded");
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	80 ec       	ldi	r24, 0xC0	; 192
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9f 93       	push	r25
    158a:	8f 93       	push	r24
    158c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));

    if(ValidateConfig(&new_config) == true)
    {
        active_config = new_config;
        status = true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
        INFO("Configuration loaded");
    }
    return status;
}
    159a:	6f 96       	adiw	r28, 0x1f	; 31
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <Config_GetNetworkId>:
/// @return uint8_t* Pointer to network id
///
uint8_t *Config_GetNetworkId(void)
{
    return active_config.network_id;
}
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	93 e0       	ldi	r25, 0x03	; 3
    15b0:	08 95       	ret

000015b2 <Config_GetReportInterval>:
/// @return uint32_t Report interval in seconds
///
uint32_t Config_GetReportInterval(void)
{
    return 10;//active_config.report_interval_s;
}
    15b2:	6a e0       	ldi	r22, 0x0A	; 10
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	08 95       	ret

000015bc <Config_GetNodeId>:
/// @return uint8_t Node id
///
uint8_t Config_GetNodeId(void)
{
    return active_config.node_id;
}
    15bc:	80 91 25 03 	lds	r24, 0x0325
    15c0:	08 95       	ret

000015c2 <Event_AddListener>:
/// @param  id Event id to register to
/// @return None
///
void Event_AddListener(event_callback listener, event_id_type id)
{
    sc_assert(listener != NULL);
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	41 f4       	brne	.+16     	; 0x15d6 <Event_AddListener+0x14>
    15c6:	49 e2       	ldi	r20, 0x29	; 41
    15c8:	52 e0       	ldi	r21, 0x02	; 2
    15ca:	66 e4       	ldi	r22, 0x46	; 70
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	8c e0       	ldi	r24, 0x0C	; 12
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    sc_assert(nr_listeners < MAX_NR_LISTENERS);
    15d6:	40 91 45 03 	lds	r20, 0x0345
    15da:	4a 30       	cpi	r20, 0x0A	; 10
    15dc:	40 f0       	brcs	.+16     	; 0x15ee <Event_AddListener+0x2c>
    15de:	4c ee       	ldi	r20, 0xEC	; 236
    15e0:	51 e0       	ldi	r21, 0x01	; 1
    15e2:	67 e4       	ldi	r22, 0x47	; 71
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	8f ec       	ldi	r24, 0xCF	; 207
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    listener_pool[nr_listeners].callback = listener;
    15ee:	24 2f       	mov	r18, r20
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e2 0f       	add	r30, r18
    15fa:	f3 1f       	adc	r31, r19
    15fc:	e9 5d       	subi	r30, 0xD9	; 217
    15fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1600:	92 83       	std	Z+2, r25	; 0x02
    1602:	81 83       	std	Z+1, r24	; 0x01
    listener_pool[nr_listeners].id = id;
    1604:	60 83       	st	Z, r22
    ++nr_listeners;
    1606:	4f 5f       	subi	r20, 0xFF	; 255
    1608:	40 93 45 03 	sts	0x0345, r20
    160c:	08 95       	ret

0000160e <Event_Trigger>:
///
/// @param  event Pointer to triggered event
/// @return None
///
void Event_Trigger(const event_type *event)
{
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	8c 01       	movw	r16, r24
    sc_assert(nr_listeners < MAX_NR_LISTENERS);
    161e:	80 91 45 03 	lds	r24, 0x0345
    1622:	8a 30       	cpi	r24, 0x0A	; 10
    1624:	18 f4       	brcc	.+6      	; 0x162c <Event_Trigger+0x1e>

    uint8_t index;
    for (index = 0; index < nr_listeners; ++index)
    1626:	81 11       	cpse	r24, r1
    1628:	09 c0       	rjmp	.+18     	; 0x163c <Event_Trigger+0x2e>
    162a:	4c c0       	rjmp	.+152    	; 0x16c4 <Event_Trigger+0xb6>
/// @param  event Pointer to triggered event
/// @return None
///
void Event_Trigger(const event_type *event)
{
    sc_assert(nr_listeners < MAX_NR_LISTENERS);
    162c:	4f ea       	ldi	r20, 0xAF	; 175
    162e:	51 e0       	ldi	r21, 0x01	; 1
    1630:	68 e5       	ldi	r22, 0x58	; 88
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	82 e9       	ldi	r24, 0x92	; 146
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t index;
    for (index = 0; index < nr_listeners; ++index)
    163c:	d1 2c       	mov	r13, r1
        if (listener_pool[index].id == event->id ||
                listener_pool[index].id == EVENT_ALL)
        {
            sc_assert(listener_pool[index].callback != NULL);

            DEBUG("Notify listener: %u\r\n", index);
    163e:	0f 2e       	mov	r0, r31
    1640:	f9 e3       	ldi	r31, 0x39	; 57
    1642:	ef 2e       	mov	r14, r31
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	ff 2e       	mov	r15, r31
    1648:	f0 2d       	mov	r31, r0
    sc_assert(nr_listeners < MAX_NR_LISTENERS);

    uint8_t index;
    for (index = 0; index < nr_listeners; ++index)
    {
        if (listener_pool[index].id == event->id ||
    164a:	cd 2d       	mov	r28, r13
    164c:	d0 e0       	ldi	r29, 0x00	; 0
    164e:	fe 01       	movw	r30, r28
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ec 0f       	add	r30, r28
    1656:	fd 1f       	adc	r31, r29
    1658:	e9 5d       	subi	r30, 0xD9	; 217
    165a:	fc 4f       	sbci	r31, 0xFC	; 252
    165c:	80 81       	ld	r24, Z
    165e:	f8 01       	movw	r30, r16
    1660:	94 81       	ldd	r25, Z+4	; 0x04
    1662:	89 17       	cp	r24, r25
    1664:	11 f0       	breq	.+4      	; 0x166a <Event_Trigger+0x5c>
    1666:	81 11       	cpse	r24, r1
    1668:	28 c0       	rjmp	.+80     	; 0x16ba <Event_Trigger+0xac>
                listener_pool[index].id == EVENT_ALL)
        {
            sc_assert(listener_pool[index].callback != NULL);
    166a:	fe 01       	movw	r30, r28
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	ec 0f       	add	r30, r28
    1672:	fd 1f       	adc	r31, r29
    1674:	e9 5d       	subi	r30, 0xD9	; 217
    1676:	fc 4f       	sbci	r31, 0xFC	; 252
    1678:	81 81       	ldd	r24, Z+1	; 0x01
    167a:	92 81       	ldd	r25, Z+2	; 0x02
    167c:	89 2b       	or	r24, r25
    167e:	41 f4       	brne	.+16     	; 0x1690 <Event_Trigger+0x82>
    1680:	4c e6       	ldi	r20, 0x6C	; 108
    1682:	51 e0       	ldi	r21, 0x01	; 1
    1684:	60 e6       	ldi	r22, 0x60	; 96
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	8f e4       	ldi	r24, 0x4F	; 79
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

            DEBUG("Notify listener: %u\r\n", index);
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	ff 92       	push	r15
    1696:	ef 92       	push	r14
    1698:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            listener_pool[index].callback(event);
    169c:	ce 01       	movw	r24, r28
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	c8 0f       	add	r28, r24
    16a4:	d9 1f       	adc	r29, r25
    16a6:	c9 5d       	subi	r28, 0xD9	; 217
    16a8:	dc 4f       	sbci	r29, 0xFC	; 252
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	c8 01       	movw	r24, r16
    16b0:	09 95       	icall
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
void Event_Trigger(const event_type *event)
{
    sc_assert(nr_listeners < MAX_NR_LISTENERS);

    uint8_t index;
    for (index = 0; index < nr_listeners; ++index)
    16ba:	d3 94       	inc	r13
    16bc:	80 91 45 03 	lds	r24, 0x0345
    16c0:	d8 16       	cp	r13, r24
    16c2:	18 f2       	brcs	.-122    	; 0x164a <Event_Trigger+0x3c>
            DEBUG("Notify listener: %u\r\n", index);
            listener_pool[index].callback(event);
        }
    }
    return;
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	08 95       	ret

000016d4 <libADC_Init>:
/// @return None
///
void libADC_Init(void)
{
    //Set the prescaler to 128(115 KHz) and enable interrupt
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
    16d4:	ea e7       	ldi	r30, 0x7A	; 122
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	87 60       	ori	r24, 0x07	; 7
    16dc:	80 83       	st	Z, r24

    //Set the reference voltage to AREF
    ADMUX = 0x00;
    16de:	10 92 7c 00 	sts	0x007C, r1
    16e2:	e9 e4       	ldi	r30, 0x49	; 73
    16e4:	f3 e0       	ldi	r31, 0x03	; 3

static void InitInputArray()
{
    uint8_t index;

    for (index = 0; index < MAX_ADC_INPUTS; ++index)
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	df 01       	movw	r26, r30
    16ea:	12 97       	sbiw	r26, 0x02	; 2
    {
        adc_inputs[index].active = false;
    16ec:	1c 92       	st	X, r1
    16ee:	11 96       	adiw	r26, 0x01	; 1
        adc_inputs[index].valid = false;
    16f0:	1c 92       	st	X, r1
        adc_inputs[index].channel_index = index;
    16f2:	80 83       	st	Z, r24
        adc_inputs[index].sample_value = 0;
    16f4:	12 82       	std	Z+2, r1	; 0x02
    16f6:	11 82       	std	Z+1, r1	; 0x01

static void InitInputArray()
{
    uint8_t index;

    for (index = 0; index < MAX_ADC_INPUTS; ++index)
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	35 96       	adiw	r30, 0x05	; 5
    16fc:	89 30       	cpi	r24, 0x09	; 9
    16fe:	a1 f7       	brne	.-24     	; 0x16e8 <libADC_Init+0x14>

    //Set the reference voltage to AREF
    ADMUX = 0x00;

    InitInputArray();
    adc_state = LIBADC_IDLE;
    1700:	10 92 74 03 	sts	0x0374, r1

    INFO("Init done");
    1704:	8a e1       	ldi	r24, 0x1A	; 26
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	9f 93       	push	r25
    170a:	8f 93       	push	r24
    170c:	88 ef       	ldi	r24, 0xF8	; 248
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	9f 93       	push	r25
    1712:	8f 93       	push	r24
    1714:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	08 95       	ret

00001722 <libADC_Update>:
///
void libADC_Update(void)
{
    static uint8_t current_input = 0;

    if (current_input >= MAX_ADC_INPUTS)
    1722:	80 91 46 03 	lds	r24, 0x0346
    1726:	89 30       	cpi	r24, 0x09	; 9
    1728:	10 f0       	brcs	.+4      	; 0x172e <libADC_Update+0xc>
    {
        current_input = 0;
    172a:	10 92 46 03 	sts	0x0346, r1
    }

    switch (adc_state)
    172e:	80 91 74 03 	lds	r24, 0x0374
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	31 f0       	breq	.+12     	; 0x1742 <libADC_Update+0x20>
    1736:	08 f4       	brcc	.+2      	; 0x173a <libADC_Update+0x18>
    1738:	7e c0       	rjmp	.+252    	; 0x1836 <libADC_Update+0x114>
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	09 f4       	brne	.+2      	; 0x1740 <libADC_Update+0x1e>
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <libADC_Update+0x9e>
    1740:	68 c0       	rjmp	.+208    	; 0x1812 <libADC_Update+0xf0>
        case LIBADC_IDLE:
            //Do nothing when idle
            break;

        case LIBADC_NEW_SAMPLE:
            while (adc_inputs[current_input].active != true &&
    1742:	20 91 46 03 	lds	r18, 0x0346
    1746:	82 2f       	mov	r24, r18
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	fc 01       	movw	r30, r24
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	8e 0f       	add	r24, r30
    1756:	9f 1f       	adc	r25, r31
    1758:	fc 01       	movw	r30, r24
    175a:	e9 5b       	subi	r30, 0xB9	; 185
    175c:	fc 4f       	sbci	r31, 0xFC	; 252
    175e:	80 81       	ld	r24, Z
    1760:	81 11       	cpse	r24, r1
    1762:	66 c0       	rjmp	.+204    	; 0x1830 <libADC_Update+0x10e>
    1764:	29 30       	cpi	r18, 0x09	; 9
    1766:	08 f0       	brcs	.+2      	; 0x176a <libADC_Update+0x48>
    1768:	66 c0       	rjmp	.+204    	; 0x1836 <libADC_Update+0x114>
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	82 2f       	mov	r24, r18
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	fc 01       	movw	r30, r24
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	8e 0f       	add	r24, r30
    177c:	9f 1f       	adc	r25, r31
    177e:	fc 01       	movw	r30, r24
    1780:	e9 5b       	subi	r30, 0xB9	; 185
    1782:	fc 4f       	sbci	r31, 0xFC	; 252
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	19 f0       	breq	.+6      	; 0x1790 <libADC_Update+0x6e>
    178a:	20 93 46 03 	sts	0x0346, r18
    178e:	50 c0       	rjmp	.+160    	; 0x1830 <libADC_Update+0x10e>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	82 0f       	add	r24, r18
    1794:	8a 30       	cpi	r24, 0x0A	; 10
    1796:	19 f4       	brne	.+6      	; 0x179e <libADC_Update+0x7c>
    1798:	20 93 46 03 	sts	0x0346, r18
    179c:	08 95       	ret
    179e:	28 2f       	mov	r18, r24
    17a0:	e5 cf       	rjmp	.-54     	; 0x176c <libADC_Update+0x4a>
{
    uint8_t new_admux;

    sc_assert(adc_channel < MAX_ADC_INPUTS);

    new_admux = ADMUX;
    17a2:	ec e7       	ldi	r30, 0x7C	; 124
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    //Clear MUX-bits
    new_admux &= 0xF0;
    17a8:	80 7f       	andi	r24, 0xF0	; 240

    //Set new channel
    new_admux |= adc_channel;
    17aa:	28 2b       	or	r18, r24
    ADMUX = new_admux;
    17ac:	20 83       	st	Z, r18
            if (adc_inputs[current_input].active == true &&
                    current_input < MAX_ADC_INPUTS)
            {
                SelectInput(current_input);
                //Start a new conversion
                ADCSRA |= (1 << ADSC);
    17ae:	ea e7       	ldi	r30, 0x7A	; 122
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	80 83       	st	Z, r24
                adc_state = LIBADC_SAMPLING;
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	80 93 74 03 	sts	0x0374, r24
    17be:	08 95       	ret
            }
            break;

        case LIBADC_SAMPLING:
            //Check if ADC is done
            if (ADCSRA & (1 << ADIF))
    17c0:	80 91 7a 00 	lds	r24, 0x007A
    17c4:	84 ff       	sbrs	r24, 4
    17c6:	37 c0       	rjmp	.+110    	; 0x1836 <libADC_Update+0x114>
            {
                adc_inputs[current_input].sample_value = ADCL;
    17c8:	20 91 46 03 	lds	r18, 0x0346
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	80 91 78 00 	lds	r24, 0x0078
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	e2 0f       	add	r30, r18
    17e0:	f3 1f       	adc	r31, r19
    17e2:	e9 5b       	subi	r30, 0xB9	; 185
    17e4:	fc 4f       	sbci	r31, 0xFC	; 252
    17e6:	94 83       	std	Z+4, r25	; 0x04
    17e8:	83 83       	std	Z+3, r24	; 0x03
                adc_inputs[current_input].sample_value |= (ADCH << 8);
    17ea:	20 91 79 00 	lds	r18, 0x0079
    17ee:	92 2b       	or	r25, r18
    17f0:	94 83       	std	Z+4, r25	; 0x04
    17f2:	83 83       	std	Z+3, r24	; 0x03
                adc_inputs[current_input].valid = true;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	81 83       	std	Z+1, r24	; 0x01
                ADCSRA &= ~(1 << ADIF);
    17f8:	ea e7       	ldi	r30, 0x7A	; 122
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	90 81       	ld	r25, Z
    17fe:	9f 7e       	andi	r25, 0xEF	; 239
    1800:	90 83       	st	Z, r25
                adc_state = LIBADC_NEW_SAMPLE;
    1802:	80 93 74 03 	sts	0x0374, r24
                ++current_input;
    1806:	80 91 46 03 	lds	r24, 0x0346
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	80 93 46 03 	sts	0x0346, r24
    1810:	08 95       	ret
            }
            break;

        default:
            WARNING("Unknown State");
    1812:	8c e0       	ldi	r24, 0x0C	; 12
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	9f 93       	push	r25
    1818:	8f 93       	push	r24
    181a:	89 ed       	ldi	r24, 0xD9	; 217
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	9f 93       	push	r25
    1820:	8f 93       	push	r24
    1822:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            break;
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	08 95       	ret
                    current_input < MAX_ADC_INPUTS)
            {
                ++current_input;
            }

            if (adc_inputs[current_input].active == true &&
    1830:	29 30       	cpi	r18, 0x09	; 9
    1832:	08 f4       	brcc	.+2      	; 0x1836 <libADC_Update+0x114>
    1834:	b6 cf       	rjmp	.-148    	; 0x17a2 <libADC_Update+0x80>
    1836:	08 95       	ret

00001838 <libADC_Enable>:
/// @param  mode Select if enable/disable ADC
/// @return None
///
void libADC_Enable(bool mode)
{
    if (mode == true)
    1838:	88 23       	and	r24, r24
    183a:	49 f0       	breq	.+18     	; 0x184e <libADC_Enable+0x16>
    {
        adc_state = LIBADC_NEW_SAMPLE;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 74 03 	sts	0x0374, r24
        ADCSRA |= (1 << ADEN);
    1842:	ea e7       	ldi	r30, 0x7A	; 122
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	80 83       	st	Z, r24
    184c:	08 95       	ret
    }
    else
    {
        adc_state = LIBADC_IDLE;
    184e:	10 92 74 03 	sts	0x0374, r1
        ADCSRA &= ~(1 << ADEN);
    1852:	ea e7       	ldi	r30, 0x7A	; 122
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 77       	andi	r24, 0x7F	; 127
    185a:	80 83       	st	Z, r24
    185c:	08 95       	ret

0000185e <libADC_EnableInput>:
/// @param  mode Selects if to enable or disable input
/// @return None
///
void libADC_EnableInput(uint8_t index, bool mode)
{
    sc_assert(index < MAX_ADC_INPUTS);
    185e:	89 30       	cpi	r24, 0x09	; 9
    1860:	40 f0       	brcs	.+16     	; 0x1872 <libADC_EnableInput+0x14>
    1862:	42 ec       	ldi	r20, 0xC2	; 194
    1864:	52 e0       	ldi	r21, 0x02	; 2
    1866:	6f eb       	ldi	r22, 0xBF	; 191
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	84 ea       	ldi	r24, 0xA4	; 164
    186c:	92 e0       	ldi	r25, 0x02	; 2
    186e:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    adc_inputs[index].active = mode;
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	8e 0f       	add	r24, r30
    1880:	9f 1f       	adc	r25, r31
    1882:	fc 01       	movw	r30, r24
    1884:	e9 5b       	subi	r30, 0xB9	; 185
    1886:	fc 4f       	sbci	r31, 0xFC	; 252
    1888:	60 83       	st	Z, r22
    188a:	08 95       	ret

0000188c <libADC_GetSample>:
///
function_status libADC_GetSample(uint8_t index, uint16_t *sample_value)
{
    function_status status = ERROR;

    sc_assert(index < MAX_ADC_INPUTS);
    188c:	89 30       	cpi	r24, 0x09	; 9
    188e:	40 f0       	brcs	.+16     	; 0x18a0 <libADC_GetSample+0x14>
    1890:	4d e8       	ldi	r20, 0x8D	; 141
    1892:	52 e0       	ldi	r21, 0x02	; 2
    1894:	61 ed       	ldi	r22, 0xD1	; 209
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	8f e6       	ldi	r24, 0x6F	; 111
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    if (adc_inputs[index].active == true && adc_inputs[index].valid == true)
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	fc 01       	movw	r30, r24
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	e8 0f       	add	r30, r24
    18ae:	f9 1f       	adc	r31, r25
    18b0:	e9 5b       	subi	r30, 0xB9	; 185
    18b2:	fc 4f       	sbci	r31, 0xFC	; 252
    18b4:	20 81       	ld	r18, Z
    18b6:	22 23       	and	r18, r18
    18b8:	e9 f0       	breq	.+58     	; 0x18f4 <libADC_GetSample+0x68>
    18ba:	fc 01       	movw	r30, r24
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	e8 0f       	add	r30, r24
    18c6:	f9 1f       	adc	r31, r25
    18c8:	e9 5b       	subi	r30, 0xB9	; 185
    18ca:	fc 4f       	sbci	r31, 0xFC	; 252
    18cc:	21 81       	ldd	r18, Z+1	; 0x01
    18ce:	22 23       	and	r18, r18
    18d0:	99 f0       	breq	.+38     	; 0x18f8 <libADC_GetSample+0x6c>
    {
        *sample_value = adc_inputs[index].sample_value;
    18d2:	fc 01       	movw	r30, r24
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	ee 0f       	add	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	8e 0f       	add	r24, r30
    18de:	9f 1f       	adc	r25, r31
    18e0:	fc 01       	movw	r30, r24
    18e2:	e9 5b       	subi	r30, 0xB9	; 185
    18e4:	fc 4f       	sbci	r31, 0xFC	; 252
    18e6:	83 81       	ldd	r24, Z+3	; 0x03
    18e8:	94 81       	ldd	r25, Z+4	; 0x04
    18ea:	fb 01       	movw	r30, r22
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
        status = SUCCESS;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	08 95       	ret
/// @return ERROR  If index is invalid or input is disabled
/// @return SUCCESS If index is valid and input is active
///
function_status libADC_GetSample(uint8_t index, uint16_t *sample_value)
{
    function_status status = ERROR;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	08 95       	ret
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    {
        *sample_value = adc_inputs[index].sample_value;
        status = SUCCESS;
    }
    return status;
}
    18fa:	08 95       	ret

000018fc <libADC_IsChannelValid>:
/// @param  index Index of channel
/// @return bool true if valid, otherwise false
///
bool libADC_IsChannelValid(uint8_t index)
{
    sc_assert(index < MAX_ADC_INPUTS);
    18fc:	89 30       	cpi	r24, 0x09	; 9
    18fe:	40 f0       	brcs	.+16     	; 0x1910 <libADC_IsChannelValid+0x14>
    1900:	48 e5       	ldi	r20, 0x58	; 88
    1902:	52 e0       	ldi	r21, 0x02	; 2
    1904:	63 ee       	ldi	r22, 0xE3	; 227
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	8a e3       	ldi	r24, 0x3A	; 58
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    return (adc_inputs[index].valid == true);
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	fc 01       	movw	r30, r24
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	8e 0f       	add	r24, r30
    191e:	9f 1f       	adc	r25, r31
    1920:	fc 01       	movw	r30, r24
    1922:	e9 5b       	subi	r30, 0xB9	; 185
    1924:	fc 4f       	sbci	r31, 0xFC	; 252
}
    1926:	81 81       	ldd	r24, Z+1	; 0x01
    1928:	08 95       	ret

0000192a <libDebug_Print_P>:
/// @param  text Text to print
/// @param  variable number of arguments
/// @return None
///
void libDebug_Print_P(const char *text, ...)
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	c0 55       	subi	r28, 0x50	; 80
    1938:	d1 09       	sbc	r29, r1
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	fe 01       	movw	r30, r28
    1946:	e9 5a       	subi	r30, 0xA9	; 169
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	41 91       	ld	r20, Z+
    194c:	51 91       	ld	r21, Z+
    va_list args;
    char buffer[OUT_BUFFER_SIZE];

    va_start(args, text);

    vsnprintf_P(buffer, OUT_BUFFER_SIZE, text, args);
    194e:	9f 01       	movw	r18, r30
    1950:	60 e5       	ldi	r22, 0x50	; 80
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	8e 01       	movw	r16, r28
    1956:	0f 5f       	subi	r16, 0xFF	; 255
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	c8 01       	movw	r24, r16
    195c:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <vsnprintf_P>

    //Make sure that the output always is null terminated.
    buffer[OUT_BUFFER_SIZE - 1] = '\n';
    1960:	8a e0       	ldi	r24, 0x0A	; 10
    1962:	61 96       	adiw	r28, 0x11	; 17
    1964:	8f af       	std	Y+63, r24	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17

    libUART_SendArray((uint8_t *)buffer, strlen(buffer));
    1968:	f8 01       	movw	r30, r16
    196a:	01 90       	ld	r0, Z+
    196c:	00 20       	and	r0, r0
    196e:	e9 f7       	brne	.-6      	; 0x196a <libDebug_Print_P+0x40>
    1970:	31 97       	sbiw	r30, 0x01	; 1
    1972:	bf 01       	movw	r22, r30
    1974:	60 1b       	sub	r22, r16
    1976:	71 0b       	sbc	r23, r17
    1978:	c8 01       	movw	r24, r16
    197a:	0e 94 88 14 	call	0x2910	; 0x2910 <libUART_SendArray>
    va_end(args);
    return;
}
    197e:	c0 5b       	subi	r28, 0xB0	; 176
    1980:	df 4f       	sbci	r29, 0xFF	; 255
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <libDebug_Init>:
/// @return None
///
void libDebug_Init(void)
{
#ifdef DEBUG_ENABLE
    libUART_Init();
    1996:	0e 94 76 14 	call	0x28ec	; 0x28ec <libUART_Init>
#endif
    INFO("Init done");
    199a:	86 e2       	ldi	r24, 0x26	; 38
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	8e e3       	ldi	r24, 0x3E	; 62
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	08 95       	ret

000019b8 <libDebug_Sleep>:
/// @param  *event Pointer to triggered event
/// @return None
///
void libDebug_Sleep(const event_type *event __attribute__ ((unused)))
{
    sc_assert(event != NULL);
    19b8:	89 2b       	or	r24, r25
    19ba:	41 f4       	brne	.+16     	; 0x19cc <libDebug_Sleep+0x14>
    19bc:	40 e3       	ldi	r20, 0x30	; 48
    19be:	53 e0       	ldi	r21, 0x03	; 3
    19c0:	6e e6       	ldi	r22, 0x6E	; 110
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	80 e1       	ldi	r24, 0x10	; 16
    19c6:	93 e0       	ldi	r25, 0x03	; 3
    19c8:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    libUART_WaitForEmptyBuffer();
    19cc:	0e 94 82 14 	call	0x2904	; 0x2904 <libUART_WaitForEmptyBuffer>
    19d0:	08 95       	ret

000019d2 <PostCallback>:
    return;
}

static void PostCallback(void)
{
    ReleaseCS(); //Release device
    19d2:	2a 9a       	sbi	0x05, 2	; 5
    19d4:	08 95       	ret

000019d6 <PreCallback>:
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void PreCallback(void)
{
    libSPI_SetMode(SPIMODE);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	0e 94 c3 13 	call	0x2786	; 0x2786 <libSPI_SetMode>

    PullCS(); //Select device
    19dc:	2a 98       	cbi	0x05, 2	; 5
    19de:	08 95       	ret

000019e0 <libRFM69_InitHW>:
/// @param  None
/// @return None
///
void libRFM69_InitHW(void)
{
    InitReset();
    19e0:	38 98       	cbi	0x07, 0	; 7
    19e2:	40 98       	cbi	0x08, 0	; 8

    InitCS();
    19e4:	22 9a       	sbi	0x04, 2	; 4
    PullCS(); //Pull SS high to release device
    19e6:	2a 98       	cbi	0x05, 2	; 5

    InitIO();
    19e8:	3a 98       	cbi	0x07, 2	; 7
    19ea:	08 95       	ret

000019ec <libRFM69_Reset>:
/// @param  None
/// @return None
///
void libRFM69_Reset(void)
{
    PullReset();
    19ec:	40 9a       	sbi	0x08, 0	; 8
    19ee:	38 9a       	sbi	0x07, 0	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19f0:	8b ed       	ldi	r24, 0xDB	; 219
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <libRFM69_Reset+0x8>
    19f8:	00 c0       	rjmp	.+0      	; 0x19fa <libRFM69_Reset+0xe>
    19fa:	00 00       	nop
    _delay_us(RESET_TIMING_US);
    ReleaseReset();
    19fc:	38 98       	cbi	0x07, 0	; 7
    19fe:	40 98       	cbi	0x08, 0	; 8

    reset_time_ms = Timer_GetMilliseconds();
    1a00:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    1a04:	60 93 75 03 	sts	0x0375, r22
    1a08:	70 93 76 03 	sts	0x0376, r23
    1a0c:	80 93 77 03 	sts	0x0377, r24
    1a10:	90 93 78 03 	sts	0x0378, r25
    1a14:	08 95       	ret

00001a16 <libRFM69_Init>:
/// @param  None
/// @return None
///
void libRFM69_Init(void)
{
    libRFM69_InitHW();
    1a16:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <libRFM69_InitHW>
    libRFM69_Reset();
    1a1a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <libRFM69_Reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a1e:	8f e2       	ldi	r24, 0x2F	; 47
    1a20:	95 e7       	ldi	r25, 0x75	; 117
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <libRFM69_Init+0xc>
    1a26:	00 c0       	rjmp	.+0      	; 0x1a28 <libRFM69_Init+0x12>
    1a28:	00 00       	nop
    1a2a:	08 95       	ret

00001a2c <libRFM69_WriteRegister>:
    libRFM69_WriteRegister(REG_TESTDAGC, register_content);
    return;
}

void libRFM69_WriteRegister(uint8_t address, uint8_t register_data)
{
    1a2c:	cf 93       	push	r28
    1a2e:	c6 2f       	mov	r28, r22
    sc_assert(address <= REG_TESTAFC);
    1a30:	82 37       	cpi	r24, 0x72	; 114
    1a32:	40 f0       	brcs	.+16     	; 0x1a44 <libRFM69_WriteRegister+0x18>
    1a34:	4d ea       	ldi	r20, 0xAD	; 173
    1a36:	53 e0       	ldi	r21, 0x03	; 3
    1a38:	66 e2       	ldi	r22, 0x26	; 38
    1a3a:	75 e0       	ldi	r23, 0x05	; 5
    1a3c:	8d e8       	ldi	r24, 0x8D	; 141
    1a3e:	93 e0       	ldi	r25, 0x03	; 3
    1a40:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    libSPI_WriteByte(address | WRITE_REG, &PreCallback, NULL);
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	6b ee       	ldi	r22, 0xEB	; 235
    1a4a:	7c e0       	ldi	r23, 0x0C	; 12
    1a4c:	80 68       	ori	r24, 0x80	; 128
    1a4e:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_WriteByte(register_data, NULL, &PostCallback);
    1a52:	49 ee       	ldi	r20, 0xE9	; 233
    1a54:	5c e0       	ldi	r21, 0x0C	; 12
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>

    return;
}
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <libRFM69_ClearFIFO>:
    return index;
}

void libRFM69_ClearFIFO(void)
{
    INFO("Clear FIFO");
    1a64:	84 e9       	ldi	r24, 0x94	; 148
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	88 e9       	ldi	r24, 0x98	; 152
    1a6e:	97 e0       	ldi	r25, 0x07	; 7
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    libRFM69_WriteRegister(REG_IRQFLAGS2, (1 << REG_IRQFLAGS2_BIT_FIFOOVERRUN));
    1a78:	60 e1       	ldi	r22, 0x10	; 16
    1a7a:	88 e2       	ldi	r24, 0x28	; 40
    1a7c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	08 95       	ret

00001a8a <libRFM69_SetRSSIThreshold>:
/// @return uint8_t RSSI threshold
/// @return None
///
void libRFM69_SetRSSIThreshold(int8_t threshold)
{
    libRFM69_WriteRegister(REG_RSSITHRESH, (uint8_t)(threshold * -1) << 1);
    1a8a:	81 95       	neg	r24
    1a8c:	68 2f       	mov	r22, r24
    1a8e:	66 0f       	add	r22, r22
    1a90:	89 e2       	ldi	r24, 0x29	; 41
    1a92:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1a96:	08 95       	ret

00001a98 <libRFM69_SetCarrierFrequency>:
    return ((int8_t)(register_content >> 1) * -1);
}


void libRFM69_SetCarrierFrequency(uint32_t frequency)
{
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	c6 2f       	mov	r28, r22
    1aaa:	d7 2f       	mov	r29, r23
    1aac:	18 2f       	mov	r17, r24
    1aae:	09 2f       	mov	r16, r25
    uint32_t frequency_value = frequency / RFM_FSTEP;
    1ab0:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatunsisf>
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	34 e2       	ldi	r19, 0x24	; 36
    1ab8:	44 e7       	ldi	r20, 0x74	; 116
    1aba:	52 e4       	ldi	r21, 0x42	; 66
    1abc:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    1ac0:	0e 94 46 24 	call	0x488c	; 0x488c <__fixunssfsi>
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	7c 01       	movw	r14, r24

    DEBUG("Freq: %lu\r\n", frequency);
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	84 e7       	ldi	r24, 0x74	; 116
    1ad2:	97 e0       	ldi	r25, 0x07	; 7
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Freq value: 0x%03lX\r\n", frequency_value);
    1adc:	ff 92       	push	r15
    1ade:	ef 92       	push	r14
    1ae0:	df 92       	push	r13
    1ae2:	cf 92       	push	r12
    1ae4:	8e e5       	ldi	r24, 0x5E	; 94
    1ae6:	97 e0       	ldi	r25, 0x07	; 7
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    libRFM69_WriteRegister(REG_FRFMSB, (frequency_value >> 16) & 0xFF);
    1af0:	b7 01       	movw	r22, r14
    1af2:	88 27       	eor	r24, r24
    1af4:	99 27       	eor	r25, r25
    1af6:	87 e0       	ldi	r24, 0x07	; 7
    1af8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FRFMID, (frequency_value >> 8) & 0xFF);
    1afc:	99 27       	eor	r25, r25
    1afe:	8f 2d       	mov	r24, r15
    1b00:	7e 2d       	mov	r23, r14
    1b02:	6d 2d       	mov	r22, r13
    1b04:	88 e0       	ldi	r24, 0x08	; 8
    1b06:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FRFLSB, frequency_value & 0xFF);
    1b0a:	6c 2d       	mov	r22, r12
    1b0c:	89 e0       	ldi	r24, 0x09	; 9
    1b0e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	0c 96       	adiw	r24, 0x0c	; 12
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61

    return;
}
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	08 95       	ret

00001b34 <libRFM69_SetBitRate>:

    return;
}

void libRFM69_SetBitRate(uint32_t bit_rate)
{
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	9b 01       	movw	r18, r22
    1b3e:	ac 01       	movw	r20, r24
    uint16_t bit_rate_value = (uint16_t)(RFM_FXOSC / bit_rate);
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	78 e4       	ldi	r23, 0x48	; 72
    1b44:	88 ee       	ldi	r24, 0xE8	; 232
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__udivmodsi4>
    1b4c:	69 01       	movw	r12, r18
    1b4e:	7a 01       	movw	r14, r20

    libRFM69_WriteRegister(REG_BITRATEMSB, (uint8_t)(bit_rate_value >> 8));
    1b50:	63 2f       	mov	r22, r19
    1b52:	77 27       	eor	r23, r23
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_BITRATELSB, (uint8_t)(bit_rate_value));
    1b5a:	6c 2d       	mov	r22, r12
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	08 95       	ret

00001b6c <libRFM69_SetNodeAddress>:
/// @param  node_address Address
/// @return None
///
void libRFM69_SetNodeAddress(uint8_t node_address)
{
    libRFM69_WriteRegister(REG_NODEADRS, node_address);
    1b6c:	68 2f       	mov	r22, r24
    1b6e:	89 e3       	ldi	r24, 0x39	; 57
    1b70:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1b74:	08 95       	ret

00001b76 <libRFM69_SetBroadcastAddress>:
/// @param  broadcast_address Address
/// @return None
///
void libRFM69_SetBroadcastAddress(uint8_t broadcast_address)
{
    libRFM69_WriteRegister(REG_BROADCASTADRS, broadcast_address);
    1b76:	68 2f       	mov	r22, r24
    1b78:	8a e3       	ldi	r24, 0x3A	; 58
    1b7a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1b7e:	08 95       	ret

00001b80 <libRFM69_SetFrequencyDeviation>:
///
/// @param  frequency_deviation The frequency deviation in hertz.
/// @return None
///
void libRFM69_SetFrequencyDeviation(uint16_t frequency_deviation)
{
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	ec 01       	movw	r28, r24
    //Minimum frequency according to the RFM69HW datasheet.
    sc_assert(frequency_deviation > 600);
    1b8a:	c9 35       	cpi	r28, 0x59	; 89
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	d8 07       	cpc	r29, r24
    1b90:	40 f4       	brcc	.+16     	; 0x1ba2 <libRFM69_SetFrequencyDeviation+0x22>
    1b92:	46 e6       	ldi	r20, 0x66	; 102
    1b94:	56 e0       	ldi	r21, 0x06	; 6
    1b96:	65 ed       	ldi	r22, 0xD5	; 213
    1b98:	72 e0       	ldi	r23, 0x02	; 2
    1b9a:	86 e4       	ldi	r24, 0x46	; 70
    1b9c:	96 e0       	ldi	r25, 0x06	; 6
    1b9e:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint16_t frequency_deviation_value = (uint16_t)((float)frequency_deviation /
    1ba2:	be 01       	movw	r22, r28
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatunsisf>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	34 e2       	ldi	r19, 0x24	; 36
    1bb0:	44 e7       	ldi	r20, 0x74	; 116
    1bb2:	52 e4       	ldi	r21, 0x42	; 66
    1bb4:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    1bb8:	0e 94 46 24 	call	0x488c	; 0x488c <__fixunssfsi>
    1bbc:	16 2f       	mov	r17, r22
    1bbe:	07 2f       	mov	r16, r23
                                         RFM_FSTEP);

    DEBUG("Freq deviation: %u\r\n", frequency_deviation);
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	81 e3       	ldi	r24, 0x31	; 49
    1bc6:	96 e0       	ldi	r25, 0x06	; 6
    1bc8:	9f 93       	push	r25
    1bca:	8f 93       	push	r24
    1bcc:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Freq deviation value: 0x%04X\r\n", frequency_deviation_value);
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	82 e1       	ldi	r24, 0x12	; 18
    1bd6:	96 e0       	ldi	r25, 0x06	; 6
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
    1bdc:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    libRFM69_WriteRegister(REG_FDEVMSB, ((frequency_deviation_value >> 8) & 0xFF));
    1be0:	60 2f       	mov	r22, r16
    1be2:	85 e0       	ldi	r24, 0x05	; 5
    1be4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FDEVLSB, (frequency_deviation_value & 0xFF));
    1be8:	61 2f       	mov	r22, r17
    1bea:	86 e0       	ldi	r24, 0x06	; 6
    1bec:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    1bf0:	8d b7       	in	r24, 0x3d	; 61
    1bf2:	9e b7       	in	r25, 0x3e	; 62
    1bf4:	08 96       	adiw	r24, 0x08	; 8
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	9e bf       	out	0x3e, r25	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	8d bf       	out	0x3d, r24	; 61

    return;
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	08 95       	ret

00001c0a <libRFM69_SetPreambleLength>:
///
/// @param length Number of preamble bytes.
/// @return None
///
void libRFM69_SetPreambleLength(uint16_t length)
{
    1c0a:	cf 93       	push	r28
    1c0c:	c8 2f       	mov	r28, r24
    libRFM69_WriteRegister(REG_PREAMBLEMSB, (length >> 8));
    1c0e:	69 2f       	mov	r22, r25
    1c10:	8c e2       	ldi	r24, 0x2C	; 44
    1c12:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_PREAMBLELSB, (length & 0x00FF));
    1c16:	6c 2f       	mov	r22, r28
    1c18:	8d e2       	ldi	r24, 0x2D	; 45
    1c1a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <libRFM69_ReadRegister>:

    return;
}

void libRFM69_ReadRegister(uint8_t address, uint8_t *register_data)
{
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	eb 01       	movw	r28, r22
    sc_assert(address <= REG_TESTAFC);
    1c28:	82 37       	cpi	r24, 0x72	; 114
    1c2a:	40 f0       	brcs	.+16     	; 0x1c3c <libRFM69_ReadRegister+0x1a>
    1c2c:	46 e7       	ldi	r20, 0x76	; 118
    1c2e:	53 e0       	ldi	r21, 0x03	; 3
    1c30:	60 e3       	ldi	r22, 0x30	; 48
    1c32:	75 e0       	ldi	r23, 0x05	; 5
    1c34:	86 e5       	ldi	r24, 0x56	; 86
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    libSPI_WriteByte(address & READ_REG, &PreCallback, NULL);
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	6b ee       	ldi	r22, 0xEB	; 235
    1c42:	7c e0       	ldi	r23, 0x0C	; 12
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_ReadByte(register_data, NULL, &PostCallback);
    1c4a:	49 ee       	ldi	r20, 0xE9	; 233
    1c4c:	5c e0       	ldi	r21, 0x0C	; 12
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	ce 01       	movw	r24, r28
    1c54:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <libSPI_ReadByte>

    return;
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <libRFM69_IsFIFOFull>:
    return (Timer_TimeDifference(reset_time_ms) > POR_TIME_MS);
}

//TODO: Use remove these functions and use macros!
bool libRFM69_IsFIFOFull(void)
{
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	1f 92       	push	r1
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    1c68:	be 01       	movw	r22, r28
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	88 e2       	ldi	r24, 0x28	; 40
    1c70:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    1c74:	99 81       	ldd	r25, Y+1	; 0x01
    1c76:	89 2f       	mov	r24, r25
    1c78:	88 1f       	adc	r24, r24
    1c7a:	88 27       	eor	r24, r24
    1c7c:	88 1f       	adc	r24, r24

//TODO: Use remove these functions and use macros!
bool libRFM69_IsFIFOFull(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOFULL);
}
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <libRFM69_WriteToFIFO>:
/// @param  data Pointer to buffer with data to write.
/// @param  length Number of bytes to write.
/// @return uint8_t Number of bytes written.
///
uint8_t libRFM69_WriteToFIFO(const uint8_t *data, uint8_t length)
{
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	06 2f       	mov	r16, r22
    sc_assert(length <= RFM_FIFO_SIZE);
    1c90:	63 34       	cpi	r22, 0x43	; 67
    1c92:	20 f4       	brcc	.+8      	; 0x1c9c <libRFM69_WriteToFIFO+0x16>

    uint8_t index;

    for (index = 0; index < length; ++index)
    1c94:	61 11       	cpse	r22, r1
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <libRFM69_WriteToFIFO+0x26>
    1c98:	10 e0       	ldi	r17, 0x00	; 0
    1c9a:	25 c0       	rjmp	.+74     	; 0x1ce6 <libRFM69_WriteToFIFO+0x60>
/// @param  length Number of bytes to write.
/// @return uint8_t Number of bytes written.
///
uint8_t libRFM69_WriteToFIFO(const uint8_t *data, uint8_t length)
{
    sc_assert(length <= RFM_FIFO_SIZE);
    1c9c:	4d ee       	ldi	r20, 0xED	; 237
    1c9e:	57 e0       	ldi	r21, 0x07	; 7
    1ca0:	62 e0       	ldi	r22, 0x02	; 2
    1ca2:	71 e0       	ldi	r23, 0x01	; 1
    1ca4:	8d ec       	ldi	r24, 0xCD	; 205
    1ca6:	97 e0       	ldi	r25, 0x07	; 7
    1ca8:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    1cac:	c8 2f       	mov	r28, r24
    1cae:	d9 2f       	mov	r29, r25

    uint8_t index;

    for (index = 0; index < length; ++index)
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
    {
        if (libRFM69_IsFIFOFull())
    1cb2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <libRFM69_IsFIFOFull>
    1cb6:	88 23       	and	r24, r24
    1cb8:	79 f0       	breq	.+30     	; 0x1cd8 <libRFM69_WriteToFIFO+0x52>
        {
            ERROR("FIFO is full");
    1cba:	27 ea       	ldi	r18, 0xA7	; 167
    1cbc:	31 e0       	ldi	r19, 0x01	; 1
    1cbe:	3f 93       	push	r19
    1cc0:	2f 93       	push	r18
    1cc2:	21 eb       	ldi	r18, 0xB1	; 177
    1cc4:	37 e0       	ldi	r19, 0x07	; 7
    1cc6:	3f 93       	push	r19
    1cc8:	2f 93       	push	r18
    1cca:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            break;
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <libRFM69_WriteToFIFO+0x60>
        }

        libRFM69_WriteRegister(REG_FIFO, data[index]);
    1cd8:	69 91       	ld	r22, Y+
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
{
    sc_assert(length <= RFM_FIFO_SIZE);

    uint8_t index;

    for (index = 0; index < length; ++index)
    1ce0:	1f 5f       	subi	r17, 0xFF	; 255
    1ce2:	10 13       	cpse	r17, r16
    1ce4:	e6 cf       	rjmp	.-52     	; 0x1cb2 <libRFM69_WriteToFIFO+0x2c>

        libRFM69_WriteRegister(REG_FIFO, data[index]);
    }

    return index;
}
    1ce6:	81 2f       	mov	r24, r17
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <libRFM69_EnableCRCAutoClear>:
///                                No PayloadReady interrupt issued.
///                 Disabled(False): Do not clear FIFO. PayloadReady interrupt issued.
/// @return None
///
void libRFM69_EnableCRCAutoClear(bool enable)
{
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	1f 92       	push	r1
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1d00:	be 01       	movw	r22, r28
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	87 e3       	ldi	r24, 0x37	; 55
    1d08:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0xF7) | ((uint8_t)!enable << 3);
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	61 27       	eor	r22, r17
    1d10:	66 0f       	add	r22, r22
    1d12:	66 0f       	add	r22, r22
    1d14:	66 0f       	add	r22, r22
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	87 7f       	andi	r24, 0xF7	; 247
    1d1a:	68 2b       	or	r22, r24
    1d1c:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1d1e:	87 e3       	ldi	r24, 0x37	; 55
    1d20:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1d24:	0f 90       	pop	r0
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	08 95       	ret

00001d2e <libRFM69_EnableCRC>:
///
/// @param  enabled Enabled/disable
/// @return None
///
void libRFM69_EnableCRC(bool enable)
{
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	1f 92       	push	r1
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1d3c:	be 01       	movw	r22, r28
    1d3e:	6f 5f       	subi	r22, 0xFF	; 255
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	87 e3       	ldi	r24, 0x37	; 55
    1d44:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0xEF) | ((uint8_t)enable << 4);
    1d48:	20 e1       	ldi	r18, 0x10	; 16
    1d4a:	12 9f       	mul	r17, r18
    1d4c:	c0 01       	movw	r24, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	69 81       	ldd	r22, Y+1	; 0x01
    1d52:	6f 7e       	andi	r22, 0xEF	; 239
    1d54:	68 2b       	or	r22, r24
    1d56:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1d58:	87 e3       	ldi	r24, 0x37	; 55
    1d5a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1d5e:	0f 90       	pop	r0
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	08 95       	ret

00001d68 <libRFM69_GetMode>:
///
/// @param  None
/// @return libRFM69_mode_type Operating mode (0-4)
///
libRFM69_mode_type libRFM69_GetMode(void)
{
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	1f 92       	push	r1
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return (libRFM69_mode_type)((register_content & REG_OPMODE_MODE_MASK) >> 2);
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	8c 71       	andi	r24, 0x1C	; 28
}
    1d82:	86 95       	lsr	r24
    1d84:	86 95       	lsr	r24
    1d86:	0f 90       	pop	r0
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <libRFM69_SetMode>:

void libRFM69_SetMode(libRFM69_mode_type mode)
{
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	1f 92       	push	r1
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1d9c:	be 01       	movw	r22, r28
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_OPMODE_MODE_MASK) | (mode << 2);
    1da8:	11 0f       	add	r17, r17
    1daa:	11 0f       	add	r17, r17
    1dac:	69 81       	ldd	r22, Y+1	; 0x01
    1dae:	63 7e       	andi	r22, 0xE3	; 227
    1db0:	61 2b       	or	r22, r17
    1db2:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    1dba:	0f 90       	pop	r0
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	08 95       	ret

00001dc4 <libRFM69_IsModeReady>:
    }
    return status;
}

bool libRFM69_IsModeReady(void)
{
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	1f 92       	push	r1
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_IRQFLAGS1, &register_content);
    1dce:	be 01       	movw	r22, r28
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	87 e2       	ldi	r24, 0x27	; 39
    1dd6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return (register_content & RF_IRQFLAGS1_MODEREADY) == RF_IRQFLAGS1_MODEREADY;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ddc:	88 1f       	adc	r24, r24
    1dde:	88 27       	eor	r24, r24
    1de0:	88 1f       	adc	r24, r24
    1de2:	0f 90       	pop	r0
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <libRFM69_WaitForModeReady>:

    return;
}

bool libRFM69_WaitForModeReady(void)
{
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    bool status = true;
    uint32_t timeout_timer = Timer_GetMilliseconds();
    1df2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    1df6:	6b 01       	movw	r12, r22
    1df8:	7c 01       	movw	r14, r24

    while (!libRFM69_IsModeReady())
    1dfa:	19 c0       	rjmp	.+50     	; 0x1e2e <libRFM69_WaitForModeReady+0x44>
    {
        if (Timer_TimeDifference(timeout_timer) > WAIT_TIMEOUT_MS)
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	b6 01       	movw	r22, r12
    1e00:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
    1e04:	6b 30       	cpi	r22, 0x0B	; 11
    1e06:	71 05       	cpc	r23, r1
    1e08:	81 05       	cpc	r24, r1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	80 f0       	brcs	.+32     	; 0x1e2e <libRFM69_WaitForModeReady+0x44>
        {
            ERROR("Timeout!");
    1e0e:	8a e7       	ldi	r24, 0x7A	; 122
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	9f 93       	push	r25
    1e14:	8f 93       	push	r24
    1e16:	80 e8       	ldi	r24, 0x80	; 128
    1e18:	97 e0       	ldi	r25, 0x07	; 7
    1e1a:	9f 93       	push	r25
    1e1c:	8f 93       	push	r24
    1e1e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            status = false;
            break;
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    while (!libRFM69_IsModeReady())
    {
        if (Timer_TimeDifference(timeout_timer) > WAIT_TIMEOUT_MS)
        {
            ERROR("Timeout!");
            status = false;
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <libRFM69_WaitForModeReady+0x4e>
bool libRFM69_WaitForModeReady(void)
{
    bool status = true;
    uint32_t timeout_timer = Timer_GetMilliseconds();

    while (!libRFM69_IsModeReady())
    1e2e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <libRFM69_IsModeReady>
    1e32:	88 23       	and	r24, r24
    1e34:	19 f3       	breq	.-58     	; 0x1dfc <libRFM69_WaitForModeReady+0x12>
    return;
}

bool libRFM69_WaitForModeReady(void)
{
    bool status = true;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
            status = false;
            break;
        }
    }
    return status;
}
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	df 90       	pop	r13
    1e3e:	cf 90       	pop	r12
    1e40:	08 95       	ret

00001e42 <libRFM69_EnableListenMode>:

    return;
}

void libRFM69_EnableListenMode(bool enable)
{
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	1f 92       	push	r1
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1e50:	be 01       	movw	r22, r28
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0xBF) | (uint8_t)enable;
    1e5c:	69 81       	ldd	r22, Y+1	; 0x01
    1e5e:	6f 7b       	andi	r22, 0xBF	; 191
    1e60:	61 2b       	or	r22, r17
    1e62:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    1e6a:	0f 90       	pop	r0
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	08 95       	ret

00001e74 <libRFM69_EnableSequencer>:

void libRFM69_EnableSequencer(bool enable)
{
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	1f 92       	push	r1
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1e82:	be 01       	movw	r22, r28
    1e84:	6f 5f       	subi	r22, 0xFF	; 255
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0x7F) | ((uint8_t)!enable << 7);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	18 27       	eor	r17, r24
    1e92:	69 81       	ldd	r22, Y+1	; 0x01
    1e94:	10 fb       	bst	r17, 0
    1e96:	67 f9       	bld	r22, 7
    1e98:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    1e9a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    1e9e:	0f 90       	pop	r0
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	08 95       	ret

00001ea8 <libRFM69_EnableEncryption>:

void libRFM69_EnableEncryption(bool enable)
{
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	1f 92       	push	r1
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    1eb6:	be 01       	movw	r22, r28
    1eb8:	6f 5f       	subi	r22, 0xFF	; 255
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	8d e3       	ldi	r24, 0x3D	; 61
    1ebe:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(PACKETCONFIG2_BIT_AESON, enable, &register_content);
    1ec2:	ae 01       	movw	r20, r28
    1ec4:	4f 5f       	subi	r20, 0xFF	; 255
    1ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec8:	61 2f       	mov	r22, r17
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    1ed0:	69 81       	ldd	r22, Y+1	; 0x01
    1ed2:	8d e3       	ldi	r24, 0x3D	; 61
    1ed4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	08 95       	ret

00001ee2 <libRFM69_SetPacketFormat>:

void libRFM69_SetPacketFormat(libRFM69_packet_format_type packet_format)
{
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1ef0:	be 01       	movw	r22, r28
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	87 e3       	ldi	r24, 0x37	; 55
    1ef8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(PACKETCONFIG1_BIT_PCKFORMAT, (bool)packet_format,
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	11 11       	cpse	r17, r1
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <libRFM69_SetPacketFormat+0x22>
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	ae 01       	movw	r20, r28
    1f06:	4f 5f       	subi	r20, 0xFF	; 255
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	87 e0       	ldi	r24, 0x07	; 7
    1f0c:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
           &register_content);

    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1f10:	69 81       	ldd	r22, Y+1	; 0x01
    1f12:	87 e3       	ldi	r24, 0x37	; 55
    1f14:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	08 95       	ret

00001f22 <libRFM69_SetTXStartCondition>:

void libRFM69_SetTXStartCondition(libRFM69_tx_start_condition_type
                                  start_condition)
{
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	1f 92       	push	r1
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_FIFOTHRESH, &register_content);
    1f30:	be 01       	movw	r22, r28
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8c e3       	ldi	r24, 0x3C	; 60
    1f38:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(0x07, (bool)start_condition, &register_content);
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	11 11       	cpse	r17, r1
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <libRFM69_SetTXStartCondition+0x22>
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	ae 01       	movw	r20, r28
    1f46:	4f 5f       	subi	r20, 0xFF	; 255
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	87 e0       	ldi	r24, 0x07	; 7
    1f4c:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>

    libRFM69_WriteRegister(REG_FIFOTHRESH, register_content);
    1f50:	69 81       	ldd	r22, Y+1	; 0x01
    1f52:	8c e3       	ldi	r24, 0x3C	; 60
    1f54:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1f58:	0f 90       	pop	r0
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	08 95       	ret

00001f62 <libRFM69_RestartRx>:
///
/// @param  None
/// @return None
///
void libRFM69_RestartRx(void)
{
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	1f 92       	push	r1
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    1f6c:	be 01       	movw	r22, r28
    1f6e:	6f 5f       	subi	r22, 0xFF	; 255
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	8d e3       	ldi	r24, 0x3D	; 61
    1f74:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content | (1 << 2));
    1f78:	69 81       	ldd	r22, Y+1	; 0x01
    1f7a:	64 60       	ori	r22, 0x04	; 4
    1f7c:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    1f7e:	8d e3       	ldi	r24, 0x3D	; 61
    1f80:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1f84:	0f 90       	pop	r0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <libRFM69_SetPacketRxDelay>:
///
/// @param  val Inter packet Rx delay
/// @return None
///
void libRFM69_SetPacketRxDelay(uint8_t val)
{
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	1f 92       	push	r1
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    1f9a:	be 01       	movw	r22, r28
    1f9c:	6f 5f       	subi	r22, 0xFF	; 255
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8d e3       	ldi	r24, 0x3D	; 61
    1fa2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0x0F) | (val << 4);
    1fa6:	20 e1       	ldi	r18, 0x10	; 16
    1fa8:	12 9f       	mul	r17, r18
    1faa:	c0 01       	movw	r24, r0
    1fac:	11 24       	eor	r1, r1
    1fae:	69 81       	ldd	r22, Y+1	; 0x01
    1fb0:	6f 70       	andi	r22, 0x0F	; 15
    1fb2:	68 2b       	or	r22, r24
    1fb4:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    1fb6:	8d e3       	ldi	r24, 0x3D	; 61
    1fb8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    1fbc:	0f 90       	pop	r0
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	08 95       	ret

00001fc6 <libRFM69_SetAddressFiltering>:
///         RFM_ADDRESS_FILTER_ADDRESS_BROADCAST: Address must match node address or broadcast address

/// @return None
///
void libRFM69_SetAddressFiltering(libRFM69_address_filtering_type filtering)
{
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	1f 92       	push	r1
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	18 2f       	mov	r17, r24
    sc_assert(filtering < 3);
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	40 f0       	brcs	.+16     	; 0x1fe8 <libRFM69_SetAddressFiltering+0x22>
    1fd8:	40 e5       	ldi	r20, 0x50	; 80
    1fda:	57 e0       	ldi	r21, 0x07	; 7
    1fdc:	69 e5       	ldi	r22, 0x59	; 89
    1fde:	72 e0       	ldi	r23, 0x02	; 2
    1fe0:	80 e3       	ldi	r24, 0x30	; 48
    1fe2:	97 e0       	ldi	r25, 0x07	; 7
    1fe4:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1fe8:	be 01       	movw	r22, r28
    1fea:	6f 5f       	subi	r22, 0xFF	; 255
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	87 e3       	ldi	r24, 0x37	; 55
    1ff0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & 0xF9) |
                       (filtering << 1);
    1ff4:	11 0f       	add	r17, r17
    sc_assert(filtering < 3);

    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    register_content = (register_content & 0xF9) |
    1ff6:	69 81       	ldd	r22, Y+1	; 0x01
    1ff8:	69 7f       	andi	r22, 0xF9	; 249
    1ffa:	61 2b       	or	r22, r17
    1ffc:	69 83       	std	Y+1, r22	; 0x01
                       (filtering << 1);

    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1ffe:	87 e3       	ldi	r24, 0x37	; 55
    2000:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    2004:	0f 90       	pop	r0
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	08 95       	ret

0000200e <libRFM69_SetDataMode>:
///
/// @param  data_mode Data mode to set.
/// @return None
///
void libRFM69_SetDataMode(libRFM69_data_mode_type data_mode)
{
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	1f 92       	push	r1
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    201c:	be 01       	movw	r22, r28
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_DATA_MODE_MASK) |
                       (data_mode << 5);
    2028:	20 e2       	ldi	r18, 0x20	; 32
    202a:	12 9f       	mul	r17, r18
    202c:	c0 01       	movw	r24, r0
    202e:	11 24       	eor	r1, r1
void libRFM69_SetDataMode(libRFM69_data_mode_type data_mode)
{
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    register_content = (register_content & ~REG_DATA_MODUL_DATA_MODE_MASK) |
    2030:	69 81       	ldd	r22, Y+1	; 0x01
    2032:	6f 79       	andi	r22, 0x9F	; 159
    2034:	68 2b       	or	r22, r24
    2036:	69 83       	std	Y+1, r22	; 0x01
                       (data_mode << 5);

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    203e:	0f 90       	pop	r0
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	08 95       	ret

00002048 <libRFM69_SetModulationType>:
///
/// @param  modulation_type FSK or OOK.
/// @return None
///
void libRFM69_SetModulationType(libRFM69_modulation_type_type modulation_type)
{
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	1f 92       	push	r1
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	18 2f       	mov	r17, r24
    sc_assert(modulation_type == RFM_FSK || modulation_type == RFM_OOK);
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	40 f0       	brcs	.+16     	; 0x206a <libRFM69_SetModulationType+0x22>
    205a:	47 ef       	ldi	r20, 0xF7	; 247
    205c:	56 e0       	ldi	r21, 0x06	; 6
    205e:	60 ea       	ldi	r22, 0xA0	; 160
    2060:	72 e0       	ldi	r23, 0x02	; 2
    2062:	87 ed       	ldi	r24, 0xD7	; 215
    2064:	96 e0       	ldi	r25, 0x06	; 6
    2066:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    206a:	be 01       	movw	r22, r28
    206c:	6f 5f       	subi	r22, 0xFF	; 255
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_TYPE_MASK) |
                       (modulation_type << 3);
    2076:	11 0f       	add	r17, r17
    2078:	11 0f       	add	r17, r17
    207a:	11 0f       	add	r17, r17
{
    sc_assert(modulation_type == RFM_FSK || modulation_type == RFM_OOK);
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_TYPE_MASK) |
    207c:	69 81       	ldd	r22, Y+1	; 0x01
    207e:	67 7e       	andi	r22, 0xE7	; 231
    2080:	61 2b       	or	r22, r17
    2082:	69 83       	std	Y+1, r22	; 0x01
                       (modulation_type << 3);

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    208a:	0f 90       	pop	r0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	08 95       	ret

00002094 <libRFM69_SetModulationShaping>:
///
/// @param  modulation_shaping The modulation shaping value.
/// @return None
///
void libRFM69_SetModulationShaping(uint8_t modulation_shaping)
{
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	1f 92       	push	r1
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	18 2f       	mov	r17, r24
    sc_assert(modulation_shaping < 0x04);
    20a2:	84 30       	cpi	r24, 0x04	; 4
    20a4:	40 f0       	brcs	.+16     	; 0x20b6 <libRFM69_SetModulationShaping+0x22>
    20a6:	4d eb       	ldi	r20, 0xBD	; 189
    20a8:	56 e0       	ldi	r21, 0x06	; 6
    20aa:	6f eb       	ldi	r22, 0xBF	; 191
    20ac:	72 e0       	ldi	r23, 0x02	; 2
    20ae:	8d e9       	ldi	r24, 0x9D	; 157
    20b0:	96 e0       	ldi	r25, 0x06	; 6
    20b2:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint8_t register_content;

    DEBUG("Modulation shaping: 0x%02X\r\n", modulation_shaping);
    20b6:	1f 92       	push	r1
    20b8:	8f 93       	push	r24
    20ba:	20 e8       	ldi	r18, 0x80	; 128
    20bc:	36 e0       	ldi	r19, 0x06	; 6
    20be:	3f 93       	push	r19
    20c0:	2f 93       	push	r18
    20c2:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    20c6:	be 01       	movw	r22, r28
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_SHAPING_MASK)
    20d2:	69 81       	ldd	r22, Y+1	; 0x01
    20d4:	6c 7f       	andi	r22, 0xFC	; 252
    20d6:	61 2b       	or	r22, r17
    20d8:	69 83       	std	Y+1, r22	; 0x01
                       | modulation_shaping;

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	08 95       	ret

000020f2 <libRFM69_SetPowerAmplifierMode>:
///
/// @param  mode The power amplifier mode, value between 2 and 4.
/// @return None
///
void libRFM69_SetPowerAmplifierMode(uint8_t mode)
{
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	1f 92       	push	r1
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    sc_assert(mode > 0x01 && mode < 0x05);
    2100:	9e ef       	ldi	r25, 0xFE	; 254
    2102:	98 0f       	add	r25, r24
    2104:	93 30       	cpi	r25, 0x03	; 3
    2106:	40 f0       	brcs	.+16     	; 0x2118 <libRFM69_SetPowerAmplifierMode+0x26>
    2108:	47 ef       	ldi	r20, 0xF7	; 247
    210a:	55 e0       	ldi	r21, 0x05	; 5
    210c:	6b ee       	ldi	r22, 0xEB	; 235
    210e:	72 e0       	ldi	r23, 0x02	; 2
    2110:	87 ed       	ldi	r24, 0xD7	; 215
    2112:	95 e0       	ldi	r25, 0x05	; 5
    2114:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint8_t register_content;

    DEBUG("Power amplifier mode: 0x%02X\r\n", mode);
    2118:	08 2f       	mov	r16, r24
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	1f 92       	push	r1
    211e:	8f 93       	push	r24
    2120:	88 eb       	ldi	r24, 0xB8	; 184
    2122:	95 e0       	ldi	r25, 0x05	; 5
    2124:	9f 93       	push	r25
    2126:	8f 93       	push	r24
    2128:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    libRFM69_ReadRegister(REG_PALEVEL, &register_content);
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	81 e1       	ldi	r24, 0x11	; 17
    2134:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>

    register_content &= ~REG_PA_LEVEL_PA_MASK;
    register_content |= (mode << 5);
    2138:	00 0f       	add	r16, r16
    213a:	11 1f       	adc	r17, r17
    213c:	02 95       	swap	r16
    213e:	12 95       	swap	r17
    2140:	10 7f       	andi	r17, 0xF0	; 240
    2142:	10 27       	eor	r17, r16
    2144:	00 7f       	andi	r16, 0xF0	; 240
    2146:	10 27       	eor	r17, r16

    DEBUG("Power amplifier mode: 0x%02X\r\n", mode);

    libRFM69_ReadRegister(REG_PALEVEL, &register_content);

    register_content &= ~REG_PA_LEVEL_PA_MASK;
    2148:	69 81       	ldd	r22, Y+1	; 0x01
    214a:	6f 71       	andi	r22, 0x1F	; 31
    register_content |= (mode << 5);
    214c:	60 2b       	or	r22, r16
    214e:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PALEVEL, register_content);
    2150:	81 e1       	ldi	r24, 0x11	; 17
    2152:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	08 95       	ret

0000216a <libRFM69_SetPowerLevel>:
///
/// @param  power_level Value between 0 and 31.
/// @return None
///
void libRFM69_SetPowerLevel(uint8_t power_level)
{
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	1f 92       	push	r1
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	18 2f       	mov	r17, r24
    sc_assert(power_level <= 31);
    2178:	80 32       	cpi	r24, 0x20	; 32
    217a:	40 f0       	brcs	.+16     	; 0x218c <libRFM69_SetPowerLevel+0x22>
    217c:	46 ea       	ldi	r20, 0xA6	; 166
    217e:	55 e0       	ldi	r21, 0x05	; 5
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	73 e0       	ldi	r23, 0x03	; 3
    2184:	86 e8       	ldi	r24, 0x86	; 134
    2186:	95 e0       	ldi	r25, 0x05	; 5
    2188:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_PALEVEL, &register_content);
    218c:	be 01       	movw	r22, r28
    218e:	6f 5f       	subi	r22, 0xFF	; 255
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	81 e1       	ldi	r24, 0x11	; 17
    2194:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>

    register_content &= ~REG_PA_LEVEL_POUT_MASK;
    2198:	69 81       	ldd	r22, Y+1	; 0x01
    219a:	60 7e       	andi	r22, 0xE0	; 224
    register_content |= power_level;
    219c:	61 2b       	or	r22, r17
    219e:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PALEVEL, register_content);
    21a0:	81 e1       	ldi	r24, 0x11	; 17
    21a2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    21a6:	0f 90       	pop	r0
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	08 95       	ret

000021b0 <libRFM69_EnableOCP>:
///
/// @param  None
/// @return bool true if overrun flag was set, otherwise false.
///
void libRFM69_EnableOCP(bool enabled)
{
    21b0:	1f 93       	push	r17
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	1f 92       	push	r1
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OCP, &register_content);
    21be:	be 01       	movw	r22, r28
    21c0:	6f 5f       	subi	r22, 0xFF	; 255
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	83 e1       	ldi	r24, 0x13	; 19
    21c6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(4, enabled, &register_content);
    21ca:	ae 01       	movw	r20, r28
    21cc:	4f 5f       	subi	r20, 0xFF	; 255
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	61 2f       	mov	r22, r17
    21d2:	84 e0       	ldi	r24, 0x04	; 4
    21d4:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>

    libRFM69_WriteRegister(REG_OCP, register_content);
    21d8:	69 81       	ldd	r22, Y+1	; 0x01
    21da:	83 e1       	ldi	r24, 0x13	; 19
    21dc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    return;
}
    21e0:	0f 90       	pop	r0
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	08 95       	ret

000021ea <libRFM69_GetRSSI>:
///
/// @param  None
/// @return int8_t The RSSI-value.
///
int8_t libRFM69_GetRSSI(void)
{
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	1f 92       	push	r1
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    //Start RSSI measurement
    libRFM69_WriteRegister(REG_RSSICONFIG, 0x01);
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	83 e2       	ldi	r24, 0x23	; 35
    2200:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    uint32_t timer = Timer_GetMilliseconds();
    2204:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
    do
    {
        libRFM69_ReadRegister(REG_RSSICONFIG, &register_content);
    220c:	be 01       	movw	r22, r28
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	83 e2       	ldi	r24, 0x23	; 35
    2214:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>

        if (Timer_TimeDifference(timer) > 500)
    2218:	c7 01       	movw	r24, r14
    221a:	b6 01       	movw	r22, r12
    221c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
    2220:	65 3f       	cpi	r22, 0xF5	; 245
    2222:	71 40       	sbci	r23, 0x01	; 1
    2224:	81 05       	cpc	r24, r1
    2226:	91 05       	cpc	r25, r1
    2228:	80 f0       	brcs	.+32     	; 0x224a <libRFM69_GetRSSI+0x60>
        {
            ERROR("Timeout while waiting for RSSI.");
    222a:	89 e4       	ldi	r24, 0x49	; 73
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	9f 93       	push	r25
    2230:	8f 93       	push	r24
    2232:	88 e1       	ldi	r24, 0x18	; 24
    2234:	95 e0       	ldi	r25, 0x05	; 5
    2236:	9f 93       	push	r25
    2238:	8f 93       	push	r24
    223a:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            return 0;
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0c c0       	rjmp	.+24     	; 0x2262 <libRFM69_GetRSSI+0x78>
        }
    }
    while (register_content == 0);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	88 23       	and	r24, r24
    224e:	f1 f2       	breq	.-68     	; 0x220c <libRFM69_GetRSSI+0x22>

    libRFM69_ReadRegister(REG_RSSIVALUE, &register_content);
    2250:	be 01       	movw	r22, r28
    2252:	6f 5f       	subi	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	84 e2       	ldi	r24, 0x24	; 36
    2258:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return (-1 * (int8_t)(register_content >> 1));
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	86 95       	lsr	r24
    2260:	81 95       	neg	r24
}
    2262:	0f 90       	pop	r0
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	ff 90       	pop	r15
    226a:	ef 90       	pop	r14
    226c:	df 90       	pop	r13
    226e:	cf 90       	pop	r12
    2270:	08 95       	ret

00002272 <libRFM69_SetSyncWordSize>:
///
/// @param  uint8_t Size of the sync word, (1-8).
/// @return None
///
void libRFM69_SetSyncWordSize(uint8_t size)
{
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	1f 92       	push	r1
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	18 2f       	mov	r17, r24
    sc_assert(size > 0 && size <= MAX_SYNC_WORD_SIZE);
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	81 0f       	add	r24, r17
    2284:	88 30       	cpi	r24, 0x08	; 8
    2286:	40 f0       	brcs	.+16     	; 0x2298 <libRFM69_SetSyncWordSize+0x26>
    2288:	41 ef       	ldi	r20, 0xF1	; 241
    228a:	54 e0       	ldi	r21, 0x04	; 4
    228c:	6f ed       	ldi	r22, 0xDF	; 223
    228e:	73 e0       	ldi	r23, 0x03	; 3
    2290:	81 ed       	ldi	r24, 0xD1	; 209
    2292:	94 e0       	ldi	r25, 0x04	; 4
    2294:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    2298:	be 01       	movw	r22, r28
    229a:	6f 5f       	subi	r22, 0xFF	; 255
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	8e e2       	ldi	r24, 0x2E	; 46
    22a0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    register_content &= (0xC7);

    register_content |= ((size - 1) << 3);
    22a4:	81 2f       	mov	r24, r17
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    sc_assert(size > 0 && size <= MAX_SYNC_WORD_SIZE);

    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    register_content &= (0xC7);
    22b6:	69 81       	ldd	r22, Y+1	; 0x01
    22b8:	67 7c       	andi	r22, 0xC7	; 199

    register_content |= ((size - 1) << 3);
    22ba:	68 2b       	or	r22, r24
    22bc:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    22be:	8e e2       	ldi	r24, 0x2E	; 46
    22c0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    22c4:	0f 90       	pop	r0
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	08 95       	ret

000022ce <libRFM69_GetSyncWordSize>:
///
/// @param None
/// @return uint8_t Size of the sync word, (1-8).
///
uint8_t libRFM69_GetSyncWordSize(void)
{
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	1f 92       	push	r1
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    22d8:	be 01       	movw	r22, r28
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8e e2       	ldi	r24, 0x2E	; 46
    22e0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>

    //From RFM69HW datasheet, table 28: sync word size = RegSyncConfig[5:2] + 1
    return ((register_content >> 3) & 0x07) + 1;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	86 95       	lsr	r24
    22e8:	86 95       	lsr	r24
    22ea:	86 95       	lsr	r24
    22ec:	87 70       	andi	r24, 0x07	; 7
}
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	0f 90       	pop	r0
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <libRFM69_SetSyncWord>:
/// @param sync_world* Pointer to new sync word.
/// @param length Length of the sync word.
/// @return bool true if the new sync word was valid, otherwise false.
///
bool libRFM69_SetSyncWord(const uint8_t *sync_word, uint8_t length)
{
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	ec 01       	movw	r28, r24
    2302:	16 2f       	mov	r17, r22
    //Validate sync word.
    if (length != libRFM69_GetSyncWordSize())
    2304:	0e 94 67 11 	call	0x22ce	; 0x22ce <libRFM69_GetSyncWordSize>
    2308:	81 13       	cpse	r24, r17
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <libRFM69_SetSyncWord+0x20>
    }

    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    230c:	88 23       	and	r24, r24
    230e:	e1 f1       	breq	.+120    	; 0x2388 <libRFM69_SetSyncWord+0x90>
    {
        if (sync_word[index] == 0x00)
    2310:	98 81       	ld	r25, Y
    2312:	91 11       	cpse	r25, r1
    2314:	28 c0       	rjmp	.+80     	; 0x2366 <libRFM69_SetSyncWord+0x6e>
    2316:	17 c0       	rjmp	.+46     	; 0x2346 <libRFM69_SetSyncWord+0x4e>
bool libRFM69_SetSyncWord(const uint8_t *sync_word, uint8_t length)
{
    //Validate sync word.
    if (length != libRFM69_GetSyncWordSize())
    {
        ERROR("Invalid sync word length: %u", length);
    2318:	1f 92       	push	r1
    231a:	1f 93       	push	r17
    231c:	84 e3       	ldi	r24, 0x34	; 52
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	9f 93       	push	r25
    2322:	8f 93       	push	r24
    2324:	85 ea       	ldi	r24, 0xA5	; 165
    2326:	94 e0       	ldi	r25, 0x04	; 4
    2328:	9f 93       	push	r25
    232a:	8f 93       	push	r24
    232c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        return false;
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	27 c0       	rjmp	.+78     	; 0x238e <libRFM69_SetSyncWord+0x96>
    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    {
        if (sync_word[index] == 0x00)
    2340:	21 91       	ld	r18, Z+
    2342:	21 11       	cpse	r18, r1
    2344:	13 c0       	rjmp	.+38     	; 0x236c <libRFM69_SetSyncWord+0x74>
        {
            ERROR("Invalid sync word value: 0x00");
    2346:	84 e3       	ldi	r24, 0x34	; 52
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	9f 93       	push	r25
    234c:	8f 93       	push	r24
    234e:	88 e7       	ldi	r24, 0x78	; 120
    2350:	94 e0       	ldi	r25, 0x04	; 4
    2352:	9f 93       	push	r25
    2354:	8f 93       	push	r24
    2356:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            return false;
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	14 c0       	rjmp	.+40     	; 0x238e <libRFM69_SetSyncWord+0x96>
    2366:	fe 01       	movw	r30, r28
    2368:	31 96       	adiw	r30, 0x01	; 1
    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    {
        if (sync_word[index] == 0x00)
    236a:	90 e0       	ldi	r25, 0x00	; 0
    }

    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    236c:	9f 5f       	subi	r25, 0xFF	; 255
    236e:	98 13       	cpse	r25, r24
    2370:	e7 cf       	rjmp	.-50     	; 0x2340 <libRFM69_SetSyncWord+0x48>
    2372:	0f e2       	ldi	r16, 0x2F	; 47
    2374:	08 0f       	add	r16, r24
    2376:	1f e2       	ldi	r17, 0x2F	; 47
    }

    //Write new sync word if all checks passed.
    for (index = 0; index < length; ++index)
    {
        libRFM69_WriteRegister(REG_SYNCVALUE1 + index, sync_word[index]);
    2378:	69 91       	ld	r22, Y+
    237a:	81 2f       	mov	r24, r17
    237c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    2380:	1f 5f       	subi	r17, 0xFF	; 255
            return false;
        }
    }

    //Write new sync word if all checks passed.
    for (index = 0; index < length; ++index)
    2382:	10 13       	cpse	r17, r16
    2384:	f9 cf       	rjmp	.-14     	; 0x2378 <libRFM69_SetSyncWord+0x80>
    2386:	02 c0       	rjmp	.+4      	; 0x238c <libRFM69_SetSyncWord+0x94>
    {
        libRFM69_WriteRegister(REG_SYNCVALUE1 + index, sync_word[index]);
    }

    return true;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	01 c0       	rjmp	.+2      	; 0x238e <libRFM69_SetSyncWord+0x96>
    238c:	81 e0       	ldi	r24, 0x01	; 1
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <libRFM69_EnableSyncWordGeneration>:
///
/// @param enabled Enable/disable
/// @return None
///
void libRFM69_EnableSyncWordGeneration(bool enabled)
{
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	1f 92       	push	r1
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    23a6:	be 01       	movw	r22, r28
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	8e e2       	ldi	r24, 0x2E	; 46
    23ae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(7, enabled, &register_content);
    23b2:	ae 01       	movw	r20, r28
    23b4:	4f 5f       	subi	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	61 2f       	mov	r22, r17
    23ba:	87 e0       	ldi	r24, 0x07	; 7
    23bc:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    23c0:	69 81       	ldd	r22, Y+1	; 0x01
    23c2:	8e e2       	ldi	r24, 0x2E	; 46
    23c4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    23c8:	0f 90       	pop	r0
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	08 95       	ret

000023d2 <libRFM69_SetFIFOFillCondition>:
/// @param register fill_condition The fill condition, AUTO or MAN.
/// @return None
///
void libRFM69_SetFIFOFillCondition(libRFM69_fifo_fill_condition_type
                                   fill_condition)
{
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	1f 92       	push	r1
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    23e0:	be 01       	movw	r22, r28
    23e2:	6f 5f       	subi	r22, 0xFF	; 255
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	8e e2       	ldi	r24, 0x2E	; 46
    23e8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(6, (bool)fill_condition, &register_content);
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	11 11       	cpse	r17, r1
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <libRFM69_SetFIFOFillCondition+0x22>
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	ae 01       	movw	r20, r28
    23f6:	4f 5f       	subi	r20, 0xFF	; 255
    23f8:	5f 4f       	sbci	r21, 0xFF	; 255
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    2400:	69 81       	ldd	r22, Y+1	; 0x01
    2402:	8e e2       	ldi	r24, 0x2E	; 46
    2404:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    2408:	0f 90       	pop	r0
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	08 95       	ret

00002412 <libRFM69_SetClockOutFrequency>:
///
/// @param frequency Frequency to set.
/// @return None
///
void libRFM69_SetClockOutFrequency(libRFM69_clkout_freq_type frequency)
{
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	1f 92       	push	r1
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	18 2f       	mov	r17, r24
    sc_assert(frequency <= RFM_CLKOUT_OFF);
    2420:	88 30       	cpi	r24, 0x08	; 8
    2422:	40 f0       	brcs	.+16     	; 0x2434 <libRFM69_SetClockOutFrequency+0x22>
    2424:	4c e5       	ldi	r20, 0x5C	; 92
    2426:	54 e0       	ldi	r21, 0x04	; 4
    2428:	6c eb       	ldi	r22, 0xBC	; 188
    242a:	74 e0       	ldi	r23, 0x04	; 4
    242c:	8c e3       	ldi	r24, 0x3C	; 60
    242e:	94 e0       	ldi	r25, 0x04	; 4
    2430:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_DIOMAPPING2, &register_content);
    2434:	be 01       	movw	r22, r28
    2436:	6f 5f       	subi	r22, 0xFF	; 255
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	86 e2       	ldi	r24, 0x26	; 38
    243c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    libRFM69_WriteRegister(REG_DIOMAPPING2, (register_content & 0xF8) | frequency);
    2440:	69 81       	ldd	r22, Y+1	; 0x01
    2442:	68 7f       	andi	r22, 0xF8	; 248
    2444:	61 2b       	or	r22, r17
    2446:	86 e2       	ldi	r24, 0x26	; 38
    2448:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
}
    244c:	0f 90       	pop	r0
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	08 95       	ret

00002456 <libRFM69_SetLNAGain>:
///
/// @param gain Gain to set.
/// @return None
///
void libRFM69_SetLNAGain(libRFM69_lna_gain_type gain)
{
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	1f 92       	push	r1
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	18 2f       	mov	r17, r24
    sc_assert(gain <= RFM_LNA_GAIN_G6);
    2464:	87 30       	cpi	r24, 0x07	; 7
    2466:	40 f0       	brcs	.+16     	; 0x2478 <libRFM69_SetLNAGain+0x22>
    2468:	44 e2       	ldi	r20, 0x24	; 36
    246a:	54 e0       	ldi	r21, 0x04	; 4
    246c:	64 ed       	ldi	r22, 0xD4	; 212
    246e:	74 e0       	ldi	r23, 0x04	; 4
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	94 e0       	ldi	r25, 0x04	; 4
    2474:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_LNA, &register_content);
    2478:	be 01       	movw	r22, r28
    247a:	6f 5f       	subi	r22, 0xFF	; 255
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	88 e1       	ldi	r24, 0x18	; 24
    2480:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    libRFM69_WriteRegister(REG_LNA, (register_content & 0xF8) | gain);
    2484:	69 81       	ldd	r22, Y+1	; 0x01
    2486:	68 7f       	andi	r22, 0xF8	; 248
    2488:	61 2b       	or	r22, r17
    248a:	88 e1       	ldi	r24, 0x18	; 24
    248c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
}
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	08 95       	ret

0000249a <libRFM69_SetLNAInputImpedance>:
///
/// @param impedance Impedance to set.
/// @return None
///
void libRFM69_SetLNAInputImpedance(libRFM69_lna_zin_type impedance)
{
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	1f 92       	push	r1
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	18 2f       	mov	r17, r24
    sc_assert(impedance <= RFM_LNA_ZIN_200OHM);
    24a8:	82 30       	cpi	r24, 0x02	; 2
    24aa:	40 f0       	brcs	.+16     	; 0x24bc <libRFM69_SetLNAInputImpedance+0x22>
    24ac:	44 ee       	ldi	r20, 0xE4	; 228
    24ae:	53 e0       	ldi	r21, 0x03	; 3
    24b0:	63 ee       	ldi	r22, 0xE3	; 227
    24b2:	74 e0       	ldi	r23, 0x04	; 4
    24b4:	84 ec       	ldi	r24, 0xC4	; 196
    24b6:	93 e0       	ldi	r25, 0x03	; 3
    24b8:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_LNA, &register_content);
    24bc:	be 01       	movw	r22, r28
    24be:	6f 5f       	subi	r22, 0xFF	; 255
    24c0:	7f 4f       	sbci	r23, 0xFF	; 255
    24c2:	88 e1       	ldi	r24, 0x18	; 24
    24c4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(7, impedance, &register_content);
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	11 11       	cpse	r17, r1
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <libRFM69_SetLNAInputImpedance+0x36>
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	ae 01       	movw	r20, r28
    24d2:	4f 5f       	subi	r20, 0xFF	; 255
    24d4:	5f 4f       	sbci	r21, 0xFF	; 255
    24d6:	87 e0       	ldi	r24, 0x07	; 7
    24d8:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    libRFM69_WriteRegister(REG_LNA, register_content);
    24dc:	69 81       	ldd	r22, Y+1	; 0x01
    24de:	88 e1       	ldi	r24, 0x18	; 24
    24e0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
}
    24e4:	0f 90       	pop	r0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	08 95       	ret

000024ee <libRFM69_EnableAFCLowBeta>:
///
/// @param enabled True or False
/// @return None
///
void libRFM69_EnableAFCLowBeta(bool enabled)
{
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	1f 92       	push	r1
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_AFCCTRL, &register_content);
    24fc:	be 01       	movw	r22, r28
    24fe:	6f 5f       	subi	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	8b e0       	ldi	r24, 0x0B	; 11
    2504:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    SetBit(5, enabled, &register_content);
    2508:	ae 01       	movw	r20, r28
    250a:	4f 5f       	subi	r20, 0xFF	; 255
    250c:	5f 4f       	sbci	r21, 0xFF	; 255
    250e:	61 2f       	mov	r22, r17
    2510:	85 e0       	ldi	r24, 0x05	; 5
    2512:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    libRFM69_WriteRegister(REG_AFCCTRL, register_content);
    2516:	69 81       	ldd	r22, Y+1	; 0x01
    2518:	8b e0       	ldi	r24, 0x0B	; 11
    251a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>

    return;
}
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <libRFM69_IsAFCLowBetaEnabled>:
///
/// @param None
/// @return bool True if enabled, otherwise false.
///
bool libRFM69_IsAFCLowBetaEnabled(void)
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	1f 92       	push	r1
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    2532:	be 01       	movw	r22, r28
    2534:	6f 5f       	subi	r22, 0xFF	; 255
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8b e0       	ldi	r24, 0x0B	; 11
    253a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    253e:	99 81       	ldd	r25, Y+1	; 0x01
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	95 ff       	sbrs	r25, 5
    2544:	80 e0       	ldi	r24, 0x00	; 0
/// @return bool True if enabled, otherwise false.
///
bool libRFM69_IsAFCLowBetaEnabled(void)
{
    return IsBitSetInRegister(REG_AFCCTRL, 5);
}
    2546:	0f 90       	pop	r0
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	08 95       	ret

0000254e <libRFM69_EnableContinuousDAGC>:
///
void libRFM69_EnableContinuousDAGC(bool enabled)
{
    uint8_t register_content;

    if (enabled)
    254e:	88 23       	and	r24, r24
    2550:	31 f0       	breq	.+12     	; 0x255e <libRFM69_EnableContinuousDAGC+0x10>
    {
        register_content = libRFM69_IsAFCLowBetaEnabled() == true ?
    2552:	0e 94 94 12 	call	0x2528	; 0x2528 <libRFM69_IsAFCLowBetaEnabled>
    2556:	88 23       	and	r24, r24
    2558:	21 f0       	breq	.+8      	; 0x2562 <libRFM69_EnableContinuousDAGC+0x14>
    255a:	60 e2       	ldi	r22, 0x20	; 32
    255c:	03 c0       	rjmp	.+6      	; 0x2564 <libRFM69_EnableContinuousDAGC+0x16>
                           RF_DAGC_IMPROVED_LOWBETA1 : RF_DAGC_IMPROVED_LOWBETA0;
    }
    else
    {
        register_content = RF_DAGC_NORMAL;
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	01 c0       	rjmp	.+2      	; 0x2564 <libRFM69_EnableContinuousDAGC+0x16>
{
    uint8_t register_content;

    if (enabled)
    {
        register_content = libRFM69_IsAFCLowBetaEnabled() == true ?
    2562:	60 e3       	ldi	r22, 0x30	; 48
    else
    {
        register_content = RF_DAGC_NORMAL;
    }

    libRFM69_WriteRegister(REG_TESTDAGC, register_content);
    2564:	8f e6       	ldi	r24, 0x6F	; 111
    2566:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    256a:	08 95       	ret

0000256c <libRFM69_IsTxReady>:
    libRFM69_ReadRegister(REG_IRQFLAGS1, &register_content);
    return (register_content & RF_IRQFLAGS1_RXREADY) == RF_IRQFLAGS1_RXREADY;
}

bool libRFM69_IsTxReady(void)
{
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	1f 92       	push	r1
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    2576:	be 01       	movw	r22, r28
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	87 e2       	ldi	r24, 0x27	; 39
    257e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    2582:	99 81       	ldd	r25, Y+1	; 0x01
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	95 ff       	sbrs	r25, 5
    2588:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsTxReady(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS1, 5);
}
    258a:	0f 90       	pop	r0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <libRFM69_IsOCPEnabled>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_CRCOK);
}

bool libRFM69_IsOCPEnabled(void)
{
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	1f 92       	push	r1
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    259c:	be 01       	movw	r22, r28
    259e:	6f 5f       	subi	r22, 0xFF	; 255
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	83 e1       	ldi	r24, 0x13	; 19
    25a4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    25a8:	99 81       	ldd	r25, Y+1	; 0x01
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	94 ff       	sbrs	r25, 4
    25ae:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsOCPEnabled(void)
{
    return IsBitSetInRegister(REG_OCP, 4);
}
    25b0:	0f 90       	pop	r0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <libRFM69_EnableHighPowerSetting>:
/// @param  enable Enable/disable
/// @return None
///
void libRFM69_EnableHighPowerSetting(bool enable)
{
    if (enable == true)
    25b8:	88 23       	and	r24, r24
    25ba:	d9 f0       	breq	.+54     	; 0x25f2 <libRFM69_EnableHighPowerSetting+0x3a>
    {

#ifdef DEBUG_ENABLE
        if (libRFM69_IsOCPEnabled() == true)
    25bc:	0e 94 c9 12 	call	0x2592	; 0x2592 <libRFM69_IsOCPEnabled>
    25c0:	88 23       	and	r24, r24
    25c2:	71 f0       	breq	.+28     	; 0x25e0 <libRFM69_EnableHighPowerSetting+0x28>
        {
            WARNING("OCP must be disabled while in high power mode");
    25c4:	8a e5       	ldi	r24, 0x5A	; 90
    25c6:	91 e0       	ldi	r25, 0x01	; 1
    25c8:	9f 93       	push	r25
    25ca:	8f 93       	push	r24
    25cc:	87 e4       	ldi	r24, 0x47	; 71
    25ce:	95 e0       	ldi	r25, 0x05	; 5
    25d0:	9f 93       	push	r25
    25d2:	8f 93       	push	r24
    25d4:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
        }
#endif

        libRFM69_WriteRegister(REG_TESTPA1, 0x5D);
    25e0:	6d e5       	ldi	r22, 0x5D	; 93
    25e2:	8a e5       	ldi	r24, 0x5A	; 90
    25e4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
        libRFM69_WriteRegister(REG_TESTPA2, 0x7C);
    25e8:	6c e7       	ldi	r22, 0x7C	; 124
    25ea:	8c e5       	ldi	r24, 0x5C	; 92
    25ec:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    25f0:	08 95       	ret
    }
    else
    {
        libRFM69_WriteRegister(REG_TESTPA1, 0x55);
    25f2:	65 e5       	ldi	r22, 0x55	; 85
    25f4:	8a e5       	ldi	r24, 0x5A	; 90
    25f6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
        libRFM69_WriteRegister(REG_TESTPA2, 0x70);
    25fa:	60 e7       	ldi	r22, 0x70	; 112
    25fc:	8c e5       	ldi	r24, 0x5C	; 92
    25fe:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <libRFM69_WriteRegister>
    2602:	08 95       	ret

00002604 <libRFM69_IsPayloadReady>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PACKETSENT);
}

bool libRFM69_IsPayloadReady(void)
{
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	1f 92       	push	r1
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    260e:	be 01       	movw	r22, r28
    2610:	6f 5f       	subi	r22, 0xFF	; 255
    2612:	7f 4f       	sbci	r23, 0xFF	; 255
    2614:	88 e2       	ldi	r24, 0x28	; 40
    2616:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    261a:	99 81       	ldd	r25, Y+1	; 0x01
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	92 ff       	sbrs	r25, 2
    2620:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsPayloadReady(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PAYLOADREADY);
}
    2622:	0f 90       	pop	r0
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <libRFM69_IsPacketSent>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOOVERRUN);
}

bool libRFM69_IsPacketSent(void)
{
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	1f 92       	push	r1
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    2634:	be 01       	movw	r22, r28
    2636:	6f 5f       	subi	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	88 e2       	ldi	r24, 0x28	; 40
    263c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    2640:	99 81       	ldd	r25, Y+1	; 0x01
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	93 ff       	sbrs	r25, 3
    2646:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsPacketSent(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PACKETSENT);
}
    2648:	0f 90       	pop	r0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <libRFM69_IsFIFONotEmpty>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOFULL);
}

bool libRFM69_IsFIFONotEmpty(void)
{
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	1f 92       	push	r1
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    265a:	be 01       	movw	r22, r28
    265c:	6f 5f       	subi	r22, 0xFF	; 255
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	88 e2       	ldi	r24, 0x28	; 40
    2662:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    2666:	99 81       	ldd	r25, Y+1	; 0x01
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	96 ff       	sbrs	r25, 6
    266c:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsFIFONotEmpty(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFONOTEMPTY);
}
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <libRFM69_ReadFromFIFO>:
/// @param  data Pointer to buffer where the FIFO data will be stored.
/// @param  max_length Max number of bytes to read.
/// @return uint8_t Number of bytes read.
///
uint8_t libRFM69_ReadFromFIFO(uint8_t *data, uint8_t max_length)
{
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	06 2f       	mov	r16, r22
    2680:	ec 01       	movw	r28, r24
    uint8_t index = 0;
    2682:	10 e0       	ldi	r17, 0x00	; 0

    while (libRFM69_IsFIFONotEmpty() && index < max_length)
    2684:	06 c0       	rjmp	.+12     	; 0x2692 <libRFM69_ReadFromFIFO+0x1c>
    {
        libRFM69_ReadRegister(REG_FIFO, &data[index]);
    2686:	be 01       	movw	r22, r28
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <libRFM69_ReadRegister>
        ++index;
    268e:	1f 5f       	subi	r17, 0xFF	; 255
    2690:	21 96       	adiw	r28, 0x01	; 1
///
uint8_t libRFM69_ReadFromFIFO(uint8_t *data, uint8_t max_length)
{
    uint8_t index = 0;

    while (libRFM69_IsFIFONotEmpty() && index < max_length)
    2692:	0e 94 28 13 	call	0x2650	; 0x2650 <libRFM69_IsFIFONotEmpty>
    2696:	88 23       	and	r24, r24
    2698:	11 f0       	breq	.+4      	; 0x269e <libRFM69_ReadFromFIFO+0x28>
    269a:	10 13       	cpse	r17, r16
    269c:	f4 cf       	rjmp	.-24     	; 0x2686 <libRFM69_ReadFromFIFO+0x10>
        libRFM69_ReadRegister(REG_FIFO, &data[index]);
        ++index;
    }

    return index;
}
    269e:	81 2f       	mov	r24, r17
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <libSPI_WriteByte>:
/// @param  post_write Pointer to function called after writing
/// @return None
///
void libSPI_WriteByte(uint8_t data_byte, libSPI_callback_type pre_write,
                      libSPI_callback_type post_write)
{
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	18 2f       	mov	r17, r24
    26b2:	ea 01       	movw	r28, r20
    if (pre_write != NULL)
    26b4:	61 15       	cp	r22, r1
    26b6:	71 05       	cpc	r23, r1
    26b8:	11 f0       	breq	.+4      	; 0x26be <libSPI_WriteByte+0x14>
    {
        pre_write();
    26ba:	fb 01       	movw	r30, r22
    26bc:	09 95       	icall
    }

    SPI_Write(data_byte);
    26be:	1e bd       	out	0x2e, r17	; 46
    26c0:	0d b4       	in	r0, 0x2d	; 45
    26c2:	07 fe       	sbrs	r0, 7
    26c4:	fd cf       	rjmp	.-6      	; 0x26c0 <libSPI_WriteByte+0x16>

    if (post_write != NULL)
    26c6:	20 97       	sbiw	r28, 0x00	; 0
    26c8:	11 f0       	breq	.+4      	; 0x26ce <libSPI_WriteByte+0x24>
    {
        post_write();
    26ca:	fe 01       	movw	r30, r28
    26cc:	09 95       	icall
    }
    return;
}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	08 95       	ret

000026d6 <libSPI_ReadByte>:
/// @param  post_read Pointer to function called after reading
/// @return None
///
void libSPI_ReadByte(uint8_t *data_byte, libSPI_callback_type pre_read,
                     libSPI_callback_type post_read)
{
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	8c 01       	movw	r16, r24
    26e0:	ea 01       	movw	r28, r20
    if (pre_read != NULL)
    26e2:	61 15       	cp	r22, r1
    26e4:	71 05       	cpc	r23, r1
    26e6:	11 f0       	breq	.+4      	; 0x26ec <libSPI_ReadByte+0x16>
    {
        pre_read();
    26e8:	fb 01       	movw	r30, r22
    26ea:	09 95       	icall
    }

    SPI_Read(*data_byte);
    26ec:	1e bc       	out	0x2e, r1	; 46
    26ee:	0d b4       	in	r0, 0x2d	; 45
    26f0:	07 fe       	sbrs	r0, 7
    26f2:	fd cf       	rjmp	.-6      	; 0x26ee <libSPI_ReadByte+0x18>
    26f4:	8e b5       	in	r24, 0x2e	; 46
    26f6:	f8 01       	movw	r30, r16
    26f8:	80 83       	st	Z, r24

    if (post_read != NULL)
    26fa:	20 97       	sbiw	r28, 0x00	; 0
    26fc:	11 f0       	breq	.+4      	; 0x2702 <libSPI_ReadByte+0x2c>
    {
        post_read();
    26fe:	fe 01       	movw	r30, r28
    2700:	09 95       	icall
    }
    return;
}
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <libSPI_Read>:
/// @param  post_read Pointer to function called after reading
/// @return None
///
void libSPI_Read(void *buffer, size_t length, libSPI_callback_type pre_read,
                 libSPI_callback_type post_read)
{
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	ec 01       	movw	r28, r24
    271a:	8b 01       	movw	r16, r22
    271c:	79 01       	movw	r14, r18
    sc_assert(buffer != NULL);
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	41 f4       	brne	.+16     	; 0x2732 <libSPI_Read+0x26>
    2722:	45 e4       	ldi	r20, 0x45	; 69
    2724:	58 e0       	ldi	r21, 0x08	; 8
    2726:	65 ed       	ldi	r22, 0xD5	; 213
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	87 e2       	ldi	r24, 0x27	; 39
    272c:	98 e0       	ldi	r25, 0x08	; 8
    272e:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    if (pre_read != NULL)
    2732:	41 15       	cp	r20, r1
    2734:	51 05       	cpc	r21, r1
    2736:	11 f0       	breq	.+4      	; 0x273c <libSPI_Read+0x30>
    {
        pre_read();
    2738:	fa 01       	movw	r30, r20
    273a:	09 95       	icall
    }

    size_t idx;
    uint8_t *buffer_ptr = (uint8_t *)buffer;
    for (idx = 0; idx < length; ++idx)
    273c:	01 15       	cp	r16, r1
    273e:	11 05       	cpc	r17, r1
    2740:	61 f0       	breq	.+24     	; 0x275a <libSPI_Read+0x4e>
    2742:	be 01       	movw	r22, r28
    2744:	60 0f       	add	r22, r16
    2746:	71 1f       	adc	r23, r17
    {

        SPI_Read(*buffer_ptr);
    2748:	1e bc       	out	0x2e, r1	; 46
    274a:	0d b4       	in	r0, 0x2d	; 45
    274c:	07 fe       	sbrs	r0, 7
    274e:	fd cf       	rjmp	.-6      	; 0x274a <libSPI_Read+0x3e>
    2750:	8e b5       	in	r24, 0x2e	; 46
    2752:	89 93       	st	Y+, r24
        pre_read();
    }

    size_t idx;
    uint8_t *buffer_ptr = (uint8_t *)buffer;
    for (idx = 0; idx < length; ++idx)
    2754:	c6 17       	cp	r28, r22
    2756:	d7 07       	cpc	r29, r23
    2758:	b9 f7       	brne	.-18     	; 0x2748 <libSPI_Read+0x3c>

        SPI_Read(*buffer_ptr);
        ++buffer_ptr;
    }

    if (post_read != NULL)
    275a:	e1 14       	cp	r14, r1
    275c:	f1 04       	cpc	r15, r1
    275e:	11 f0       	breq	.+4      	; 0x2764 <libSPI_Read+0x58>
    {
        post_read();
    2760:	f7 01       	movw	r30, r14
    2762:	09 95       	icall
    }
    return;
}
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <libSPI_SetMaster>:
/// @param bool true if master, else slave  //TODO: Fix this description
/// @return None
///
void libSPI_SetMaster(bool master_value)
{
    if (master_value == true)
    2772:	88 23       	and	r24, r24
    2774:	21 f0       	breq	.+8      	; 0x277e <libSPI_SetMaster+0xc>
    {
        SPCR |= (1 << MSTR);
    2776:	8c b5       	in	r24, 0x2c	; 44
    2778:	80 61       	ori	r24, 0x10	; 16
    277a:	8c bd       	out	0x2c, r24	; 44
    277c:	08 95       	ret
    }
    else
    {
        SPCR &= ~(1 << MSTR);
    277e:	8c b5       	in	r24, 0x2c	; 44
    2780:	8f 7e       	andi	r24, 0xEF	; 239
    2782:	8c bd       	out	0x2c, r24	; 44
    2784:	08 95       	ret

00002786 <libSPI_SetMode>:
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    switch (mode)
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	59 f0       	breq	.+22     	; 0x27a0 <libSPI_SetMode+0x1a>
    278a:	28 f0       	brcs	.+10     	; 0x2796 <libSPI_SetMode+0x10>
    278c:	82 30       	cpi	r24, 0x02	; 2
    278e:	81 f0       	breq	.+32     	; 0x27b0 <libSPI_SetMode+0x2a>
    2790:	83 30       	cpi	r24, 0x03	; 3
    2792:	b1 f0       	breq	.+44     	; 0x27c0 <libSPI_SetMode+0x3a>
    2794:	1a c0       	rjmp	.+52     	; 0x27ca <libSPI_SetMode+0x44>
    {
        case 0:
            //Clock low when idle, sample on rising edge
            SPCR &= ~((1 << CPOL) | (1 << CPHA));
    2796:	8c b5       	in	r24, 0x2c	; 44
    2798:	83 7f       	andi	r24, 0xF3	; 243
    279a:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    switch (mode)
    {
        case 0:
            //Clock low when idle, sample on rising edge
            SPCR &= ~((1 << CPOL) | (1 << CPHA));
            break;
    279e:	08 95       	ret
        case 1:
            //Clock low when idle, sample on falling edge
            SPCR &= ~(1 << CPOL);
    27a0:	8c b5       	in	r24, 0x2c	; 44
    27a2:	87 7f       	andi	r24, 0xF7	; 247
    27a4:	8c bd       	out	0x2c, r24	; 44
            SPCR |= (1 << CPHA);
    27a6:	8c b5       	in	r24, 0x2c	; 44
    27a8:	84 60       	ori	r24, 0x04	; 4
    27aa:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
            break;
        case 1:
            //Clock low when idle, sample on falling edge
            SPCR &= ~(1 << CPOL);
            SPCR |= (1 << CPHA);
            break;
    27ae:	08 95       	ret
        case 2:
            //Clock high when idle, sample on rising edge
            SPCR |= (1 << CPOL);
    27b0:	8c b5       	in	r24, 0x2c	; 44
    27b2:	88 60       	ori	r24, 0x08	; 8
    27b4:	8c bd       	out	0x2c, r24	; 44
            SPCR &= ~(1 << CPHA);
    27b6:	8c b5       	in	r24, 0x2c	; 44
    27b8:	8b 7f       	andi	r24, 0xFB	; 251
    27ba:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
            break;
        case 2:
            //Clock high when idle, sample on rising edge
            SPCR |= (1 << CPOL);
            SPCR &= ~(1 << CPHA);
            break;
    27be:	08 95       	ret
        case 3:
            //Clock high when idle, sample on falling edge
            SPCR |= ((1 << CPOL) | (1 << CPHA));
    27c0:	8c b5       	in	r24, 0x2c	; 44
    27c2:	8c 60       	ori	r24, 0x0C	; 12
    27c4:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
            SPCR &= ~(1 << CPHA);
            break;
        case 3:
            //Clock high when idle, sample on falling edge
            SPCR |= ((1 << CPOL) | (1 << CPHA));
            break;
    27c8:	08 95       	ret
        default:
            //Invalid mode
            WARNING("Invalid SPI-mode");
    27ca:	8c eb       	ldi	r24, 0xBC	; 188
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	9f 93       	push	r25
    27d0:	8f 93       	push	r24
    27d2:	85 e0       	ldi	r24, 0x05	; 5
    27d4:	98 e0       	ldi	r25, 0x08	; 8
    27d6:	9f 93       	push	r25
    27d8:	8f 93       	push	r24
    27da:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            status = false;
            break;
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
            SPCR |= ((1 << CPOL) | (1 << CPHA));
            break;
        default:
            //Invalid mode
            WARNING("Invalid SPI-mode");
            status = false;
    27e6:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return status;
}
    27e8:	08 95       	ret

000027ea <libSPI_Init>:
///
/// @param  None
/// @return None
///
void libSPI_Init(uint8_t spi_mode)
{
    27ea:	cf 93       	push	r28
    27ec:	c8 2f       	mov	r28, r24
    //Always set SS as output even if not used, otherwise the device can't
    //act as master.
    DDRB |= ((1 << MOSI) | (1 << SCK) | (1 << SS));
    27ee:	84 b1       	in	r24, 0x04	; 4
    27f0:	8c 62       	ori	r24, 0x2C	; 44
    27f2:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~(1 << MISO);
    27f4:	24 98       	cbi	0x04, 4	; 4

    SPCR = (1 << SPR0);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	8c bd       	out	0x2c, r24	; 44

    libSPI_SetMaster(true);
    27fa:	0e 94 b9 13 	call	0x2772	; 0x2772 <libSPI_SetMaster>

    if (libSPI_SetMode(spi_mode) == true)
    27fe:	8c 2f       	mov	r24, r28
    2800:	0e 94 c3 13 	call	0x2786	; 0x2786 <libSPI_SetMode>
    2804:	88 23       	and	r24, r24
    2806:	a1 f0       	breq	.+40     	; 0x2830 <libSPI_Init+0x46>
    {
        SPCR |= (1 << SPE);
    2808:	8c b5       	in	r24, 0x2c	; 44
    280a:	80 64       	ori	r24, 0x40	; 64
    280c:	8c bd       	out	0x2c, r24	; 44
        spi_status = IDLE;
    280e:	10 92 7a 03 	sts	0x037A, r1

        INFO("Init done");
    2812:	8b ec       	ldi	r24, 0xCB	; 203
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	9f 93       	push	r25
    2818:	8f 93       	push	r24
    281a:	88 e8       	ldi	r24, 0x88	; 136
    281c:	98 e0       	ldi	r25, 0x08	; 8
    281e:	9f 93       	push	r25
    2820:	8f 93       	push	r24
    2822:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	12 c0       	rjmp	.+36     	; 0x2854 <libSPI_Init+0x6a>
    }
    else
    {
        ERROR("Failed to init SPI, invalid mode: %u", spi_mode);
    2830:	1f 92       	push	r1
    2832:	cf 93       	push	r28
    2834:	8b ec       	ldi	r24, 0xCB	; 203
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	9f 93       	push	r25
    283a:	8f 93       	push	r24
    283c:	84 e5       	ldi	r24, 0x54	; 84
    283e:	98 e0       	ldi	r25, 0x08	; 8
    2840:	9f 93       	push	r25
    2842:	8f 93       	push	r24
    2844:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    }

    slave_active = false;
    2854:	10 92 79 03 	sts	0x0379, r1
    return;
}
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <__vector_14>:
//////////////////////////////////////////////////////////////////////////
//INTERUPT SERVICE ROUTINES
//////////////////////////////////////////////////////////////////////////

ISR(TIMER0_COMPA_vect)
{
    285c:	1f 92       	push	r1
    285e:	0f 92       	push	r0
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	0f 92       	push	r0
    2864:	11 24       	eor	r1, r1
    2866:	8f 93       	push	r24
    2868:	9f 93       	push	r25
    286a:	af 93       	push	r26
    286c:	bf 93       	push	r27
    ++system_timer;
    286e:	80 91 23 04 	lds	r24, 0x0423
    2872:	90 91 24 04 	lds	r25, 0x0424
    2876:	a0 91 25 04 	lds	r26, 0x0425
    287a:	b0 91 26 04 	lds	r27, 0x0426
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	a1 1d       	adc	r26, r1
    2882:	b1 1d       	adc	r27, r1
    2884:	80 93 23 04 	sts	0x0423, r24
    2888:	90 93 24 04 	sts	0x0424, r25
    288c:	a0 93 25 04 	sts	0x0425, r26
    2890:	b0 93 26 04 	sts	0x0426, r27
}
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	0f 90       	pop	r0
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	0f 90       	pop	r0
    28a2:	1f 90       	pop	r1
    28a4:	18 95       	reti

000028a6 <libTimer_Init>:
/// @param  None
/// @return None
///
void libTimer_Init()
{
    system_timer = 0;
    28a6:	10 92 23 04 	sts	0x0423, r1
    28aa:	10 92 24 04 	sts	0x0424, r1
    28ae:	10 92 25 04 	sts	0x0425, r1
    28b2:	10 92 26 04 	sts	0x0426, r1

    //Set CTC-mode
    TCCR0A |= (1 << WGM01);
    28b6:	84 b5       	in	r24, 0x24	; 36
    28b8:	82 60       	ori	r24, 0x02	; 2
    28ba:	84 bd       	out	0x24, r24	; 36

#if F_CPU == 8000000
    //Set prescaler to 64
    TCCR0B |= (1 << CS00 | 1 << CS01);
    28bc:	85 b5       	in	r24, 0x25	; 37
    28be:	83 60       	ori	r24, 0x03	; 3
    28c0:	85 bd       	out	0x25, r24	; 37

    //Set compare value
    OCR0A = 125;
    28c2:	8d e7       	ldi	r24, 0x7D	; 125
    28c4:	87 bd       	out	0x27, r24	; 39
#else
#error "Unsupported frequency"
#endif

    //Enabled interrupt on compare match A
    TIMSK0 |= (1 << OCIE0A);
    28c6:	ee e6       	ldi	r30, 0x6E	; 110
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	82 60       	ori	r24, 0x02	; 2
    28ce:	80 83       	st	Z, r24

    //TODO: Can this global interrupt enable cause problems?
    sei();
    28d0:	78 94       	sei
    28d2:	08 95       	ret

000028d4 <libTimer_GetMilliseconds>:
///
uint32_t libTimer_GetMilliseconds()
{
    uint32_t current_timer;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    28d4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28d6:	f8 94       	cli
    {
        current_timer = system_timer;
    28d8:	60 91 23 04 	lds	r22, 0x0423
    28dc:	70 91 24 04 	lds	r23, 0x0424
    28e0:	80 91 25 04 	lds	r24, 0x0425
    28e4:	90 91 26 04 	lds	r25, 0x0426
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28e8:	2f bf       	out	0x3f, r18	; 63
    }

    return current_timer;
}
    28ea:	08 95       	ret

000028ec <libUART_Init>:
/// @return None
///
void libUART_Init(void)
{
    //Set baud rate
    UBRR0H = (uint8_t)(UBRRn >> 8);
    28ec:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRRn;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 93 c4 00 	sts	0x00C4, r24

    //Enable RX & TX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    28f6:	88 e1       	ldi	r24, 0x18	; 24
    28f8:	80 93 c1 00 	sts	0x00C1, r24

    //Set frame format: 1 stop bit 8 data
    UCSR0C =  (3 << UCSZ00);
    28fc:	86 e0       	ldi	r24, 0x06	; 6
    28fe:	80 93 c2 00 	sts	0x00C2, r24
    2902:	08 95       	ret

00002904 <libUART_WaitForEmptyBuffer>:
/// @return None
///
void libUART_WaitForEmptyBuffer(void)
{
    //wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)))
    2904:	e0 ec       	ldi	r30, 0xC0	; 192
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	85 ff       	sbrs	r24, 5
    290c:	fd cf       	rjmp	.-6      	; 0x2908 <libUART_WaitForEmptyBuffer+0x4>
    {
    }
    return;
}
    290e:	08 95       	ret

00002910 <libUART_SendArray>:
/// @param  data Pointer to array with data to send
/// @param  len Length of array
/// @return None
///
void libUART_SendArray(uint8_t *data, uint8_t len)
{
    2910:	df 92       	push	r13
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	d6 2e       	mov	r13, r22
    uint8_t byte_counter;

    for (byte_counter = 0; byte_counter < len; ++byte_counter)
    2920:	66 23       	and	r22, r22
    2922:	69 f0       	breq	.+26     	; 0x293e <libUART_SendArray+0x2e>
    2924:	c8 2f       	mov	r28, r24
    2926:	d9 2f       	mov	r29, r25
    2928:	f1 2c       	mov	r15, r1
void libUART_SendByte(uint8_t data)
{
    libUART_WaitForEmptyBuffer();

    //put data in buffer
    UDR0 = data;
    292a:	06 ec       	ldi	r16, 0xC6	; 198
    292c:	10 e0       	ldi	r17, 0x00	; 0
{
    uint8_t byte_counter;

    for (byte_counter = 0; byte_counter < len; ++byte_counter)
    {
        libUART_SendByte(data[byte_counter]);
    292e:	e9 90       	ld	r14, Y+
/// @param  data Byte to send
/// @return None
///
void libUART_SendByte(uint8_t data)
{
    libUART_WaitForEmptyBuffer();
    2930:	0e 94 82 14 	call	0x2904	; 0x2904 <libUART_WaitForEmptyBuffer>

    //put data in buffer
    UDR0 = data;
    2934:	f8 01       	movw	r30, r16
    2936:	e0 82       	st	Z, r14
///
void libUART_SendArray(uint8_t *data, uint8_t len)
{
    uint8_t byte_counter;

    for (byte_counter = 0; byte_counter < len; ++byte_counter)
    2938:	f3 94       	inc	r15
    293a:	fd 10       	cpse	r15, r13
    293c:	f8 cf       	rjmp	.-16     	; 0x292e <libUART_SendArray+0x1e>
    {
        libUART_SendByte(data[byte_counter]);
    }
    return;
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	08 95       	ret

0000294e <RTC_GetCurrentTime>:
///
/// @param  *time Pointer to struct where the result will be stored
/// @return bool true, if current time was successfully read, otherwise false.
///
bool RTC_GetCurrentTime(rtc_time_type *time)
{
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	ec 01       	movw	r28, r24
    sc_assert(time != NULL);
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	41 f4       	brne	.+16     	; 0x2968 <RTC_GetCurrentTime+0x1a>
    2958:	44 e2       	ldi	r20, 0x24	; 36
    295a:	5a e0       	ldi	r21, 0x0A	; 10
    295c:	62 e8       	ldi	r22, 0x82	; 130
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	89 e0       	ldi	r24, 0x09	; 9
    2962:	9a e0       	ldi	r25, 0x0A	; 10
    2964:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    RTC_GetYear(&time->year);
    2968:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <libMCP79510_GetYear>
    RTC_GetMonth(&time->month);
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <libMCP79510_GetMonth>
    RTC_GetDate(&time->date);
    2974:	ce 01       	movw	r24, r28
    2976:	02 96       	adiw	r24, 0x02	; 2
    2978:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <libMCP79510_GetDate>
    RTC_GetHour(&time->hour);
    297c:	ce 01       	movw	r24, r28
    297e:	03 96       	adiw	r24, 0x03	; 3
    2980:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <libMCP79510_GetHour>
    RTC_GetMinutes(&time->minute);
    2984:	ce 01       	movw	r24, r28
    2986:	04 96       	adiw	r24, 0x04	; 4
    2988:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <libMCP79510_GetMinute>
    RTC_GetSeconds(&time->second);
    298c:	ce 01       	movw	r24, r28
    298e:	05 96       	adiw	r24, 0x05	; 5
    2990:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <libMCP79510_GetSecond>
    return true;
}
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	08 95       	ret

0000299c <RTC_SetAlarmTime>:
///
/// @param  *time Pointer to struct with alarm time to set.
/// @return bool true, if new alarm time was set successfully.
///
bool RTC_SetAlarmTime(const rtc_time_type *time)
{
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    sc_assert(time != NULL);
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	41 f4       	brne	.+16     	; 0x29b6 <RTC_SetAlarmTime+0x1a>
    29a6:	4c ef       	ldi	r20, 0xFC	; 252
    29a8:	59 e0       	ldi	r21, 0x09	; 9
    29aa:	68 ea       	ldi	r22, 0xA8	; 168
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	81 ee       	ldi	r24, 0xE1	; 225
    29b0:	99 e0       	ldi	r25, 0x09	; 9
    29b2:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    RTC_SetAlarmHour(time->hour);
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <libMCP79510_SetAlarmHour>
    RTC_SetAlarmMinutes(time->minute);
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <libMCP79510_SetAlarmMinute>
    RTC_SetAlarmSeconds(time->second);
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <libMCP79510_SetAlarmSeconds>
    return true;
}
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <RTC_IsLeapYear>:
///
/// @param  year Year to check.
/// @return bool true if leap year, otherwise false.
///
bool RTC_IsLeapYear(uint16_t year)
{
    29d6:	ac 01       	movw	r20, r24
    bool is_leap_year = false;

    //All leap years are divisible by 4
    if (year % 4 == 0)
    29d8:	83 70       	andi	r24, 0x03	; 3
    29da:	99 27       	eor	r25, r25
    29dc:	89 2b       	or	r24, r25
    29de:	71 f5       	brne	.+92     	; 0x2a3c <RTC_IsLeapYear+0x66>
    {
        if (year % 100 != 0 || year % 400 == 0)
    29e0:	9a 01       	movw	r18, r20
    29e2:	36 95       	lsr	r19
    29e4:	27 95       	ror	r18
    29e6:	36 95       	lsr	r19
    29e8:	27 95       	ror	r18
    29ea:	ab e7       	ldi	r26, 0x7B	; 123
    29ec:	b4 e1       	ldi	r27, 0x14	; 20
    29ee:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <__umulhisi3>
    29f2:	96 95       	lsr	r25
    29f4:	87 95       	ror	r24
    29f6:	64 e6       	ldi	r22, 0x64	; 100
    29f8:	68 9f       	mul	r22, r24
    29fa:	90 01       	movw	r18, r0
    29fc:	69 9f       	mul	r22, r25
    29fe:	30 0d       	add	r19, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	42 17       	cp	r20, r18
    2a04:	53 07       	cpc	r21, r19
    2a06:	e1 f4       	brne	.+56     	; 0x2a40 <RTC_IsLeapYear+0x6a>
    2a08:	9a 01       	movw	r18, r20
    2a0a:	32 95       	swap	r19
    2a0c:	22 95       	swap	r18
    2a0e:	2f 70       	andi	r18, 0x0F	; 15
    2a10:	23 27       	eor	r18, r19
    2a12:	3f 70       	andi	r19, 0x0F	; 15
    2a14:	23 27       	eor	r18, r19
    2a16:	ae e3       	ldi	r26, 0x3E	; 62
    2a18:	ba e0       	ldi	r27, 0x0A	; 10
    2a1a:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <__umulhisi3>
    2a1e:	20 e9       	ldi	r18, 0x90	; 144
    2a20:	31 e0       	ldi	r19, 0x01	; 1
    2a22:	82 9f       	mul	r24, r18
    2a24:	b0 01       	movw	r22, r0
    2a26:	83 9f       	mul	r24, r19
    2a28:	70 0d       	add	r23, r0
    2a2a:	92 9f       	mul	r25, r18
    2a2c:	70 0d       	add	r23, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	46 17       	cp	r20, r22
    2a34:	57 07       	cpc	r21, r23
    2a36:	29 f0       	breq	.+10     	; 0x2a42 <RTC_IsLeapYear+0x6c>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	08 95       	ret
/// @param  year Year to check.
/// @return bool true if leap year, otherwise false.
///
bool RTC_IsLeapYear(uint16_t year)
{
    bool is_leap_year = false;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	08 95       	ret
    //All leap years are divisible by 4
    if (year % 4 == 0)
    {
        if (year % 100 != 0 || year % 400 == 0)
        {
            is_leap_year = true;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return is_leap_year;
}
    2a42:	08 95       	ret

00002a44 <RTC_AddYears>:
/// @param  years Number of years to add.
/// @return None
///
void RTC_AddYears(rtc_time_type *time, uint8_t years)
{
    sc_assert(time != NULL);
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	41 f4       	brne	.+16     	; 0x2a58 <RTC_AddYears+0x14>
    2a48:	47 ee       	ldi	r20, 0xE7	; 231
    2a4a:	58 e0       	ldi	r21, 0x08	; 8
    2a4c:	68 e7       	ldi	r22, 0x78	; 120
    2a4e:	71 e0       	ldi	r23, 0x01	; 1
    2a50:	8c ec       	ldi	r24, 0xCC	; 204
    2a52:	98 e0       	ldi	r25, 0x08	; 8
    2a54:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    time->year += years;
    2a58:	fc 01       	movw	r30, r24
    2a5a:	20 81       	ld	r18, Z
    2a5c:	62 0f       	add	r22, r18
    2a5e:	60 83       	st	Z, r22

    sc_assert(time->year < 100);
    2a60:	64 36       	cpi	r22, 0x64	; 100
    2a62:	40 f0       	brcs	.+16     	; 0x2a74 <RTC_AddYears+0x30>
    2a64:	4b eb       	ldi	r20, 0xBB	; 187
    2a66:	58 e0       	ldi	r21, 0x08	; 8
    2a68:	6b e7       	ldi	r22, 0x7B	; 123
    2a6a:	71 e0       	ldi	r23, 0x01	; 1
    2a6c:	80 ea       	ldi	r24, 0xA0	; 160
    2a6e:	98 e0       	ldi	r25, 0x08	; 8
    2a70:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    2a74:	08 95       	ret

00002a76 <RTC_AddMonths>:
/// @param  *time Pointer to struct with time.
/// @param  months Number of months to add.
/// @return None
///
void RTC_AddMonths(rtc_time_type *time, uint8_t months)
{
    2a76:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	41 f4       	brne	.+16     	; 0x2a8c <RTC_AddMonths+0x16>
    2a7c:	4f e0       	ldi	r20, 0x0F	; 15
    2a7e:	59 e0       	ldi	r21, 0x09	; 9
    2a80:	62 e6       	ldi	r22, 0x62	; 98
    2a82:	71 e0       	ldi	r23, 0x01	; 1
    2a84:	84 ef       	ldi	r24, 0xF4	; 244
    2a86:	98 e0       	ldi	r25, 0x08	; 8
    2a88:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry =  (time->month + months) / 12;
    2a8c:	21 81       	ldd	r18, Z+1	; 0x01
    2a8e:	86 2f       	mov	r24, r22
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	82 0f       	add	r24, r18
    2a94:	91 1d       	adc	r25, r1
    2a96:	6c e0       	ldi	r22, 0x0C	; 12
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodhi4>
    time->month = (time->month + months) % 12;
    2a9e:	81 83       	std	Z+1, r24	; 0x01

    if (carry > 0)
    2aa0:	61 15       	cp	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <RTC_AddMonths+0x36>
    {
        RTC_AddYears(time, carry);
    2aa6:	cf 01       	movw	r24, r30
    2aa8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <RTC_AddYears>
    2aac:	08 95       	ret

00002aae <RTC_AddDays>:
/// @param  *time Pointer to struct with time.
/// @param  days Number of days to add.
/// @return None
///
void RTC_AddDays(rtc_time_type *time, uint8_t days)
{
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	ec 01       	movw	r28, r24
    2ab8:	06 2f       	mov	r16, r22
    sc_assert(time != NULL);
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	41 f4       	brne	.+16     	; 0x2ace <RTC_AddDays+0x20>
    2abe:	4c e5       	ldi	r20, 0x5C	; 92
    2ac0:	59 e0       	ldi	r21, 0x09	; 9
    2ac2:	62 e4       	ldi	r22, 0x42	; 66
    2ac4:	71 e0       	ldi	r23, 0x01	; 1
    2ac6:	81 e4       	ldi	r24, 0x41	; 65
    2ac8:	99 e0       	ldi	r25, 0x09	; 9
    2aca:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint16_t carry;
    uint8_t days_in_month;

    days_in_month = days_in_months[time->month - 1];
    2ace:	99 81       	ldd	r25, Y+1	; 0x01
    2ad0:	e9 2f       	mov	r30, r25
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	ea 52       	subi	r30, 0x2A	; 42
    2ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad8:	10 81       	ld	r17, Z
    if (time->month == FEBRUARY && RTC_IsLeapYear(2000 + (uint16_t)time->year))
    2ada:	92 30       	cpi	r25, 0x02	; 2
    2adc:	41 f4       	brne	.+16     	; 0x2aee <RTC_AddDays+0x40>
    2ade:	88 81       	ld	r24, Y
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	80 53       	subi	r24, 0x30	; 48
    2ae4:	98 4f       	sbci	r25, 0xF8	; 248
    2ae6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <RTC_IsLeapYear>
    2aea:	81 11       	cpse	r24, r1
    {
        ++days_in_month;
    2aec:	1f 5f       	subi	r17, 0xFF	; 255
    }

    carry = (time->date + days) / days_in_month;
    2aee:	2a 81       	ldd	r18, Y+2	; 0x02
    2af0:	80 2f       	mov	r24, r16
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	82 0f       	add	r24, r18
    2af6:	91 1d       	adc	r25, r1
    2af8:	61 2f       	mov	r22, r17
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodhi4>
    2b00:	26 2f       	mov	r18, r22
    2b02:	37 2f       	mov	r19, r23
    time->date = (time->date + days) % days_in_month;
    2b04:	8a 83       	std	Y+2, r24	; 0x02

    //TODO: Fix cases when carry > 1
    sc_assert(carry < 2);
    2b06:	22 30       	cpi	r18, 0x02	; 2
    2b08:	31 05       	cpc	r19, r1
    2b0a:	40 f0       	brcs	.+16     	; 0x2b1c <RTC_AddDays+0x6e>
    2b0c:	47 e3       	ldi	r20, 0x37	; 55
    2b0e:	59 e0       	ldi	r21, 0x09	; 9
    2b10:	60 e5       	ldi	r22, 0x50	; 80
    2b12:	71 e0       	ldi	r23, 0x01	; 1
    2b14:	8c e1       	ldi	r24, 0x1C	; 28
    2b16:	99 e0       	ldi	r25, 0x09	; 9
    2b18:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    if (carry > 0)
    2b1c:	23 2b       	or	r18, r19
    2b1e:	19 f0       	breq	.+6      	; 0x2b26 <RTC_AddDays+0x78>
    {
        RTC_AddMonths(time, carry);
    2b20:	ce 01       	movw	r24, r28
    2b22:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <RTC_AddMonths>
    }
    return;
}
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	08 95       	ret

00002b30 <RTC_AddHours>:
/// @param  *time Pointer to struct with time.
/// @param  hours Number of hours to add.
/// @return None
///
void RTC_AddHours(rtc_time_type *time, uint8_t hours)
{
    2b30:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	41 f4       	brne	.+16     	; 0x2b46 <RTC_AddHours+0x16>
    2b36:	44 e8       	ldi	r20, 0x84	; 132
    2b38:	59 e0       	ldi	r21, 0x09	; 9
    2b3a:	6c e2       	ldi	r22, 0x2C	; 44
    2b3c:	71 e0       	ldi	r23, 0x01	; 1
    2b3e:	89 e6       	ldi	r24, 0x69	; 105
    2b40:	99 e0       	ldi	r25, 0x09	; 9
    2b42:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry =  (time->hour + hours) / 24;
    2b46:	23 81       	ldd	r18, Z+3	; 0x03
    2b48:	86 2f       	mov	r24, r22
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	82 0f       	add	r24, r18
    2b4e:	91 1d       	adc	r25, r1
    2b50:	68 e1       	ldi	r22, 0x18	; 24
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodhi4>
    time->hour = (time->hour + hours) % 24;
    2b58:	83 83       	std	Z+3, r24	; 0x03

    if (carry > 0)
    2b5a:	61 15       	cp	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	19 f0       	breq	.+6      	; 0x2b66 <RTC_AddHours+0x36>
    {
        RTC_AddDays(time, carry);
    2b60:	cf 01       	movw	r24, r30
    2b62:	0e 94 57 15 	call	0x2aae	; 0x2aae <RTC_AddDays>
    2b66:	08 95       	ret

00002b68 <RTC_AddMinutes>:
/// @param  *time Pointer to struct with time.
/// @param  minutes Number of minutes to add.
/// @return None
///
void RTC_AddMinutes(rtc_time_type *time, uint8_t minutes)
{
    2b68:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	41 f4       	brne	.+16     	; 0x2b7e <RTC_AddMinutes+0x16>
    2b6e:	4c ea       	ldi	r20, 0xAC	; 172
    2b70:	59 e0       	ldi	r21, 0x09	; 9
    2b72:	66 e1       	ldi	r22, 0x16	; 22
    2b74:	71 e0       	ldi	r23, 0x01	; 1
    2b76:	81 e9       	ldi	r24, 0x91	; 145
    2b78:	99 e0       	ldi	r25, 0x09	; 9
    2b7a:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry = (time->minute + minutes) / 60;
    2b7e:	24 81       	ldd	r18, Z+4	; 0x04
    2b80:	86 2f       	mov	r24, r22
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	82 0f       	add	r24, r18
    2b86:	91 1d       	adc	r25, r1
    2b88:	6c e3       	ldi	r22, 0x3C	; 60
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodhi4>
    time->minute = (time->minute + minutes) % 60;
    2b90:	84 83       	std	Z+4, r24	; 0x04

    if (carry > 0)
    2b92:	61 15       	cp	r22, r1
    2b94:	71 05       	cpc	r23, r1
    2b96:	19 f0       	breq	.+6      	; 0x2b9e <RTC_AddMinutes+0x36>
    {
        RTC_AddHours(time, carry);
    2b98:	cf 01       	movw	r24, r30
    2b9a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <RTC_AddHours>
    2b9e:	08 95       	ret

00002ba0 <RTC_AddSeconds>:
/// @param  *time Pointer to struct with time.
/// @param  seconds Number of seconds to add.
/// @return None
///
void RTC_AddSeconds(rtc_time_type *time, uint8_t seconds)
{
    2ba0:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	41 f4       	brne	.+16     	; 0x2bb6 <RTC_AddSeconds+0x16>
    2ba6:	44 ed       	ldi	r20, 0xD4	; 212
    2ba8:	59 e0       	ldi	r21, 0x09	; 9
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	71 e0       	ldi	r23, 0x01	; 1
    2bae:	89 eb       	ldi	r24, 0xB9	; 185
    2bb0:	99 e0       	ldi	r25, 0x09	; 9
    2bb2:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry = (time->second + seconds) / 60;
    2bb6:	25 81       	ldd	r18, Z+5	; 0x05
    2bb8:	86 2f       	mov	r24, r22
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	82 0f       	add	r24, r18
    2bbe:	91 1d       	adc	r25, r1
    2bc0:	6c e3       	ldi	r22, 0x3C	; 60
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodhi4>
    time->second = (time->second + seconds) % 60;
    2bc8:	85 83       	std	Z+5, r24	; 0x05

    if (carry > 0)
    2bca:	61 15       	cp	r22, r1
    2bcc:	71 05       	cpc	r23, r1
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <RTC_AddSeconds+0x36>
    {
        RTC_AddMinutes(time, carry);
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <RTC_AddMinutes>
    2bd6:	08 95       	ret

00002bd8 <Timer_TimeDifference>:
///
/// @param  time_ms Timestamp in ms to compare with system timer
/// @return uint32_t The difference in ms beetween timestamp and system timer
///
uint32_t Timer_TimeDifference(uint32_t time_ms)
{
    2bd8:	cf 92       	push	r12
    2bda:	df 92       	push	r13
    2bdc:	ef 92       	push	r14
    2bde:	ff 92       	push	r15
    2be0:	6b 01       	movw	r12, r22
    2be2:	7c 01       	movw	r14, r24
    uint32_t time_difference;
    uint32_t current_time = Timer_GetMilliseconds();
    2be4:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>

    //Check for timer overflow
    if (time_ms > current_time)
    2be8:	6c 15       	cp	r22, r12
    2bea:	7d 05       	cpc	r23, r13
    2bec:	8e 05       	cpc	r24, r14
    2bee:	9f 05       	cpc	r25, r15
    2bf0:	68 f4       	brcc	.+26     	; 0x2c0c <Timer_TimeDifference+0x34>
    {
        time_difference = (TIMERMAX - time_ms) + current_time;
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8c 19       	sub	r24, r12
    2bf8:	9d 09       	sbc	r25, r13
    2bfa:	ae 09       	sbc	r26, r14
    2bfc:	bf 09       	sbc	r27, r15
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	61 50       	subi	r22, 0x01	; 1
    2c04:	71 09       	sbc	r23, r1
    2c06:	81 09       	sbc	r24, r1
    2c08:	91 09       	sbc	r25, r1
    2c0a:	04 c0       	rjmp	.+8      	; 0x2c14 <Timer_TimeDifference+0x3c>
    }
    else
    {
        time_difference = current_time - time_ms;
    2c0c:	6c 19       	sub	r22, r12
    2c0e:	7d 09       	sbc	r23, r13
    2c10:	8e 09       	sbc	r24, r14
    2c12:	9f 09       	sbc	r25, r15
    }
    return time_difference;
}
    2c14:	ff 90       	pop	r15
    2c16:	ef 90       	pop	r14
    2c18:	df 90       	pop	r13
    2c1a:	cf 90       	pop	r12
    2c1c:	08 95       	ret

00002c1e <DumpPacket>:
    return next_state;
}

#ifdef DEBUG_ENABLE
static void DumpPacket(packet_frame_type *packet)
{
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	ec 01       	movw	r28, r24
    DEBUG("<PCK>");
    2c24:	84 ef       	ldi	r24, 0xF4	; 244
    2c26:	9b e0       	ldi	r25, 0x0B	; 11
    2c28:	9f 93       	push	r25
    2c2a:	8f 93       	push	r24
    2c2c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%u,", packet->header.target);
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	1f 92       	push	r1
    2c34:	8f 93       	push	r24
    2c36:	80 ef       	ldi	r24, 0xF0	; 240
    2c38:	9b e0       	ldi	r25, 0x0B	; 11
    2c3a:	9f 93       	push	r25
    2c3c:	8f 93       	push	r24
    2c3e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%u,", packet->header.source);
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	1f 92       	push	r1
    2c46:	8f 93       	push	r24
    2c48:	8c ee       	ldi	r24, 0xEC	; 236
    2c4a:	9b e0       	ldi	r25, 0x0B	; 11
    2c4c:	9f 93       	push	r25
    2c4e:	8f 93       	push	r24
    2c50:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%u,", packet->header.ack);
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	1f 92       	push	r1
    2c58:	8f 93       	push	r24
    2c5a:	88 ee       	ldi	r24, 0xE8	; 232
    2c5c:	9b e0       	ldi	r25, 0x0B	; 11
    2c5e:	9f 93       	push	r25
    2c60:	8f 93       	push	r24
    2c62:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%d,", packet->header.rssi);
    2c66:	2c 81       	ldd	r18, Y+4	; 0x04
    2c68:	82 2f       	mov	r24, r18
    2c6a:	99 27       	eor	r25, r25
    2c6c:	87 fd       	sbrc	r24, 7
    2c6e:	90 95       	com	r25
    2c70:	9f 93       	push	r25
    2c72:	2f 93       	push	r18
    2c74:	84 ee       	ldi	r24, 0xE4	; 228
    2c76:	9b e0       	ldi	r25, 0x0B	; 11
    2c78:	9f 93       	push	r25
    2c7a:	8f 93       	push	r24
    2c7c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%u,", packet->header.total_size);
    2c80:	88 81       	ld	r24, Y
    2c82:	1f 92       	push	r1
    2c84:	8f 93       	push	r24
    2c86:	80 ee       	ldi	r24, 0xE0	; 224
    2c88:	9b e0       	ldi	r25, 0x0B	; 11
    2c8a:	9f 93       	push	r25
    2c8c:	8f 93       	push	r24
    2c8e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("20%02u-%02u-%02u %02u:%02u:%02u,",
    2c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c94:	1f 92       	push	r1
    2c96:	8f 93       	push	r24
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	1f 92       	push	r1
    2c9c:	8f 93       	push	r24
    2c9e:	88 85       	ldd	r24, Y+8	; 0x08
    2ca0:	1f 92       	push	r1
    2ca2:	8f 93       	push	r24
    2ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca6:	1f 92       	push	r1
    2ca8:	8f 93       	push	r24
    2caa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cac:	1f 92       	push	r1
    2cae:	8f 93       	push	r24
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	1f 92       	push	r1
    2cb4:	8f 93       	push	r24
    2cb6:	8f eb       	ldi	r24, 0xBF	; 191
    2cb8:	9b e0       	ldi	r25, 0x0B	; 11
    2cba:	9f 93       	push	r25
    2cbc:	8f 93       	push	r24
    2cbe:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
          packet->content.timestamp.month,
          packet->content.timestamp.date,
          packet->content.timestamp.hour,
          packet->content.timestamp.minute,
          packet->content.timestamp.second);
    DEBUG("%u,", packet->content.type);
    2cc2:	8d b7       	in	r24, 0x3d	; 61
    2cc4:	9e b7       	in	r25, 0x3e	; 62
    2cc6:	84 96       	adiw	r24, 0x24	; 36
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	9e bf       	out	0x3e, r25	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	8d bf       	out	0x3d, r24	; 61
    2cd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cd4:	1f 92       	push	r1
    2cd6:	8f 93       	push	r24
    2cd8:	8b eb       	ldi	r24, 0xBB	; 187
    2cda:	9b e0       	ldi	r25, 0x0B	; 11
    2cdc:	9f 93       	push	r25
    2cde:	8f 93       	push	r24
    2ce0:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("%u\r\n", packet->content.size);
    2ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ce6:	1f 92       	push	r1
    2ce8:	8f 93       	push	r24
    2cea:	86 eb       	ldi	r24, 0xB6	; 182
    2cec:	9b e0       	ldi	r25, 0x0B	; 11
    2cee:	9f 93       	push	r25
    2cf0:	8f 93       	push	r24
    2cf2:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    2cf6:	8d b7       	in	r24, 0x3d	; 61
    2cf8:	9e b7       	in	r25, 0x3e	; 62
    2cfa:	08 96       	adiw	r24, 0x08	; 8
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	9e bf       	out	0x3e, r25	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	8d bf       	out	0x3d, r24	; 61
}
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <HandlePayload>:
{
    return (packet_frame.header.target > 0);
}

static bool HandlePayload(void)
{
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	c1 54       	subi	r28, 0x41	; 65
    2d16:	d1 09       	sbc	r29, r1
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    uint8_t length;
    uint8_t data_buffer[RFM_FIFO_SIZE - 1];

    libRFM69_ReadFromFIFO(data_buffer, 1);
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	ce 01       	movw	r24, r28
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	0e 94 3b 13 	call	0x2676	; 0x2676 <libRFM69_ReadFromFIFO>
    length = data_buffer[0];
    2d2c:	69 81       	ldd	r22, Y+1	; 0x01

    if (length > RFM_FIFO_SIZE - 1)
    2d2e:	62 34       	cpi	r22, 0x42	; 66
    2d30:	80 f0       	brcs	.+32     	; 0x2d52 <HandlePayload+0x46>
    {
        ERROR("Size of data packet is larger then the FIFO");
    2d32:	83 e1       	ldi	r24, 0x13	; 19
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	9f 93       	push	r25
    2d38:	8f 93       	push	r24
    2d3a:	8d e2       	ldi	r24, 0x2D	; 45
    2d3c:	9c e0       	ldi	r25, 0x0C	; 12
    2d3e:	9f 93       	push	r25
    2d40:	8f 93       	push	r24
    2d42:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        return false;
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	3b c0       	rjmp	.+118    	; 0x2dc8 <HandlePayload+0xbc>
    }

    libRFM69_ReadFromFIFO(&data_buffer[1], length);
    2d52:	ce 01       	movw	r24, r28
    2d54:	02 96       	adiw	r24, 0x02	; 2
    2d56:	0e 94 3b 13 	call	0x2676	; 0x2676 <libRFM69_ReadFromFIFO>
    memcpy(&packet_frame.header, data_buffer, sizeof(packet_header_type));
    2d5a:	85 e0       	ldi	r24, 0x05	; 5
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	31 96       	adiw	r30, 0x01	; 1
    2d60:	a5 e8       	ldi	r26, 0x85	; 133
    2d62:	b3 e0       	ldi	r27, 0x03	; 3
    2d64:	01 90       	ld	r0, Z+
    2d66:	0d 92       	st	X+, r0
    2d68:	8a 95       	dec	r24
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <HandlePayload+0x58>
    memcpy(&packet_frame.content, &data_buffer[sizeof(packet_header_type)],
    2d6c:	8c e1       	ldi	r24, 0x1C	; 28
    2d6e:	fe 01       	movw	r30, r28
    2d70:	36 96       	adiw	r30, 0x06	; 6
    2d72:	aa e8       	ldi	r26, 0x8A	; 138
    2d74:	b3 e0       	ldi	r27, 0x03	; 3
    2d76:	01 90       	ld	r0, Z+
    2d78:	0d 92       	st	X+, r0
    2d7a:	8a 95       	dec	r24
    2d7c:	e1 f7       	brne	.-8      	; 0x2d76 <HandlePayload+0x6a>

    //TODO: Fix this!
    //packet_frame.header.rssi = libRFM69_GetRSSI();

#ifdef DEBUG_ENABLE
    DumpPacket(&packet_frame);
    2d7e:	85 e8       	ldi	r24, 0x85	; 133
    2d80:	93 e0       	ldi	r25, 0x03	; 3
    2d82:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <DumpPacket>
#endif

    if (IsPacketTypeValid(packet_frame.content.type) &&
    2d86:	e0 91 90 03 	lds	r30, 0x0390
    2d8a:	e4 30       	cpi	r30, 0x04	; 4
    2d8c:	70 f4       	brcc	.+28     	; 0x2daa <HandlePayload+0x9e>
            packet_handlers[packet_frame.content.type] != NULL)
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	ee 0f       	add	r30, r30
    2d92:	ff 1f       	adc	r31, r31
    2d94:	e3 58       	subi	r30, 0x83	; 131
    2d96:	fc 4f       	sbci	r31, 0xFC	; 252
    2d98:	01 90       	ld	r0, Z+
    2d9a:	f0 81       	ld	r31, Z
    2d9c:	e0 2d       	mov	r30, r0

#ifdef DEBUG_ENABLE
    DumpPacket(&packet_frame);
#endif

    if (IsPacketTypeValid(packet_frame.content.type) &&
    2d9e:	30 97       	sbiw	r30, 0x00	; 0
    2da0:	21 f0       	breq	.+8      	; 0x2daa <HandlePayload+0x9e>
            packet_handlers[packet_frame.content.type] != NULL)
    {
        return packet_handlers[packet_frame.content.type](&packet_frame);
    2da2:	85 e8       	ldi	r24, 0x85	; 133
    2da4:	93 e0       	ldi	r25, 0x03	; 3
    2da6:	09 95       	icall
    2da8:	0f c0       	rjmp	.+30     	; 0x2dc8 <HandlePayload+0xbc>
    }
    else
    {
        INFO("No packet handler for packet type %u");
    2daa:	83 e1       	ldi	r24, 0x13	; 19
    2dac:	92 e0       	ldi	r25, 0x02	; 2
    2dae:	9f 93       	push	r25
    2db0:	8f 93       	push	r24
    2db2:	8a ef       	ldi	r24, 0xFA	; 250
    2db4:	9b e0       	ldi	r25, 0x0B	; 11
    2db6:	9f 93       	push	r25
    2db8:	8f 93       	push	r24
    2dba:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        return false;
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2dc8:	cf 5b       	subi	r28, 0xBF	; 191
    2dca:	df 4f       	sbci	r29, 0xFF	; 255
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	08 95       	ret

00002ddc <Transceiver_Init>:
/// @param  None
/// @return None
///
void Transceiver_Init(void)
{
    libRFM69_Init();
    2ddc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <libRFM69_Init>
    //IMPORTANT: Only disable encryption during development!
    libRFM69_EnableEncryption(false);
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <libRFM69_EnableEncryption>
    libRFM69_EnableSequencer(true);
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <libRFM69_EnableSequencer>
    libRFM69_EnableListenMode(false);
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <libRFM69_EnableListenMode>
    libRFM69_SetPacketRxDelay(3);
    2df2:	83 e0       	ldi	r24, 0x03	; 3
    2df4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <libRFM69_SetPacketRxDelay>
    libRFM69_SetMode(RFM_STANDBY);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
    libRFM69_WaitForModeReady();
    2dfe:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>
    libRFM69_SetPreambleLength(14);
    2e02:	8e e0       	ldi	r24, 0x0E	; 14
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <libRFM69_SetPreambleLength>
    libRFM69_SetLNAGain(RFM_LNA_GAIN_AUTO);
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	0e 94 2b 12 	call	0x2456	; 0x2456 <libRFM69_SetLNAGain>
    libRFM69_SetLNAInputImpedance(RFM_LNA_ZIN_200OHM);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	0e 94 4d 12 	call	0x249a	; 0x249a <libRFM69_SetLNAInputImpedance>
    libRFM69_EnableAFCLowBeta(false);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 77 12 	call	0x24ee	; 0x24ee <libRFM69_EnableAFCLowBeta>
    libRFM69_EnableContinuousDAGC(false);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	0e 94 a7 12 	call	0x254e	; 0x254e <libRFM69_EnableContinuousDAGC>
    libRFM69_SetBitRate(4800);
    2e22:	60 ec       	ldi	r22, 0xC0	; 192
    2e24:	72 e1       	ldi	r23, 0x12	; 18
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <libRFM69_SetBitRate>
    libRFM69_SetDataMode(RFM_PACKET_DATA);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 07 10 	call	0x200e	; 0x200e <libRFM69_SetDataMode>
    libRFM69_SetModulationType(RFM_FSK);
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 24 10 	call	0x2048	; 0x2048 <libRFM69_SetModulationType>
    libRFM69_SetModulationShaping(0x00);
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	0e 94 4a 10 	call	0x2094	; 0x2094 <libRFM69_SetModulationShaping>
    libRFM69_SetFrequencyDeviation(5000);
    2e40:	88 e8       	ldi	r24, 0x88	; 136
    2e42:	93 e1       	ldi	r25, 0x13	; 19
    2e44:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <libRFM69_SetFrequencyDeviation>
    libRFM69_SetCarrierFrequency(868000000);
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	71 ea       	ldi	r23, 0xA1	; 161
    2e4c:	8c eb       	ldi	r24, 0xBC	; 188
    2e4e:	93 e3       	ldi	r25, 0x33	; 51
    2e50:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <libRFM69_SetCarrierFrequency>
    libRFM69_EnableSyncWordGeneration(true);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	0e 94 cc 11 	call	0x2398	; 0x2398 <libRFM69_EnableSyncWordGeneration>
    libRFM69_SetFIFOFillCondition(RFM_FIFO_FILL_AUTO);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <libRFM69_SetFIFOFillCondition>
    libRFM69_SetRSSIThreshold(-90);
    2e60:	86 ea       	ldi	r24, 0xA6	; 166
    2e62:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <libRFM69_SetRSSIThreshold>
    libRFM69_SetSyncWordSize(6);
    2e66:	86 e0       	ldi	r24, 0x06	; 6
    2e68:	0e 94 39 11 	call	0x2272	; 0x2272 <libRFM69_SetSyncWordSize>
    libRFM69_SetSyncWord(Config_GetNetworkId(), 6);
    2e6c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Config_GetNetworkId>
    2e70:	66 e0       	ldi	r22, 0x06	; 6
    2e72:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <libRFM69_SetSyncWord>
    libRFM69_SetTXStartCondition(RFM_TX_START_NOT_EMPTY);
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <libRFM69_SetTXStartCondition>
    libRFM69_SetNodeAddress(Config_GetNodeId());
    2e7c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Config_GetNodeId>
    2e80:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <libRFM69_SetNodeAddress>
    libRFM69_SetBroadcastAddress(BROADCAST_ADDRESS);
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <libRFM69_SetBroadcastAddress>
    libRFM69_SetAddressFiltering(RFM_ADDRESS_FILTER_ADDRESS_BROADCAST);
    2e8a:	82 e0       	ldi	r24, 0x02	; 2
    2e8c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <libRFM69_SetAddressFiltering>
    libRFM69_ClearFIFO();
    2e90:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <libRFM69_ClearFIFO>
    libRFM69_SetPacketFormat(RFM_PACKET_VARIABLE_LEN);
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <libRFM69_SetPacketFormat>
    libRFM69_EnableCRC(true);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <libRFM69_EnableCRC>
    libRFM69_EnableCRCAutoClear(true);
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <libRFM69_EnableCRCAutoClear>
    libRFM69_SetClockOutFrequency(RFM_CLKOUT_OFF);
    2ea6:	87 e0       	ldi	r24, 0x07	; 7
    2ea8:	0e 94 09 12 	call	0x2412	; 0x2412 <libRFM69_SetClockOutFrequency>
    libRFM69_EnableOCP(false);
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <libRFM69_EnableOCP>
    libRFM69_SetPowerAmplifierMode(RFM_PWR_3_4);
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <libRFM69_SetPowerAmplifierMode>
    libRFM69_SetPowerLevel(28);
    2eb8:	8c e1       	ldi	r24, 0x1C	; 28
    2eba:	0e 94 b5 10 	call	0x216a	; 0x216a <libRFM69_SetPowerLevel>
    libRFM69_EnableHighPowerSetting(false);
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <libRFM69_EnableHighPowerSetting>
    libRFM69_SetMode(RFM_STANDBY);
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
    libRFM69_WaitForModeReady();
    2eca:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>

    memset(&packet_frame, 0, sizeof(packet_frame));
    2ece:	83 e2       	ldi	r24, 0x23	; 35
    2ed0:	e5 e8       	ldi	r30, 0x85	; 133
    2ed2:	f3 e0       	ldi	r31, 0x03	; 3
    2ed4:	df 01       	movw	r26, r30
    2ed6:	1d 92       	st	X+, r1
    2ed8:	8a 95       	dec	r24
    2eda:	e9 f7       	brne	.-6      	; 0x2ed6 <Transceiver_Init+0xfa>
    transceiver_state = TR_STATE_IDLE;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	80 93 a8 03 	sts	0x03A8, r24

    INFO("Transceiver initiated");
    2ee2:	85 e4       	ldi	r24, 0x45	; 69
    2ee4:	92 e0       	ldi	r25, 0x02	; 2
    2ee6:	9f 93       	push	r25
    2ee8:	8f 93       	push	r24
    2eea:	8d e4       	ldi	r24, 0x4D	; 77
    2eec:	9d e0       	ldi	r25, 0x0D	; 13
    2eee:	9f 93       	push	r25
    2ef0:	8f 93       	push	r24
    2ef2:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	08 95       	ret

00002f00 <Transceiver_Update>:
/// @param  None
/// @return None
///
void Transceiver_Update(void)
{
    switch (transceiver_state)
    2f00:	80 91 a8 03 	lds	r24, 0x03A8
    2f04:	82 30       	cpi	r24, 0x02	; 2
    2f06:	b1 f1       	breq	.+108    	; 0x2f74 <Transceiver_Update+0x74>
    2f08:	28 f4       	brcc	.+10     	; 0x2f14 <Transceiver_Update+0x14>
    2f0a:	88 23       	and	r24, r24
    2f0c:	51 f0       	breq	.+20     	; 0x2f22 <Transceiver_Update+0x22>
    2f0e:	81 30       	cpi	r24, 0x01	; 1
    2f10:	c9 f0       	breq	.+50     	; 0x2f44 <Transceiver_Update+0x44>
    2f12:	54 c1       	rjmp	.+680    	; 0x31bc <Transceiver_Update+0x2bc>
    2f14:	83 30       	cpi	r24, 0x03	; 3
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <Transceiver_Update+0x1a>
    2f18:	7b c0       	rjmp	.+246    	; 0x3010 <Transceiver_Update+0x110>
    2f1a:	84 30       	cpi	r24, 0x04	; 4
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <Transceiver_Update+0x20>
    2f1e:	42 c1       	rjmp	.+644    	; 0x31a4 <Transceiver_Update+0x2a4>
    2f20:	4d c1       	rjmp	.+666    	; 0x31bc <Transceiver_Update+0x2bc>
    {
        case TR_STATE_NO_INIT:
            WARNING("Transceiver not initialized");
    2f22:	82 e3       	ldi	r24, 0x32	; 50
    2f24:	92 e0       	ldi	r25, 0x02	; 2
    2f26:	9f 93       	push	r25
    2f28:	8f 93       	push	r24
    2f2a:	80 e2       	ldi	r24, 0x20	; 32
    2f2c:	9d e0       	ldi	r25, 0x0D	; 13
    2f2e:	9f 93       	push	r25
    2f30:	8f 93       	push	r24
    2f32:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            Transceiver_Init();
    2f36:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Transceiver_Init>
            break;
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	08 95       	ret

static transceiver_state_type IdleStateMachine(void)
{
    transceiver_state_type next_state = TR_STATE_IDLE;

    if (PacketToSend())
    2f44:	80 91 86 03 	lds	r24, 0x0386
    2f48:	88 23       	and	r24, r24
    2f4a:	81 f0       	breq	.+32     	; 0x2f6c <Transceiver_Update+0x6c>
    {
        INFO("Sending packet from buffer");
    2f4c:	81 e2       	ldi	r24, 0x21	; 33
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	9f 93       	push	r25
    2f52:	8f 93       	push	r24
    2f54:	85 ec       	ldi	r24, 0xC5	; 197
    2f56:	9c e0       	ldi	r25, 0x0C	; 12
    2f58:	9f 93       	push	r25
    2f5a:	8f 93       	push	r24
    2f5c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
        next_state = TR_STATE_SENDING;
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <Transceiver_Update+0x6e>
    }
}

static transceiver_state_type IdleStateMachine(void)
{
    transceiver_state_type next_state = TR_STATE_IDLE;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
            WARNING("Transceiver not initialized");
            Transceiver_Init();
            break;

        case TR_STATE_IDLE:
            transceiver_state = IdleStateMachine();
    2f6e:	80 93 a8 03 	sts	0x03A8, r24
            break;
    2f72:	08 95       	ret

static transceiver_state_type ListeningStateMachine(void)
{
    static transceiver_listening_state_type state = TR_STATE_LISTENING_INIT;

    switch (state)
    2f74:	80 91 7c 03 	lds	r24, 0x037C
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	f1 f0       	breq	.+60     	; 0x2fb8 <Transceiver_Update+0xb8>
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <Transceiver_Update+0x84>
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	61 f1       	breq	.+88     	; 0x2fda <Transceiver_Update+0xda>
    2f82:	3a c0       	rjmp	.+116    	; 0x2ff8 <Transceiver_Update+0xf8>
    {
        case TR_STATE_LISTENING_INIT:
            if (libRFM69_IsPayloadReady())
    2f84:	0e 94 02 13 	call	0x2604	; 0x2604 <libRFM69_IsPayloadReady>
    2f88:	88 23       	and	r24, r24
    2f8a:	51 f0       	breq	.+20     	; 0x2fa0 <Transceiver_Update+0xa0>
            {
                DEBUG("Init listen: restart RX\r\n");
    2f8c:	8b ea       	ldi	r24, 0xAB	; 171
    2f8e:	9c e0       	ldi	r25, 0x0C	; 12
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                libRFM69_RestartRx();
    2f98:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <libRFM69_RestartRx>
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
            }

            libRFM69_EnableHighPowerSetting(false);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <libRFM69_EnableHighPowerSetting>
            libRFM69_SetMode(RFM_RECEIVER);
    2fa6:	84 e0       	ldi	r24, 0x04	; 4
    2fa8:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
            libRFM69_WaitForModeReady();
    2fac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>
            state = TR_STATE_LISTENING_WAITING;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	80 93 7c 03 	sts	0x037C, r24
    2fb6:	28 c0       	rjmp	.+80     	; 0x3008 <Transceiver_Update+0x108>
            break;

        case TR_STATE_LISTENING_WAITING:
            if (libRFM69_IsPayloadReady())
    2fb8:	0e 94 02 13 	call	0x2604	; 0x2604 <libRFM69_IsPayloadReady>
    2fbc:	88 23       	and	r24, r24
    2fbe:	21 f1       	breq	.+72     	; 0x3008 <Transceiver_Update+0x108>
            {
                libRFM69_SetMode(RFM_STANDBY);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
                libRFM69_WaitForModeReady();
    2fc6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>

                HandlePayload();
    2fca:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HandlePayload>
                libRFM69_SetMode(RFM_RECEIVER);
    2fce:	84 e0       	ldi	r24, 0x04	; 4
    2fd0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
                libRFM69_WaitForModeReady();
    2fd4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>
    2fd8:	17 c0       	rjmp	.+46     	; 0x3008 <Transceiver_Update+0x108>

            }
            break;

        case TR_STATE_LISTENING_SEND_ACK:
            if (libRFM69_IsModeReady())
    2fda:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <libRFM69_IsModeReady>
    2fde:	88 23       	and	r24, r24
    2fe0:	99 f0       	breq	.+38     	; 0x3008 <Transceiver_Update+0x108>
            {
                DEBUG("ACK mode ready\r\n");
    2fe2:	8a e9       	ldi	r24, 0x9A	; 154
    2fe4:	9c e0       	ldi	r25, 0x0C	; 12
    2fe6:	9f 93       	push	r25
    2fe8:	8f 93       	push	r24
    2fea:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                //Transceiver_SendPacket() //Send ACK-packet, async?
                state = TR_STATE_LISTENING_INIT;
    2fee:	10 92 7c 03 	sts	0x037C, r1
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	08 c0       	rjmp	.+16     	; 0x3008 <Transceiver_Update+0x108>
            }
            break;

        default:
            sc_assert_fail();
    2ff8:	4b e8       	ldi	r20, 0x8B	; 139
    2ffa:	5c e0       	ldi	r21, 0x0C	; 12
    2ffc:	63 eb       	ldi	r22, 0xB3	; 179
    2ffe:	71 e0       	ldi	r23, 0x01	; 1
    3000:	88 e6       	ldi	r24, 0x68	; 104
    3002:	9c e0       	ldi	r25, 0x0C	; 12
    3004:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
        case TR_STATE_IDLE:
            transceiver_state = IdleStateMachine();
            break;

        case TR_STATE_LISTENING:
            transceiver_state = ListeningStateMachine();
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	80 93 a8 03 	sts	0x03A8, r24
            break;
    300e:	08 95       	ret
static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;

    switch (state)
    3010:	80 91 7b 03 	lds	r24, 0x037B
    3014:	82 30       	cpi	r24, 0x02	; 2
    3016:	09 f4       	brne	.+2      	; 0x301a <Transceiver_Update+0x11a>
    3018:	61 c0       	rjmp	.+194    	; 0x30dc <Transceiver_Update+0x1dc>
    301a:	28 f4       	brcc	.+10     	; 0x3026 <Transceiver_Update+0x126>
    301c:	88 23       	and	r24, r24
    301e:	51 f0       	breq	.+20     	; 0x3034 <Transceiver_Update+0x134>
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	f1 f0       	breq	.+60     	; 0x3060 <Transceiver_Update+0x160>
    3024:	ad c0       	rjmp	.+346    	; 0x3180 <Transceiver_Update+0x280>
    3026:	83 30       	cpi	r24, 0x03	; 3
    3028:	09 f4       	brne	.+2      	; 0x302c <Transceiver_Update+0x12c>
    302a:	96 c0       	rjmp	.+300    	; 0x3158 <Transceiver_Update+0x258>
    302c:	84 30       	cpi	r24, 0x04	; 4
    302e:	09 f4       	brne	.+2      	; 0x3032 <Transceiver_Update+0x132>
    3030:	af c0       	rjmp	.+350    	; 0x3190 <Transceiver_Update+0x290>
    3032:	a6 c0       	rjmp	.+332    	; 0x3180 <Transceiver_Update+0x280>
    {
        case TR_STATE_SENDING_INIT:
            DEBUG("FIFO not empty 0: %u\r\n", libRFM69_IsFIFONotEmpty());
    3034:	0e 94 28 13 	call	0x2650	; 0x2650 <libRFM69_IsFIFONotEmpty>
    3038:	1f 92       	push	r1
    303a:	8f 93       	push	r24
    303c:	8f e9       	ldi	r24, 0x9F	; 159
    303e:	9b e0       	ldi	r25, 0x0B	; 11
    3040:	9f 93       	push	r25
    3042:	8f 93       	push	r24
    3044:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            libRFM69_SetMode(RFM_STANDBY);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
            state = TR_STATE_SENDING_WRITING;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	80 93 7b 03 	sts	0x037B, r24
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	9f c0       	rjmp	.+318    	; 0x319e <Transceiver_Update+0x29e>
            libRFM69_SetMode(RFM_STANDBY);
            state = TR_STATE_SENDING_WRITING;
            break;

        case TR_STATE_SENDING_WRITING:
            if (libRFM69_IsModeReady())
    3060:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <libRFM69_IsModeReady>
    3064:	88 23       	and	r24, r24
    3066:	09 f4       	brne	.+2      	; 0x306a <Transceiver_Update+0x16a>
    3068:	95 c0       	rjmp	.+298    	; 0x3194 <Transceiver_Update+0x294>
            {
                DEBUG("Write packet to FIFO\r\n");
    306a:	88 e8       	ldi	r24, 0x88	; 136
    306c:	9b e0       	ldi	r25, 0x0B	; 11
    306e:	9f 93       	push	r25
    3070:	8f 93       	push	r24
    3072:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                libRFM69_WriteToFIFO((uint8_t *)&packet_frame.header,
    3076:	65 e0       	ldi	r22, 0x05	; 5
    3078:	85 e8       	ldi	r24, 0x85	; 133
    307a:	93 e0       	ldi	r25, 0x03	; 3
    307c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <libRFM69_WriteToFIFO>
                                     sizeof(packet_header_type));
                libRFM69_WriteToFIFO((uint8_t *)&packet_frame.content,
    3080:	60 91 91 03 	lds	r22, 0x0391
    3084:	68 5f       	subi	r22, 0xF8	; 248
    3086:	8a e8       	ldi	r24, 0x8A	; 138
    3088:	93 e0       	ldi	r25, 0x03	; 3
    308a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <libRFM69_WriteToFIFO>
                                     packet_frame.content.size + 8);
                libRFM69_SetMode(RFM_TRANSMITTER);
    308e:	83 e0       	ldi	r24, 0x03	; 3
    3090:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
                libRFM69_EnableHighPowerSetting(true);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <libRFM69_EnableHighPowerSetting>

                DEBUG("TX ready: %u\r\n", libRFM69_IsTxReady());
    309a:	0e 94 b6 12 	call	0x256c	; 0x256c <libRFM69_IsTxReady>
    309e:	1f 92       	push	r1
    30a0:	8f 93       	push	r24
    30a2:	89 e7       	ldi	r24, 0x79	; 121
    30a4:	9b e0       	ldi	r25, 0x0B	; 11
    30a6:	9f 93       	push	r25
    30a8:	8f 93       	push	r24
    30aa:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                DEBUG("FIFO not empty 1: %u\r\n", libRFM69_IsFIFONotEmpty());
    30ae:	0e 94 28 13 	call	0x2650	; 0x2650 <libRFM69_IsFIFONotEmpty>
    30b2:	1f 92       	push	r1
    30b4:	8f 93       	push	r24
    30b6:	82 e6       	ldi	r24, 0x62	; 98
    30b8:	9b e0       	ldi	r25, 0x0B	; 11
    30ba:	9f 93       	push	r25
    30bc:	8f 93       	push	r24
    30be:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                state = TR_STATE_SENDING_TRANSMITTING;
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	80 93 7b 03 	sts	0x037B, r24
    30c8:	8d b7       	in	r24, 0x3d	; 61
    30ca:	9e b7       	in	r25, 0x3e	; 62
    30cc:	0a 96       	adiw	r24, 0x0a	; 10
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	9e bf       	out	0x3e, r25	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	8d bf       	out	0x3d, r24	; 61
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	61 c0       	rjmp	.+194    	; 0x319e <Transceiver_Update+0x29e>
                state = TR_STATE_SENDING_TRANSMITTING;
            }
            break;

        case TR_STATE_SENDING_TRANSMITTING:
            if (libRFM69_IsPacketSent())
    30dc:	0e 94 15 13 	call	0x262a	; 0x262a <libRFM69_IsPacketSent>
    30e0:	88 23       	and	r24, r24
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <Transceiver_Update+0x1e6>
    30e4:	59 c0       	rjmp	.+178    	; 0x3198 <Transceiver_Update+0x298>
            {
                DEBUG("Packet sent\r\n");
    30e6:	84 e5       	ldi	r24, 0x54	; 84
    30e8:	9b e0       	ldi	r25, 0x0B	; 11
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                if (packet_frame.header.ack)
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	80 91 88 03 	lds	r24, 0x0388
    30fa:	88 23       	and	r24, r24
    30fc:	91 f0       	breq	.+36     	; 0x3122 <Transceiver_Update+0x222>
                {
                    DEBUG("Waiting for ACK\r\n");
    30fe:	82 e4       	ldi	r24, 0x42	; 66
    3100:	9b e0       	ldi	r25, 0x0B	; 11
    3102:	9f 93       	push	r25
    3104:	8f 93       	push	r24
    3106:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                    libRFM69_SetMode(RFM_RECEIVER);
    310a:	84 e0       	ldi	r24, 0x04	; 4
    310c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
                    libRFM69_EnableHighPowerSetting(false);
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <libRFM69_EnableHighPowerSetting>
                    state = TR_STATE_SENDING_WAIT_FOR_ACK;
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	80 93 7b 03 	sts	0x037B, r24
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	3e c0       	rjmp	.+124    	; 0x319e <Transceiver_Update+0x29e>
                }
                else
                {
                    DEBUG("No ACK needed\r\n");
    3122:	82 e3       	ldi	r24, 0x32	; 50
    3124:	9b e0       	ldi	r25, 0x0B	; 11
    3126:	9f 93       	push	r25
    3128:	8f 93       	push	r24
    312a:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

                    if (packet_frame.callback != NULL)
    312e:	e0 91 a6 03 	lds	r30, 0x03A6
    3132:	f0 91 a7 03 	lds	r31, 0x03A7
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	30 97       	sbiw	r30, 0x00	; 0
    313c:	11 f0       	breq	.+4      	; 0x3142 <Transceiver_Update+0x242>
                    {
                        packet_frame.callback(true);
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	09 95       	icall
                    }
                    memset(&packet_frame, 0, sizeof(packet_frame_type));
    3142:	83 e2       	ldi	r24, 0x23	; 35
    3144:	e5 e8       	ldi	r30, 0x85	; 133
    3146:	f3 e0       	ldi	r31, 0x03	; 3
    3148:	df 01       	movw	r26, r30
    314a:	1d 92       	st	X+, r1
    314c:	8a 95       	dec	r24
    314e:	e9 f7       	brne	.-6      	; 0x314a <Transceiver_Update+0x24a>

                    state = TR_STATE_SENDING_INIT;
    3150:	10 92 7b 03 	sts	0x037B, r1
                    next_state = TR_STATE_IDLE;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	23 c0       	rjmp	.+70     	; 0x319e <Transceiver_Update+0x29e>
                }
            }
            break;

        case TR_STATE_SENDING_WAIT_FOR_ACK:
            if (libRFM69_IsPayloadReady())
    3158:	0e 94 02 13 	call	0x2604	; 0x2604 <libRFM69_IsPayloadReady>
    315c:	88 23       	and	r24, r24
    315e:	f1 f0       	breq	.+60     	; 0x319c <Transceiver_Update+0x29c>
            {
                if (HandlePayload())
    3160:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <HandlePayload>
                {
                    //TODO: Implement this
                }
                libRFM69_SetMode(RFM_STANDBY);
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
                memset(&packet_frame, 0, sizeof(packet_frame_type));
    316a:	83 e2       	ldi	r24, 0x23	; 35
    316c:	e5 e8       	ldi	r30, 0x85	; 133
    316e:	f3 e0       	ldi	r31, 0x03	; 3
    3170:	df 01       	movw	r26, r30
    3172:	1d 92       	st	X+, r1
    3174:	8a 95       	dec	r24
    3176:	e9 f7       	brne	.-6      	; 0x3172 <Transceiver_Update+0x272>
                state = TR_STATE_SENDING_INIT;
    3178:	10 92 7b 03 	sts	0x037B, r1
                next_state = TR_STATE_IDLE;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	0f c0       	rjmp	.+30     	; 0x319e <Transceiver_Update+0x29e>

        case TR_STATE_SENDING_DONE:
            break;

        default:
            sc_assert_fail();
    3180:	43 e2       	ldi	r20, 0x23	; 35
    3182:	5b e0       	ldi	r21, 0x0B	; 11
    3184:	64 e0       	ldi	r22, 0x04	; 4
    3186:	72 e0       	ldi	r23, 0x02	; 2
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	9b e0       	ldi	r25, 0x0B	; 11
    318c:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	05 c0       	rjmp	.+10     	; 0x319e <Transceiver_Update+0x29e>
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	03 c0       	rjmp	.+6      	; 0x319e <Transceiver_Update+0x29e>
    3198:	83 e0       	ldi	r24, 0x03	; 3
    319a:	01 c0       	rjmp	.+2      	; 0x319e <Transceiver_Update+0x29e>
    319c:	83 e0       	ldi	r24, 0x03	; 3
        case TR_STATE_LISTENING:
            transceiver_state = ListeningStateMachine();
            break;

        case TR_STATE_SENDING:
            transceiver_state = SendingStateMachine();
    319e:	80 93 a8 03 	sts	0x03A8, r24
            break;
    31a2:	08 95       	ret

        case TR_STATE_SLEEPING:
            if (!IsActive() && libRFM69_IsModeReady() && libRFM69_GetMode() != RFM_SLEEP)
    31a4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <libRFM69_IsModeReady>
    31a8:	88 23       	and	r24, r24
    31aa:	81 f0       	breq	.+32     	; 0x31cc <Transceiver_Update+0x2cc>
    31ac:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <libRFM69_GetMode>
    31b0:	88 23       	and	r24, r24
    31b2:	61 f0       	breq	.+24     	; 0x31cc <Transceiver_Update+0x2cc>
            {
                libRFM69_SetMode(RFM_SLEEP);
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
    31ba:	08 95       	ret
            }
            break;

        default:
            sc_assert_fail();
    31bc:	41 e1       	ldi	r20, 0x11	; 17
    31be:	5d e0       	ldi	r21, 0x0D	; 13
    31c0:	68 ec       	ldi	r22, 0xC8	; 200
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	8e ee       	ldi	r24, 0xEE	; 238
    31c6:	9c e0       	ldi	r25, 0x0C	; 12
    31c8:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    31cc:	08 95       	ret

000031ce <Transceiver_SendPacket>:
/// @return None
///
bool Transceiver_SendPacket(uint8_t target, bool request_ack,
                            packet_content_type *content,
                            transceiver_callback_type callback)
{
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	d8 2e       	mov	r13, r24
    31de:	e6 2e       	mov	r14, r22
    31e0:	ea 01       	movw	r28, r20
    31e2:	89 01       	movw	r16, r18
    sc_assert(content != NULL);
    31e4:	20 97       	sbiw	r28, 0x00	; 0
    31e6:	41 f4       	brne	.+16     	; 0x31f8 <Transceiver_SendPacket+0x2a>
    31e8:	40 ef       	ldi	r20, 0xF0	; 240
    31ea:	5a e0       	ldi	r21, 0x0A	; 10
    31ec:	60 ee       	ldi	r22, 0xE0	; 224
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	8d ec       	ldi	r24, 0xCD	; 205
    31f2:	9a e0       	ldi	r25, 0x0A	; 10
    31f4:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    bool status = true;
    packet_frame_type *frame_ptr;

    frame_ptr = &packet_frame;

    if (content->size > CONTENT_DATA_SIZE)
    31f8:	9f 81       	ldd	r25, Y+7	; 0x07
    31fa:	95 31       	cpi	r25, 0x15	; 21
    31fc:	80 f0       	brcs	.+32     	; 0x321e <Transceiver_SendPacket+0x50>
    {
        ERROR("Size of packet content is to large");
    31fe:	2c ef       	ldi	r18, 0xFC	; 252
    3200:	31 e0       	ldi	r19, 0x01	; 1
    3202:	3f 93       	push	r19
    3204:	2f 93       	push	r18
    3206:	2b e9       	ldi	r18, 0x9B	; 155
    3208:	3a e0       	ldi	r19, 0x0A	; 10
    320a:	3f 93       	push	r19
    320c:	2f 93       	push	r18
    320e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
        status = false;
    321a:	f1 2c       	mov	r15, r1
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <Transceiver_SendPacket+0x54>
                            packet_content_type *content,
                            transceiver_callback_type callback)
{
    sc_assert(content != NULL);

    bool status = true;
    321e:	ff 24       	eor	r15, r15
    3220:	f3 94       	inc	r15
}

//TODO: Make this function public?
static bool ReadyToSend(void)
{
    return (transceiver_state == TR_STATE_IDLE && libRFM69_GetRSSI() < -90);
    3222:	90 91 a8 03 	lds	r25, 0x03A8
    3226:	91 30       	cpi	r25, 0x01	; 1
    3228:	99 f5       	brne	.+102    	; 0x3290 <Transceiver_SendPacket+0xc2>
    322a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <libRFM69_GetRSSI>
    {
        ERROR("Size of packet content is to large");
        status = false;
    }

    if (ReadyToSend() && status)
    322e:	86 3a       	cpi	r24, 0xA6	; 166
    3230:	7c f5       	brge	.+94     	; 0x3290 <Transceiver_SendPacket+0xc2>
    3232:	ff 20       	and	r15, r15
    3234:	69 f1       	breq	.+90     	; 0x3290 <Transceiver_SendPacket+0xc2>
    {
        frame_ptr->header.target = target;
    3236:	d0 92 86 03 	sts	0x0386, r13
        frame_ptr->header.source = Config_GetNodeId();
    323a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Config_GetNodeId>
    323e:	80 93 87 03 	sts	0x0387, r24
        frame_ptr->header.ack = request_ack;
    3242:	e0 92 88 03 	sts	0x0388, r14
        frame_ptr->header.rssi = 0;//libRFM69_GetRSSI(); //TODO: Fix this!
    3246:	10 92 89 03 	sts	0x0389, r1
        frame_ptr->header.total_size = sizeof(packet_header_type) + 8 +
    324a:	8f 81       	ldd	r24, Y+7	; 0x07
    324c:	83 5f       	subi	r24, 0xF3	; 243
    324e:	80 93 85 03 	sts	0x0385, r24
                                       content->size; //TODO: sizeof or define!

        frame_ptr->content.timestamp = content->timestamp;
    3252:	86 e0       	ldi	r24, 0x06	; 6
    3254:	fe 01       	movw	r30, r28
    3256:	aa e8       	ldi	r26, 0x8A	; 138
    3258:	b3 e0       	ldi	r27, 0x03	; 3
    325a:	01 90       	ld	r0, Z+
    325c:	0d 92       	st	X+, r0
    325e:	8a 95       	dec	r24
    3260:	e1 f7       	brne	.-8      	; 0x325a <Transceiver_SendPacket+0x8c>
        frame_ptr->content.type = content->type;
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	80 93 90 03 	sts	0x0390, r24
        frame_ptr->content.size = content->size;
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
    326a:	80 93 91 03 	sts	0x0391, r24
        memcpy(frame_ptr->content.data, content->data, content->size);
    326e:	4f 81       	ldd	r20, Y+7	; 0x07
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	be 01       	movw	r22, r28
    3274:	68 5f       	subi	r22, 0xF8	; 248
    3276:	7f 4f       	sbci	r23, 0xFF	; 255
    3278:	82 e9       	ldi	r24, 0x92	; 146
    327a:	93 e0       	ldi	r25, 0x03	; 3
    327c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <memcpy>
        frame_ptr->callback = callback;
    3280:	10 93 a7 03 	sts	0x03A7, r17
    3284:	00 93 a6 03 	sts	0x03A6, r16

#ifdef DEBUG_ENABLE
        DumpPacket(frame_ptr);
    3288:	85 e8       	ldi	r24, 0x85	; 133
    328a:	93 e0       	ldi	r25, 0x03	; 3
    328c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <DumpPacket>
#endif
    }

    return status;
}
    3290:	8f 2d       	mov	r24, r15
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	ef 90       	pop	r14
    329e:	df 90       	pop	r13
    32a0:	08 95       	ret

000032a2 <Transceiver_EventHandler>:
/// @param  *event Pointer to triggered event
/// @return None
///
void Transceiver_EventHandler(const event_type *event)
{
    sc_assert(event != NULL);
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	41 f4       	brne	.+16     	; 0x32b6 <Transceiver_EventHandler+0x14>
    32a6:	4d e8       	ldi	r20, 0x8D	; 141
    32a8:	5a e0       	ldi	r21, 0x0A	; 10
    32aa:	6e e1       	ldi	r22, 0x1E	; 30
    32ac:	71 e0       	ldi	r23, 0x01	; 1
    32ae:	8a e6       	ldi	r24, 0x6A	; 106
    32b0:	9a e0       	ldi	r25, 0x0A	; 10
    32b2:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    switch (event->id)
    32b6:	fc 01       	movw	r30, r24
    32b8:	84 81       	ldd	r24, Z+4	; 0x04
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	19 f0       	breq	.+6      	; 0x32c4 <Transceiver_EventHandler+0x22>
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	f9 f0       	breq	.+62     	; 0x3300 <Transceiver_EventHandler+0x5e>
    32c2:	08 95       	ret
    {
        case EVENT_SLEEP:
            INFO("Entering sleep");
    32c4:	83 ee       	ldi	r24, 0xE3	; 227
    32c6:	91 e0       	ldi	r25, 0x01	; 1
    32c8:	9f 93       	push	r25
    32ca:	8f 93       	push	r24
    32cc:	8d e4       	ldi	r24, 0x4D	; 77
    32ce:	9a e0       	ldi	r25, 0x0A	; 10
    32d0:	9f 93       	push	r25
    32d2:	8f 93       	push	r24
    32d4:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

            //TODO: Measure worst case time waiting here
            while(IsActive() == true)
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	80 91 a8 03 	lds	r24, 0x03A8
    32e4:	83 30       	cpi	r24, 0x03	; 3
    32e6:	31 f4       	brne	.+12     	; 0x32f4 <Transceiver_EventHandler+0x52>
            {
                Transceiver_Update();
    32e8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Transceiver_Update>
    {
        case EVENT_SLEEP:
            INFO("Entering sleep");

            //TODO: Measure worst case time waiting here
            while(IsActive() == true)
    32ec:	80 91 a8 03 	lds	r24, 0x03A8
    32f0:	83 30       	cpi	r24, 0x03	; 3
    32f2:	d1 f3       	breq	.-12     	; 0x32e8 <Transceiver_EventHandler+0x46>
            {
                Transceiver_Update();
            }

            libRFM69_SetMode(RFM_SLEEP);
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
            libRFM69_WaitForModeReady();
    32fa:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>
            break;
    32fe:	08 95       	ret

        case EVENT_WAKEUP:
            INFO("Exiting sleep");
    3300:	83 ee       	ldi	r24, 0xE3	; 227
    3302:	91 e0       	ldi	r25, 0x01	; 1
    3304:	9f 93       	push	r25
    3306:	8f 93       	push	r24
    3308:	81 e3       	ldi	r24, 0x31	; 49
    330a:	9a e0       	ldi	r25, 0x0A	; 10
    330c:	9f 93       	push	r25
    330e:	8f 93       	push	r24
    3310:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            libRFM69_SetMode(RFM_STANDBY);
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <libRFM69_SetMode>
            libRFM69_WaitForModeReady();
    331a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <libRFM69_WaitForModeReady>
            break;
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	08 95       	ret

00003328 <ErrorHandler_PointOfNoReturn>:
/// @param  None
/// @return None, does not return since an manual reboot is needed.
///
void ErrorHandler_PointOfNoReturn(void)
{
    CRITICAL("Entering fail state, manual reboot is needed.");
    3328:	86 e5       	ldi	r24, 0x56	; 86
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	9f 93       	push	r25
    332e:	8f 93       	push	r24
    3330:	81 e7       	ldi	r24, 0x71	; 113
    3332:	9d e0       	ldi	r25, 0x0D	; 13
    3334:	9f 93       	push	r25
    3336:	8f 93       	push	r24
    3338:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    wdt_disable();
    333c:	88 e1       	ldi	r24, 0x18	; 24
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	80 93 60 00 	sts	0x0060, r24
    3346:	10 92 60 00 	sts	0x0060, r1
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	ff cf       	rjmp	.-2      	; 0x3354 <ErrorHandler_PointOfNoReturn+0x2c>

00003356 <ErrorHandler_AssertFail>:
///                returned false.
/// @return None, does not return since an manual reboot is needed.
///
void ErrorHandler_AssertFail(const char *__file, int __lineno,
                             const char *__exp)
{
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	c0 54       	subi	r28, 0x40	; 64
    3360:	d1 09       	sbc	r29, r1
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	d6 2e       	mov	r13, r22
    336e:	c7 2e       	mov	r12, r23
    3370:	7a 01       	movw	r14, r20
    char expression[40];
    char file[24];

    //TODO: Use libDebug_PrintP, skip these buffers!

    strncpy_P(file, __file, sizeof(file));
    3372:	8e 01       	movw	r16, r28
    3374:	07 5d       	subi	r16, 0xD7	; 215
    3376:	1f 4f       	sbci	r17, 0xFF	; 255
    3378:	48 e1       	ldi	r20, 0x18	; 24
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	bc 01       	movw	r22, r24
    337e:	c8 01       	movw	r24, r16
    3380:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <strncpy_P>
    file[sizeof(file) / sizeof(*file) - 1] = '\0';
    3384:	21 96       	adiw	r28, 0x01	; 1
    3386:	1f ae       	std	Y+63, r1	; 0x3f
    3388:	21 97       	sbiw	r28, 0x01	; 1

    strncpy_P(expression, __exp, sizeof(expression));
    338a:	48 e2       	ldi	r20, 0x28	; 40
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	b7 01       	movw	r22, r14
    3390:	ce 01       	movw	r24, r28
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	7c 01       	movw	r14, r24
    3396:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <strncpy_P>
    expression[sizeof(expression) / sizeof(*expression) - 1] = '\0';
    339a:	18 a6       	std	Y+40, r1	; 0x28

    DEBUG("<ERROR> Failed assert: %s:%u (%s)\r\n", file, __lineno, expression);
    339c:	ff 92       	push	r15
    339e:	ef 92       	push	r14
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	1f 93       	push	r17
    33a6:	0f 93       	push	r16
    33a8:	81 eb       	ldi	r24, 0xB1	; 177
    33aa:	9d e0       	ldi	r25, 0x0D	; 13
    33ac:	9f 93       	push	r25
    33ae:	8f 93       	push	r24
    33b0:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    ErrorHandler_PointOfNoReturn();
    33b4:	0e 94 94 19 	call	0x3328	; 0x3328 <ErrorHandler_PointOfNoReturn>

000033b8 <ErrorHandler_Init>:
///
/// @param  None
/// @return None
///
void ErrorHandler_Init(void)
{
    33b8:	7f 92       	push	r7
    33ba:	8f 92       	push	r8
    33bc:	9f 92       	push	r9
    33be:	af 92       	push	r10
    33c0:	bf 92       	push	r11
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <ErrorHandler_Init+0x1c>
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <ErrorHandler_Init+0x1e>
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	0f 2e       	mov	r0, r31
    33dc:	ff e1       	ldi	r31, 0x1F	; 31
    33de:	ef 2e       	mov	r14, r31
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	ff 2e       	mov	r15, r31
    33e4:	f0 2d       	mov	r31, r0
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));

        if (id <= prev_id)
    33e6:	00 e0       	ldi	r16, 0x00	; 0
    33e8:	10 e0       	ldi	r17, 0x00	; 0
///
void ErrorHandler_Init(void)
{
    sc_assert(ERROR_LOG_SIZE < 256);

    uint32_t prev_id = 0;
    33ea:	81 2c       	mov	r8, r1
    33ec:	91 2c       	mov	r9, r1
    33ee:	54 01       	movw	r10, r8
    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    {
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));
    33f0:	44 e0       	ldi	r20, 0x04	; 4
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	b7 01       	movw	r22, r14
    33f6:	ce 01       	movw	r24, r28
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__eerd_block_m328p>

        if (id <= prev_id)
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	9a 81       	ldd	r25, Y+2	; 0x02
    3402:	ab 81       	ldd	r26, Y+3	; 0x03
    3404:	bc 81       	ldd	r27, Y+4	; 0x04
    3406:	88 16       	cp	r8, r24
    3408:	99 06       	cpc	r9, r25
    340a:	aa 06       	cpc	r10, r26
    340c:	bb 06       	cpc	r11, r27
    340e:	b0 f0       	brcs	.+44     	; 0x343c <ErrorHandler_Init+0x84>
        {
            current_index = index;
    3410:	00 93 aa 03 	sts	0x03AA, r16
            current_id = ++prev_id;
    3414:	2f ef       	ldi	r18, 0xFF	; 255
    3416:	82 1a       	sub	r8, r18
    3418:	92 0a       	sbc	r9, r18
    341a:	a2 0a       	sbc	r10, r18
    341c:	b2 0a       	sbc	r11, r18
    341e:	80 92 a9 03 	sts	0x03A9, r8
            DEBUG("Error log index: %u\r\n", index);
    3422:	1f 93       	push	r17
    3424:	0f 93       	push	r16
    3426:	85 ed       	ldi	r24, 0xD5	; 213
    3428:	9d e0       	ldi	r25, 0x0D	; 13
    342a:	9f 93       	push	r25
    342c:	8f 93       	push	r24
    342e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            return;
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	12 c0       	rjmp	.+36     	; 0x3460 <ErrorHandler_Init+0xa8>
    343c:	0f 5f       	subi	r16, 0xFF	; 255
    343e:	1f 4f       	sbci	r17, 0xFF	; 255
    3440:	2a e0       	ldi	r18, 0x0A	; 10
    3442:	e2 0e       	add	r14, r18
    3444:	f1 1c       	adc	r15, r1
    sc_assert(ERROR_LOG_SIZE < 256);

    uint32_t prev_id = 0;
    uint8_t index;

    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    3446:	00 35       	cpi	r16, 0x50	; 80
    3448:	11 05       	cpc	r17, r1
    344a:	19 f0       	breq	.+6      	; 0x3452 <ErrorHandler_Init+0x9a>
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));

        if (id <= prev_id)
    344c:	4c 01       	movw	r8, r24
    344e:	5d 01       	movw	r10, r26
    3450:	cf cf       	rjmp	.-98     	; 0x33f0 <ErrorHandler_Init+0x38>
        }
        prev_id = id;
    }

    //If we come here the log is full and we wrap around to the start.
    current_index = 0;
    3452:	10 92 aa 03 	sts	0x03AA, r1
    current_id = ++prev_id;
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	a1 1d       	adc	r26, r1
    345a:	b1 1d       	adc	r27, r1
    345c:	80 93 a9 03 	sts	0x03A9, r24
    return;
}
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	1f 91       	pop	r17
    346e:	0f 91       	pop	r16
    3470:	ff 90       	pop	r15
    3472:	ef 90       	pop	r14
    3474:	df 90       	pop	r13
    3476:	cf 90       	pop	r12
    3478:	bf 90       	pop	r11
    347a:	af 90       	pop	r10
    347c:	9f 90       	pop	r9
    347e:	8f 90       	pop	r8
    3480:	7f 90       	pop	r7
    3482:	08 95       	ret

00003484 <LED_ChangeState>:
///
/// @param  state The new state
/// @return None
///
void LED_ChangeState(led_state_type state)
{
    3484:	cf 93       	push	r28
    3486:	c8 2f       	mov	r28, r24
    sc_assert(state <= LED_STATE_SLEEPING);
    3488:	84 30       	cpi	r24, 0x04	; 4
    348a:	40 f0       	brcs	.+16     	; 0x349c <LED_ChangeState+0x18>
    348c:	46 ef       	ldi	r20, 0xF6	; 246
    348e:	5d e0       	ldi	r21, 0x0D	; 13
    3490:	67 e8       	ldi	r22, 0x87	; 135
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	8b ee       	ldi	r24, 0xEB	; 235
    3496:	9d e0       	ldi	r25, 0x0D	; 13
    3498:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    led_timer = Timer_GetMilliseconds();
    349c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    34a0:	60 93 ab 03 	sts	0x03AB, r22
    34a4:	70 93 ac 03 	sts	0x03AC, r23
    34a8:	80 93 ad 03 	sts	0x03AD, r24
    34ac:	90 93 ae 03 	sts	0x03AE, r25
    switch (state)
    34b0:	c3 30       	cpi	r28, 0x03	; 3
    34b2:	18 f4       	brcc	.+6      	; 0x34ba <LED_ChangeState+0x36>
    34b4:	c1 30       	cpi	r28, 0x01	; 1
    34b6:	18 f0       	brcs	.+6      	; 0x34be <LED_ChangeState+0x3a>
    34b8:	09 c0       	rjmp	.+18     	; 0x34cc <LED_ChangeState+0x48>
    34ba:	c3 30       	cpi	r28, 0x03	; 3
    34bc:	69 f4       	brne	.+26     	; 0x34d8 <LED_ChangeState+0x54>
    {
        case LED_STATE_IDLE:
        case LED_STATE_SLEEPING:
            EnabledBlueLED(false);
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <libLED_Enable>
            led_state = state;
    34c6:	c0 93 af 03 	sts	0x03AF, r28
            break;
    34ca:	06 c0       	rjmp	.+12     	; 0x34d8 <LED_ChangeState+0x54>

        case LED_STATE_SENDING:
        case LED_STATE_CHARGING:
            EnabledBlueLED(true);
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <libLED_Enable>
            led_state = state;
    34d4:	c0 93 af 03 	sts	0x03AF, r28

        default:
            break;
    }
    return;
}
    34d8:	cf 91       	pop	r28
    34da:	08 95       	ret

000034dc <LED_EventHandler>:
/// @param  *event Pointer to triggered event
/// @return None
///
void LED_EventHandler(const event_type *event)
{
    switch (event->id)
    34dc:	fc 01       	movw	r30, r24
    34de:	84 81       	ldd	r24, Z+4	; 0x04
    34e0:	82 30       	cpi	r24, 0x02	; 2
    34e2:	69 f0       	breq	.+26     	; 0x34fe <LED_EventHandler+0x22>
    34e4:	18 f4       	brcc	.+6      	; 0x34ec <LED_EventHandler+0x10>
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	31 f0       	breq	.+12     	; 0x34f6 <LED_EventHandler+0x1a>
    34ea:	08 95       	ret
    34ec:	83 30       	cpi	r24, 0x03	; 3
    34ee:	59 f0       	breq	.+22     	; 0x3506 <LED_EventHandler+0x2a>
    34f0:	84 30       	cpi	r24, 0x04	; 4
    34f2:	29 f0       	breq	.+10     	; 0x34fe <LED_EventHandler+0x22>
    34f4:	08 95       	ret
    {
        case EVENT_SLEEP:
            LED_ChangeState(LED_STATE_SLEEPING);
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_ChangeState>
            break;
    34fc:	08 95       	ret

        case EVENT_BATTERY_CHARGING_STOPPED:
        case EVENT_WAKEUP:
            LED_ChangeState(LED_STATE_IDLE);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_ChangeState>
            break;
    3504:	08 95       	ret

        case EVENT_BATTERY_CHARGING_STARTED:
            LED_ChangeState(LED_STATE_CHARGING);
    3506:	82 e0       	ldi	r24, 0x02	; 2
    3508:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_ChangeState>
    350c:	08 95       	ret

0000350e <__vector_10>:
//////////////////////////////////////////////////////////////////////////
//INTERUPT SERVICE ROUTINES
//////////////////////////////////////////////////////////////////////////

ISR(TIMER1_CAPT_vect)
{
    350e:	1f 92       	push	r1
    3510:	0f 92       	push	r0
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	0f 92       	push	r0
    3516:	11 24       	eor	r1, r1
    3518:	2f 93       	push	r18
    351a:	3f 93       	push	r19
    351c:	8f 93       	push	r24
    351e:	9f 93       	push	r25
    3520:	af 93       	push	r26
    3522:	bf 93       	push	r27
    3524:	ef 93       	push	r30
    3526:	ff 93       	push	r31
    if (pulse_counter < EXPECTED_NR_PULSES)
    3528:	80 91 0b 04 	lds	r24, 0x040B
    352c:	90 91 0c 04 	lds	r25, 0x040C
    3530:	a0 91 0d 04 	lds	r26, 0x040D
    3534:	b0 91 0e 04 	lds	r27, 0x040E
    3538:	8b 97       	sbiw	r24, 0x2b	; 43
    353a:	a1 05       	cpc	r26, r1
    353c:	b1 05       	cpc	r27, r1
    353e:	30 f5       	brcc	.+76     	; 0x358c <__vector_10+0x7e>
    {
        pulse_timings[pulse_counter] = ICR1;
    3540:	80 91 0b 04 	lds	r24, 0x040B
    3544:	90 91 0c 04 	lds	r25, 0x040C
    3548:	a0 91 0d 04 	lds	r26, 0x040D
    354c:	b0 91 0e 04 	lds	r27, 0x040E
    3550:	20 91 86 00 	lds	r18, 0x0086
    3554:	30 91 87 00 	lds	r19, 0x0087
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	fc 01       	movw	r30, r24
    355e:	eb 54       	subi	r30, 0x4B	; 75
    3560:	fc 4f       	sbci	r31, 0xFC	; 252
    3562:	31 83       	std	Z+1, r19	; 0x01
    3564:	20 83       	st	Z, r18
        ++pulse_counter;
    3566:	80 91 0b 04 	lds	r24, 0x040B
    356a:	90 91 0c 04 	lds	r25, 0x040C
    356e:	a0 91 0d 04 	lds	r26, 0x040D
    3572:	b0 91 0e 04 	lds	r27, 0x040E
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	a1 1d       	adc	r26, r1
    357a:	b1 1d       	adc	r27, r1
    357c:	80 93 0b 04 	sts	0x040B, r24
    3580:	90 93 0c 04 	sts	0x040C, r25
    3584:	a0 93 0d 04 	sts	0x040D, r26
    3588:	b0 93 0e 04 	sts	0x040E, r27
    }
}
    358c:	ff 91       	pop	r31
    358e:	ef 91       	pop	r30
    3590:	bf 91       	pop	r27
    3592:	af 91       	pop	r26
    3594:	9f 91       	pop	r25
    3596:	8f 91       	pop	r24
    3598:	3f 91       	pop	r19
    359a:	2f 91       	pop	r18
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	0f 90       	pop	r0
    35a2:	1f 90       	pop	r1
    35a4:	18 95       	reti

000035a6 <libDHT22_Init>:
//////////////////////////////////////////////////////////////////////////

void libDHT22_Init(void)
{
    //Set data pin as output and high
    DDRB |= (1 << DATAPIN);
    35a6:	20 9a       	sbi	0x04, 0	; 4
    PORTB |= (1 << DATAPIN);
    35a8:	28 9a       	sbi	0x05, 0	; 5

    dht22_state = DHT_POWERUP;
    35aa:	82 e0       	ldi	r24, 0x02	; 2
    35ac:	80 93 1c 04 	sts	0x041C, r24
    init_time = Timer_GetMilliseconds();
    35b0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    35b4:	60 93 0f 04 	sts	0x040F, r22
    35b8:	70 93 10 04 	sts	0x0410, r23
    35bc:	80 93 11 04 	sts	0x0411, r24
    35c0:	90 93 12 04 	sts	0x0412, r25
    sensor_reading.status = false;
    35c4:	10 92 1b 04 	sts	0x041B, r1

    INFO("Init done");
    35c8:	85 e9       	ldi	r24, 0x95	; 149
    35ca:	92 e0       	ldi	r25, 0x02	; 2
    35cc:	9f 93       	push	r25
    35ce:	8f 93       	push	r24
    35d0:	88 e9       	ldi	r24, 0x98	; 152
    35d2:	9e e0       	ldi	r25, 0x0E	; 14
    35d4:	9f 93       	push	r25
    35d6:	8f 93       	push	r24
    35d8:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	08 95       	ret

000035e6 <libDHT22_Update>:
    return;
}

void libDHT22_Update(void)
{
    35e6:	8f 92       	push	r8
    35e8:	9f 92       	push	r9
    35ea:	af 92       	push	r10
    35ec:	bf 92       	push	r11
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <libDHT22_Update+0x1a>
    3600:	00 d0       	rcall	.+0      	; 0x3602 <libDHT22_Update+0x1c>
    3602:	1f 92       	push	r1
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    switch (dht22_state)
    3608:	80 91 1c 04 	lds	r24, 0x041C
    360c:	82 30       	cpi	r24, 0x02	; 2
    360e:	59 f0       	breq	.+22     	; 0x3626 <libDHT22_Update+0x40>
    3610:	20 f4       	brcc	.+8      	; 0x361a <libDHT22_Update+0x34>
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	09 f4       	brne	.+2      	; 0x3618 <libDHT22_Update+0x32>
    3616:	aa c1       	rjmp	.+852    	; 0x396c <libDHT22_Update+0x386>
    3618:	a1 c1       	rjmp	.+834    	; 0x395c <libDHT22_Update+0x376>
    361a:	83 30       	cpi	r24, 0x03	; 3
    361c:	c1 f0       	breq	.+48     	; 0x364e <libDHT22_Update+0x68>
    361e:	84 30       	cpi	r24, 0x04	; 4
    3620:	09 f4       	brne	.+2      	; 0x3624 <libDHT22_Update+0x3e>
    3622:	cb c0       	rjmp	.+406    	; 0x37ba <libDHT22_Update+0x1d4>
    3624:	9b c1       	rjmp	.+822    	; 0x395c <libDHT22_Update+0x376>
    {
        case DHT_POWERUP:
            if (Timer_TimeDifference(init_time) > POWERUP_DELAY_MS)
    3626:	60 91 0f 04 	lds	r22, 0x040F
    362a:	70 91 10 04 	lds	r23, 0x0410
    362e:	80 91 11 04 	lds	r24, 0x0411
    3632:	90 91 12 04 	lds	r25, 0x0412
    3636:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
    363a:	69 3e       	cpi	r22, 0xE9	; 233
    363c:	73 40       	sbci	r23, 0x03	; 3
    363e:	81 05       	cpc	r24, r1
    3640:	91 05       	cpc	r25, r1
    3642:	08 f4       	brcc	.+2      	; 0x3646 <libDHT22_Update+0x60>
    3644:	93 c1       	rjmp	.+806    	; 0x396c <libDHT22_Update+0x386>
            {
                dht22_state = DHT_IDLE;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 93 1c 04 	sts	0x041C, r24
    364c:	8f c1       	rjmp	.+798    	; 0x396c <libDHT22_Update+0x386>
{
    static dht_reading_state_type state = DHT_READING_REQUEST;
    static uint32_t reading_timer;
    dht_state_type next_dht_state = DHT_READING;

    switch (state)
    364e:	80 91 b4 03 	lds	r24, 0x03B4
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	b1 f0       	breq	.+44     	; 0x3682 <libDHT22_Update+0x9c>
    3656:	20 f0       	brcs	.+8      	; 0x3660 <libDHT22_Update+0x7a>
    3658:	82 30       	cpi	r24, 0x02	; 2
    365a:	09 f4       	brne	.+2      	; 0x365e <libDHT22_Update+0x78>
    365c:	48 c0       	rjmp	.+144    	; 0x36ee <libDHT22_Update+0x108>
    365e:	9f c0       	rjmp	.+318    	; 0x379e <libDHT22_Update+0x1b8>
    {
        case DHT_READING_REQUEST:
            reading_timer = Timer_GetMilliseconds();
    3660:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    3664:	60 93 b0 03 	sts	0x03B0, r22
    3668:	70 93 b1 03 	sts	0x03B1, r23
    366c:	80 93 b2 03 	sts	0x03B2, r24
    3670:	90 93 b3 03 	sts	0x03B3, r25

            //Pull data pin low
            DDRB |= (1 << DATAPIN);
    3674:	20 9a       	sbi	0x04, 0	; 4
            PORTB &= ~(1 << DATAPIN);
    3676:	28 98       	cbi	0x05, 0	; 5

            state = DHT_READING_REQUEST_WAIT;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	80 93 b4 03 	sts	0x03B4, r24

static dht_state_type ReadingStateMachine(void)
{
    static dht_reading_state_type state = DHT_READING_REQUEST;
    static uint32_t reading_timer;
    dht_state_type next_dht_state = DHT_READING;
    367e:	83 e0       	ldi	r24, 0x03	; 3
    3680:	99 c0       	rjmp	.+306    	; 0x37b4 <libDHT22_Update+0x1ce>
            state = DHT_READING_REQUEST_WAIT;
            break;

        case DHT_READING_REQUEST_WAIT:
            //NOTE: A delay of minimum 1 ms is required
            if (Timer_TimeDifference(reading_timer) >= REQUEST_READING_TIME_MS)
    3682:	60 91 b0 03 	lds	r22, 0x03B0
    3686:	70 91 b1 03 	lds	r23, 0x03B1
    368a:	80 91 b2 03 	lds	r24, 0x03B2
    368e:	90 91 b3 03 	lds	r25, 0x03B3
    3692:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
    3696:	62 30       	cpi	r22, 0x02	; 2
    3698:	71 05       	cpc	r23, r1
    369a:	81 05       	cpc	r24, r1
    369c:	91 05       	cpc	r25, r1
    369e:	08 f4       	brcc	.+2      	; 0x36a2 <libDHT22_Update+0xbc>
    36a0:	86 c0       	rjmp	.+268    	; 0x37ae <libDHT22_Update+0x1c8>
            {
                //Pull data pin high and then reconfigure as input
                PORTB |= (1 << DATAPIN);
    36a2:	28 9a       	sbi	0x05, 0	; 5
                DDRB &= ~(1 << DATAPIN);
    36a4:	20 98       	cbi	0x04, 0	; 4

                reading_timer = Timer_GetMilliseconds();
    36a6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    36aa:	60 93 b0 03 	sts	0x03B0, r22
    36ae:	70 93 b1 03 	sts	0x03B1, r23
    36b2:	80 93 b2 03 	sts	0x03B2, r24
    36b6:	90 93 b3 03 	sts	0x03B3, r25

static void EnableInputCapture(bool enabled)
{
    if (enabled == true)
    {
        pulse_counter = 0;
    36ba:	10 92 0b 04 	sts	0x040B, r1
    36be:	10 92 0c 04 	sts	0x040C, r1
    36c2:	10 92 0d 04 	sts	0x040D, r1
    36c6:	10 92 0e 04 	sts	0x040E, r1

        //Set clock source to CLK
        TCCR1B |= (1 << CS11);
    36ca:	e1 e8       	ldi	r30, 0x81	; 129
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	82 60       	ori	r24, 0x02	; 2
    36d2:	80 83       	st	Z, r24

        //Disable noise canceling
        TCCR1B &= ~(1 << ICNC1);
    36d4:	80 81       	ld	r24, Z
    36d6:	8f 77       	andi	r24, 0x7F	; 127
    36d8:	80 83       	st	Z, r24

        //Enabled input capture interrupts
        TIMSK1 |= (1 << ICIE1);
    36da:	ef e6       	ldi	r30, 0x6F	; 111
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	80 62       	ori	r24, 0x20	; 32
    36e2:	80 83       	st	Z, r24
                DDRB &= ~(1 << DATAPIN);

                reading_timer = Timer_GetMilliseconds();

                EnableInputCapture(true);
                state = DHT_READING_CAPTURE_DATA;
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	80 93 b4 03 	sts	0x03B4, r24

static dht_state_type ReadingStateMachine(void)
{
    static dht_reading_state_type state = DHT_READING_REQUEST;
    static uint32_t reading_timer;
    dht_state_type next_dht_state = DHT_READING;
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	63 c0       	rjmp	.+198    	; 0x37b4 <libDHT22_Update+0x1ce>
                state = DHT_READING_CAPTURE_DATA;
            }
            break;

        case DHT_READING_CAPTURE_DATA:
            if (pulse_counter == EXPECTED_NR_PULSES)
    36ee:	80 91 0b 04 	lds	r24, 0x040B
    36f2:	90 91 0c 04 	lds	r25, 0x040C
    36f6:	a0 91 0d 04 	lds	r26, 0x040D
    36fa:	b0 91 0e 04 	lds	r27, 0x040E
    36fe:	8b 97       	sbiw	r24, 0x2b	; 43
    3700:	a1 05       	cpc	r26, r1
    3702:	b1 05       	cpc	r27, r1
    3704:	91 f4       	brne	.+36     	; 0x372a <libDHT22_Update+0x144>
        TIMSK1 |= (1 << ICIE1);
    }
    else
    {
        //Disabled input capture interrupts
        TIMSK1 &= ~(1 << ICIE1);
    3706:	ef e6       	ldi	r30, 0x6F	; 111
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	8f 7d       	andi	r24, 0xDF	; 223
    370e:	80 83       	st	Z, r24

        //Stop timer by removing the clock source
        TCCR1B &= ~(1 << CS12 | 1 << CS11 | 1 << CS10);
    3710:	e1 e8       	ldi	r30, 0x81	; 129
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	88 7f       	andi	r24, 0xF8	; 248
    3718:	80 83       	st	Z, r24

        //Reset the timer register
        TCNT1 = 0x00;
    371a:	10 92 85 00 	sts	0x0085, r1
    371e:	10 92 84 00 	sts	0x0084, r1

        case DHT_READING_CAPTURE_DATA:
            if (pulse_counter == EXPECTED_NR_PULSES)
            {
                EnableInputCapture(false);
                state = DHT_READING_REQUEST;
    3722:	10 92 b4 03 	sts	0x03B4, r1
                next_dht_state =  DHT_DECODING;
    3726:	14 e0       	ldi	r17, 0x04	; 4
    3728:	01 c0       	rjmp	.+2      	; 0x372c <libDHT22_Update+0x146>

static dht_state_type ReadingStateMachine(void)
{
    static dht_reading_state_type state = DHT_READING_REQUEST;
    static uint32_t reading_timer;
    dht_state_type next_dht_state = DHT_READING;
    372a:	13 e0       	ldi	r17, 0x03	; 3
            }

            //NOTE: According to the DHT22-datasheet a measurement takes 5 mS,
            //      with FOSC 8 MHz and 8 as prescaler the timer overflows in 64 mS.
            //      A timeout between 5 mS and 64 mS is therefore needed.
            if (Timer_TimeDifference(reading_timer) > READING_TIMEOUT_MS)
    372c:	60 91 b0 03 	lds	r22, 0x03B0
    3730:	70 91 b1 03 	lds	r23, 0x03B1
    3734:	80 91 b2 03 	lds	r24, 0x03B2
    3738:	90 91 b3 03 	lds	r25, 0x03B3
    373c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
    3740:	67 30       	cpi	r22, 0x07	; 7
    3742:	71 05       	cpc	r23, r1
    3744:	81 05       	cpc	r24, r1
    3746:	91 05       	cpc	r25, r1
    3748:	a0 f1       	brcs	.+104    	; 0x37b2 <libDHT22_Update+0x1cc>
            {
                ERROR("Timeout while capturing data");
    374a:	81 e8       	ldi	r24, 0x81	; 129
    374c:	92 e0       	ldi	r25, 0x02	; 2
    374e:	9f 93       	push	r25
    3750:	8f 93       	push	r24
    3752:	8d e4       	ldi	r24, 0x4D	; 77
    3754:	9e e0       	ldi	r25, 0x0E	; 14
    3756:	9f 93       	push	r25
    3758:	8f 93       	push	r24
    375a:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        TIMSK1 |= (1 << ICIE1);
    }
    else
    {
        //Disabled input capture interrupts
        TIMSK1 &= ~(1 << ICIE1);
    375e:	ef e6       	ldi	r30, 0x6F	; 111
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	8f 7d       	andi	r24, 0xDF	; 223
    3766:	80 83       	st	Z, r24

        //Stop timer by removing the clock source
        TCCR1B &= ~(1 << CS12 | 1 << CS11 | 1 << CS10);
    3768:	e1 e8       	ldi	r30, 0x81	; 129
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	88 7f       	andi	r24, 0xF8	; 248
    3770:	80 83       	st	Z, r24

        //Reset the timer register
        TCNT1 = 0x00;
    3772:	10 92 85 00 	sts	0x0085, r1
    3776:	10 92 84 00 	sts	0x0084, r1
            //      A timeout between 5 mS and 64 mS is therefore needed.
            if (Timer_TimeDifference(reading_timer) > READING_TIMEOUT_MS)
            {
                ERROR("Timeout while capturing data");
                EnableInputCapture(false);
                state = DHT_READING_REQUEST;
    377a:	10 92 b4 03 	sts	0x03B4, r1
                init_time = Timer_GetMilliseconds();
    377e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    3782:	60 93 0f 04 	sts	0x040F, r22
    3786:	70 93 10 04 	sts	0x0410, r23
    378a:	80 93 11 04 	sts	0x0411, r24
    378e:	90 93 12 04 	sts	0x0412, r25
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
                return DHT_POWERUP;
    379a:	82 e0       	ldi	r24, 0x02	; 2
    379c:	0b c0       	rjmp	.+22     	; 0x37b4 <libDHT22_Update+0x1ce>
            }
            break;

        default:
            sc_assert_fail();
    379e:	4e e3       	ldi	r20, 0x3E	; 62
    37a0:	5e e0       	ldi	r21, 0x0E	; 14
    37a2:	67 e2       	ldi	r22, 0x27	; 39
    37a4:	71 e0       	ldi	r23, 0x01	; 1
    37a6:	8e e2       	ldi	r24, 0x2E	; 46
    37a8:	9e e0       	ldi	r25, 0x0E	; 14
    37aa:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

static dht_state_type ReadingStateMachine(void)
{
    static dht_reading_state_type state = DHT_READING_REQUEST;
    static uint32_t reading_timer;
    dht_state_type next_dht_state = DHT_READING;
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	01 c0       	rjmp	.+2      	; 0x37b4 <libDHT22_Update+0x1ce>
            }

            //NOTE: According to the DHT22-datasheet a measurement takes 5 mS,
            //      with FOSC 8 MHz and 8 as prescaler the timer overflows in 64 mS.
            //      A timeout between 5 mS and 64 mS is therefore needed.
            if (Timer_TimeDifference(reading_timer) > READING_TIMEOUT_MS)
    37b2:	81 2f       	mov	r24, r17

        case DHT_IDLE:
            break;

        case DHT_READING:
            dht22_state = ReadingStateMachine();
    37b4:	80 93 1c 04 	sts	0x041C, r24
            break;
    37b8:	d9 c0       	rjmp	.+434    	; 0x396c <libDHT22_Update+0x386>
static void DecodeTimings(void)
{
    uint8_t bit_index;
    uint8_t byte_index;
    uint8_t index;
    uint8_t data[5] = {0, 0, 0, 0, 0};
    37ba:	de 01       	movw	r26, r28
    37bc:	11 96       	adiw	r26, 0x01	; 1
    37be:	85 e0       	ldi	r24, 0x05	; 5
    37c0:	fd 01       	movw	r30, r26
    37c2:	11 92       	st	Z+, r1
    37c4:	8a 95       	dec	r24
    37c6:	e9 f7       	brne	.-6      	; 0x37c2 <libDHT22_Update+0x1dc>
    uint16_t prev = pulse_timings[TIMINGS_INDEX_OFFSET - 1];
    37c8:	40 91 b9 03 	lds	r20, 0x03B9
    37cc:	50 91 ba 03 	lds	r21, 0x03BA

    for (byte_index = 0; byte_index < 5; ++byte_index)
    37d0:	d1 2c       	mov	r13, r1
    {
        for (bit_index = 0; bit_index < 8; ++bit_index)
        {
            index = (byte_index << 3) + bit_index + TIMINGS_INDEX_OFFSET;
    37d2:	0f 2e       	mov	r0, r31
    37d4:	f7 e0       	ldi	r31, 0x07	; 7
    37d6:	bf 2e       	mov	r11, r31
    37d8:	f0 2d       	mov	r31, r0
    37da:	c1 2c       	mov	r12, r1
            if (pulse_timings[index] - prev > LOW_HIGH_LIMIT)
            {
                data[byte_index] |= (1 << (7 - bit_index));
    37dc:	01 e0       	ldi	r16, 0x01	; 1
    37de:	10 e0       	ldi	r17, 0x00	; 0
    37e0:	2a c0       	rjmp	.+84     	; 0x3836 <libDHT22_Update+0x250>
    for (byte_index = 0; byte_index < 5; ++byte_index)
    {
        for (bit_index = 0; bit_index < 8; ++bit_index)
        {
            index = (byte_index << 3) + bit_index + TIMINGS_INDEX_OFFSET;
            if (pulse_timings[index] - prev > LOW_HIGH_LIMIT)
    37e2:	8f 2d       	mov	r24, r15
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	fc 01       	movw	r30, r24
    37e8:	ee 0f       	add	r30, r30
    37ea:	ff 1f       	adc	r31, r31
    37ec:	eb 54       	subi	r30, 0x4B	; 75
    37ee:	fc 4f       	sbci	r31, 0xFC	; 252
    37f0:	60 81       	ld	r22, Z
    37f2:	71 81       	ldd	r23, Z+1	; 0x01
    37f4:	fb 01       	movw	r30, r22
    37f6:	e4 1b       	sub	r30, r20
    37f8:	f5 0b       	sbc	r31, r21
    37fa:	e5 36       	cpi	r30, 0x65	; 101
    37fc:	f1 05       	cpc	r31, r1
    37fe:	50 f0       	brcs	.+20     	; 0x3814 <libDHT22_Update+0x22e>
            {
                data[byte_index] |= (1 << (7 - bit_index));
    3800:	6c 91       	ld	r22, X
    3802:	a8 01       	movw	r20, r16
    3804:	02 2e       	mov	r0, r18
    3806:	02 c0       	rjmp	.+4      	; 0x380c <libDHT22_Update+0x226>
    3808:	44 0f       	add	r20, r20
    380a:	55 1f       	adc	r21, r21
    380c:	0a 94       	dec	r0
    380e:	e2 f7       	brpl	.-8      	; 0x3808 <libDHT22_Update+0x222>
    3810:	46 2b       	or	r20, r22
    3812:	4c 93       	st	X, r20
            }
            prev = pulse_timings[index];
    3814:	fc 01       	movw	r30, r24
    3816:	ee 0f       	add	r30, r30
    3818:	ff 1f       	adc	r31, r31
    381a:	eb 54       	subi	r30, 0x4B	; 75
    381c:	fc 4f       	sbci	r31, 0xFC	; 252
    381e:	40 81       	ld	r20, Z
    3820:	51 81       	ldd	r21, Z+1	; 0x01
    3822:	f3 94       	inc	r15
    3824:	21 50       	subi	r18, 0x01	; 1
    3826:	31 09       	sbc	r19, r1
    uint8_t data[5] = {0, 0, 0, 0, 0};
    uint16_t prev = pulse_timings[TIMINGS_INDEX_OFFSET - 1];

    for (byte_index = 0; byte_index < 5; ++byte_index)
    {
        for (bit_index = 0; bit_index < 8; ++bit_index)
    3828:	fe 10       	cpse	r15, r14
    382a:	db cf       	rjmp	.-74     	; 0x37e2 <libDHT22_Update+0x1fc>
    uint8_t byte_index;
    uint8_t index;
    uint8_t data[5] = {0, 0, 0, 0, 0};
    uint16_t prev = pulse_timings[TIMINGS_INDEX_OFFSET - 1];

    for (byte_index = 0; byte_index < 5; ++byte_index)
    382c:	d3 94       	inc	r13
    382e:	11 96       	adiw	r26, 0x01	; 1
    3830:	f5 e0       	ldi	r31, 0x05	; 5
    3832:	df 16       	cp	r13, r31
    3834:	89 f0       	breq	.+34     	; 0x3858 <libDHT22_Update+0x272>
    {
        for (bit_index = 0; bit_index < 8; ++bit_index)
        {
            index = (byte_index << 3) + bit_index + TIMINGS_INDEX_OFFSET;
    3836:	8d 2d       	mov	r24, r13
    3838:	88 0f       	add	r24, r24
    383a:	88 0f       	add	r24, r24
    383c:	88 0f       	add	r24, r24
    383e:	0f 2e       	mov	r0, r31
    3840:	fb e0       	ldi	r31, 0x0B	; 11
    3842:	ef 2e       	mov	r14, r31
    3844:	f0 2d       	mov	r31, r0
    3846:	e8 0e       	add	r14, r24
    3848:	0f 2e       	mov	r0, r31
    384a:	f3 e0       	ldi	r31, 0x03	; 3
    384c:	ff 2e       	mov	r15, r31
    384e:	f0 2d       	mov	r31, r0
    3850:	f8 0e       	add	r15, r24
    3852:	2b 2d       	mov	r18, r11
    3854:	3c 2d       	mov	r19, r12
    3856:	c5 cf       	rjmp	.-118    	; 0x37e2 <libDHT22_Update+0x1fc>
/// @param  *data Pointer to array with data
/// @return bool Result
///
static bool IsDataValid(uint8_t *data)
{
    return (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF));
    3858:	69 81       	ldd	r22, Y+1	; 0x01
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	8a 80       	ldd	r8, Y+2	; 0x02
    385e:	91 2c       	mov	r9, r1
    3860:	ab 80       	ldd	r10, Y+3	; 0x03
    3862:	b1 2c       	mov	r11, r1
    3864:	0c 81       	ldd	r16, Y+4	; 0x04
    3866:	10 e0       	ldi	r17, 0x00	; 0
    3868:	2d 81       	ldd	r18, Y+5	; 0x05
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	cb 01       	movw	r24, r22
    386e:	88 0d       	add	r24, r8
    3870:	99 1d       	adc	r25, r9
    3872:	8a 0d       	add	r24, r10
    3874:	9b 1d       	adc	r25, r11
    3876:	80 0f       	add	r24, r16
    3878:	91 1f       	adc	r25, r17
    387a:	99 27       	eor	r25, r25
            }
            prev = pulse_timings[index];
        }
    }

    if (IsDataValid(data) == true)
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	09 f0       	breq	.+2      	; 0x3884 <libDHT22_Update+0x29e>
    3882:	4e c0       	rjmp	.+156    	; 0x3920 <libDHT22_Update+0x33a>
/// @param  fractional The fractional part of the float
/// @return float The resulting float
///
static float ConvertToFloat(uint8_t integral, uint8_t fractional)
{
    float data = (integral << 8);
    3884:	76 2f       	mov	r23, r22
    3886:	66 27       	eor	r22, r22
    3888:	88 27       	eor	r24, r24
    388a:	77 fd       	sbrc	r23, 7
    388c:	80 95       	com	r24
    388e:	98 2f       	mov	r25, r24
    3890:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatsisf>
    3894:	6b 01       	movw	r12, r22
    3896:	7c 01       	movw	r14, r24
    data += fractional;
    3898:	b4 01       	movw	r22, r8
    389a:	88 27       	eor	r24, r24
    389c:	77 fd       	sbrc	r23, 7
    389e:	80 95       	com	r24
    38a0:	98 2f       	mov	r25, r24
    38a2:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatsisf>
    38a6:	9b 01       	movw	r18, r22
    38a8:	ac 01       	movw	r20, r24
    38aa:	c7 01       	movw	r24, r14
    38ac:	b6 01       	movw	r22, r12
    38ae:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__addsf3>
    data /= 10;
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e2       	ldi	r20, 0x20	; 32
    38b8:	51 e4       	ldi	r21, 0x41	; 65
    38ba:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
        }
    }

    if (IsDataValid(data) == true)
    {
        sensor_reading.humidity = ConvertToFloat(data[0], data[1]);
    38be:	60 93 13 04 	sts	0x0413, r22
    38c2:	70 93 14 04 	sts	0x0414, r23
    38c6:	80 93 15 04 	sts	0x0415, r24
    38ca:	90 93 16 04 	sts	0x0416, r25
/// @param  fractional The fractional part of the float
/// @return float The resulting float
///
static float ConvertToFloat(uint8_t integral, uint8_t fractional)
{
    float data = (integral << 8);
    38ce:	7a 2d       	mov	r23, r10
    38d0:	66 27       	eor	r22, r22
    38d2:	88 27       	eor	r24, r24
    38d4:	77 fd       	sbrc	r23, 7
    38d6:	80 95       	com	r24
    38d8:	98 2f       	mov	r25, r24
    38da:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatsisf>
    38de:	6b 01       	movw	r12, r22
    38e0:	7c 01       	movw	r14, r24
    data += fractional;
    38e2:	b8 01       	movw	r22, r16
    38e4:	88 27       	eor	r24, r24
    38e6:	77 fd       	sbrc	r23, 7
    38e8:	80 95       	com	r24
    38ea:	98 2f       	mov	r25, r24
    38ec:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatsisf>
    38f0:	9b 01       	movw	r18, r22
    38f2:	ac 01       	movw	r20, r24
    38f4:	c7 01       	movw	r24, r14
    38f6:	b6 01       	movw	r22, r12
    38f8:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__addsf3>
    data /= 10;
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    }

    if (IsDataValid(data) == true)
    {
        sensor_reading.humidity = ConvertToFloat(data[0], data[1]);
        sensor_reading.temperature = ConvertToFloat(data[2], data[3]);
    3908:	60 93 17 04 	sts	0x0417, r22
    390c:	70 93 18 04 	sts	0x0418, r23
    3910:	80 93 19 04 	sts	0x0419, r24
    3914:	90 93 1a 04 	sts	0x041A, r25
        sensor_reading.status = true;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	80 93 1b 04 	sts	0x041B, r24
    391e:	10 c0       	rjmp	.+32     	; 0x3940 <libDHT22_Update+0x35a>
    }
    else
    {
        ERROR("Invalid data");
    3920:	83 e7       	ldi	r24, 0x73	; 115
    3922:	92 e0       	ldi	r25, 0x02	; 2
    3924:	9f 93       	push	r25
    3926:	8f 93       	push	r24
    3928:	82 e1       	ldi	r24, 0x12	; 18
    392a:	9e e0       	ldi	r25, 0x0E	; 14
    392c:	9f 93       	push	r25
    392e:	8f 93       	push	r24
    3930:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        sensor_reading.status = false;
    3934:	10 92 1b 04 	sts	0x041B, r1
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
            dht22_state = ReadingStateMachine();
            break;

        case DHT_DECODING:
            DecodeTimings();
            init_time = Timer_GetMilliseconds();
    3940:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    3944:	60 93 0f 04 	sts	0x040F, r22
    3948:	70 93 10 04 	sts	0x0410, r23
    394c:	80 93 11 04 	sts	0x0411, r24
    3950:	90 93 12 04 	sts	0x0412, r25

            //TODO: Power up or new state? save last reading time?
            dht22_state = DHT_IDLE;
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	80 93 1c 04 	sts	0x041C, r24
            break;
    395a:	08 c0       	rjmp	.+16     	; 0x396c <libDHT22_Update+0x386>

        case DHT_UNINITIALIZED:
        default:
            sc_assert_fail();
    395c:	49 e8       	ldi	r20, 0x89	; 137
    395e:	5e e0       	ldi	r21, 0x0E	; 14
    3960:	67 e9       	ldi	r22, 0x97	; 151
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	89 e7       	ldi	r24, 0x79	; 121
    3966:	9e e0       	ldi	r25, 0x0E	; 14
    3968:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
            break;
    }
    return;
}
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	bf 90       	pop	r11
    3988:	af 90       	pop	r10
    398a:	9f 90       	pop	r9
    398c:	8f 90       	pop	r8
    398e:	08 95       	ret

00003990 <libDHT22_GetSensorReading>:
/// @param  None
/// @return dht22_data_type Struct with the sensor readings and its status
///
dht22_data_type libDHT22_GetSensorReading(void)
{
    dht22_data_type return_data = sensor_reading;
    3990:	29 e0       	ldi	r18, 0x09	; 9
    3992:	e3 e1       	ldi	r30, 0x13	; 19
    3994:	f4 e0       	ldi	r31, 0x04	; 4
    3996:	dc 01       	movw	r26, r24
    3998:	01 90       	ld	r0, Z+
    399a:	0d 92       	st	X+, r0
    399c:	2a 95       	dec	r18
    399e:	e1 f7       	brne	.-8      	; 0x3998 <libDHT22_GetSensorReading+0x8>
    sensor_reading.status = false;
    39a0:	10 92 1b 04 	sts	0x041B, r1
    return return_data;
}
    39a4:	08 95       	ret

000039a6 <libDHT22_IsReadingValid>:
/// @return bool true if valid, otherwise false
///
bool libDHT22_IsReadingValid(void)
{
    return sensor_reading.status;
}
    39a6:	80 91 1b 04 	lds	r24, 0x041B
    39aa:	08 95       	ret

000039ac <libDHT22_StartReading>:
/// @param  None
/// @return bool true if a new reading is started, otherwise false
///
void libDHT22_StartReading(void)
{
    if (libDHT22_IsIdle() == true)
    39ac:	80 91 1c 04 	lds	r24, 0x041C
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	19 f4       	brne	.+6      	; 0x39ba <libDHT22_StartReading+0xe>
    {
        dht22_state = DHT_READING;
    39b4:	83 e0       	ldi	r24, 0x03	; 3
    39b6:	80 93 1c 04 	sts	0x041C, r24
    39ba:	08 95       	ret

000039bc <PostCallback>:
/// @param  None
/// @return None
///
static void PostCallback(void)
{
    ReleaseCS();
    39bc:	5a 9a       	sbi	0x0b, 2	; 11
    39be:	08 95       	ret

000039c0 <PreCallback>:
/// @param  None
/// @return None
///
static void PreCallback(void)
{
    libSPI_SetMode(SPIMODE);
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	0e 94 c3 13 	call	0x2786	; 0x2786 <libSPI_SetMode>
    PullCS();
    39c6:	5a 98       	cbi	0x0b, 2	; 11
    39c8:	08 95       	ret

000039ca <libFlash_InitHW>:
/// @param  None
/// @return None
///
void libFlash_InitHW(void)
{
    InitCS();
    39ca:	52 9a       	sbi	0x0a, 2	; 10
    ReleaseCS();
    39cc:	5a 9a       	sbi	0x0b, 2	; 11

    InitWP();
    39ce:	3e 9a       	sbi	0x07, 6	; 7
    PullWP();
    39d0:	46 98       	cbi	0x08, 6	; 8
    39d2:	08 95       	ret

000039d4 <libFlash_GetId>:

    return;
}

void libFlash_GetId(ifcflash_id_type *id)
{
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	ec 01       	movw	r28, r24
    libSPI_WriteByte(CMD_JEDEC_ID, PreCallback, NULL);
    39da:	40 e0       	ldi	r20, 0x00	; 0
    39dc:	50 e0       	ldi	r21, 0x00	; 0
    39de:	60 ee       	ldi	r22, 0xE0	; 224
    39e0:	7c e1       	ldi	r23, 0x1C	; 28
    39e2:	8f e9       	ldi	r24, 0x9F	; 159
    39e4:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_Read(id, sizeof(ifcflash_id_type), NULL, PostCallback);
    39e8:	2e ed       	ldi	r18, 0xDE	; 222
    39ea:	3c e1       	ldi	r19, 0x1C	; 28
    39ec:	40 e0       	ldi	r20, 0x00	; 0
    39ee:	50 e0       	ldi	r21, 0x00	; 0
    39f0:	63 e0       	ldi	r22, 0x03	; 3
    39f2:	70 e0       	ldi	r23, 0x00	; 0
    39f4:	ce 01       	movw	r24, r28
    39f6:	0e 94 86 13 	call	0x270c	; 0x270c <libSPI_Read>

    DEBUG("Manufacturer: 0x%02X\r\n", id->manufacturer);
    39fa:	88 81       	ld	r24, Y
    39fc:	1f 92       	push	r1
    39fe:	8f 93       	push	r24
    3a00:	89 ed       	ldi	r24, 0xD9	; 217
    3a02:	9e e0       	ldi	r25, 0x0E	; 14
    3a04:	9f 93       	push	r25
    3a06:	8f 93       	push	r24
    3a08:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Memory type: 0x%02X\r\n", id->memory_type);
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	1f 92       	push	r1
    3a10:	8f 93       	push	r24
    3a12:	83 ec       	ldi	r24, 0xC3	; 195
    3a14:	9e e0       	ldi	r25, 0x0E	; 14
    3a16:	9f 93       	push	r25
    3a18:	8f 93       	push	r24
    3a1a:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Capacity: 0x%02X\r\n", id->capacity);
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	1f 92       	push	r1
    3a22:	8f 93       	push	r24
    3a24:	80 eb       	ldi	r24, 0xB0	; 176
    3a26:	9e e0       	ldi	r25, 0x0E	; 14
    3a28:	9f 93       	push	r25
    3a2a:	8f 93       	push	r24
    3a2c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    3a30:	8d b7       	in	r24, 0x3d	; 61
    3a32:	9e b7       	in	r25, 0x3e	; 62
    3a34:	0c 96       	adiw	r24, 0x0c	; 12
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	9e bf       	out	0x3e, r25	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	8d bf       	out	0x3d, r24	; 61

    return;
}
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	08 95       	ret

00003a46 <libFlash_Test>:
{
    libFlash_Test();
}

void libFlash_Test(void)
{
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <libFlash_Test+0x6>
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <libFlash_Test+0x8>
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <libFlash_Test+0xa>
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    ifcflash_id_type id;
    libFlash_GetId(&id);
    3a54:	ce 01       	movw	r24, r28
    3a56:	01 96       	adiw	r24, 0x01	; 1
    3a58:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <libFlash_GetId>

    uint8_t reg1;
    uint8_t reg2;
    uint8_t reg3;

    libSPI_WriteByte(CMD_READ_SREG1, PostCallback, NULL);
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	6e ed       	ldi	r22, 0xDE	; 222
    3a62:	7c e1       	ldi	r23, 0x1C	; 28
    3a64:	85 e0       	ldi	r24, 0x05	; 5
    3a66:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_ReadByte(&reg1, NULL, PostCallback);
    3a6a:	4e ed       	ldi	r20, 0xDE	; 222
    3a6c:	5c e1       	ldi	r21, 0x1C	; 28
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	70 e0       	ldi	r23, 0x00	; 0
    3a72:	ce 01       	movw	r24, r28
    3a74:	04 96       	adiw	r24, 0x04	; 4
    3a76:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <libSPI_ReadByte>

    libSPI_WriteByte(CMD_READ_SREG2, PostCallback, NULL);
    3a7a:	40 e0       	ldi	r20, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	6e ed       	ldi	r22, 0xDE	; 222
    3a80:	7c e1       	ldi	r23, 0x1C	; 28
    3a82:	85 e3       	ldi	r24, 0x35	; 53
    3a84:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_ReadByte(&reg2, NULL, PostCallback);
    3a88:	4e ed       	ldi	r20, 0xDE	; 222
    3a8a:	5c e1       	ldi	r21, 0x1C	; 28
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	ce 01       	movw	r24, r28
    3a92:	05 96       	adiw	r24, 0x05	; 5
    3a94:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <libSPI_ReadByte>

    libSPI_WriteByte(CMD_READ_SREG3, PostCallback, NULL);
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	50 e0       	ldi	r21, 0x00	; 0
    3a9c:	6e ed       	ldi	r22, 0xDE	; 222
    3a9e:	7c e1       	ldi	r23, 0x1C	; 28
    3aa0:	83 e3       	ldi	r24, 0x33	; 51
    3aa2:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_ReadByte(&reg3, NULL, PostCallback);
    3aa6:	4e ed       	ldi	r20, 0xDE	; 222
    3aa8:	5c e1       	ldi	r21, 0x1C	; 28
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	ce 01       	movw	r24, r28
    3ab0:	06 96       	adiw	r24, 0x06	; 6
    3ab2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <libSPI_ReadByte>

    DEBUG("SREG1: 0x%02x\r\n", reg1);
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	1f 92       	push	r1
    3aba:	8f 93       	push	r24
    3abc:	80 e1       	ldi	r24, 0x10	; 16
    3abe:	9f e0       	ldi	r25, 0x0F	; 15
    3ac0:	9f 93       	push	r25
    3ac2:	8f 93       	push	r24
    3ac4:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("SREG2: 0x%02x\r\n", reg2);
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	1f 92       	push	r1
    3acc:	8f 93       	push	r24
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	9f e0       	ldi	r25, 0x0F	; 15
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("SREG3: 0x%02x\r\n", reg3);
    3ada:	8e 81       	ldd	r24, Y+6	; 0x06
    3adc:	1f 92       	push	r1
    3ade:	8f 93       	push	r24
    3ae0:	80 ef       	ldi	r24, 0xF0	; 240
    3ae2:	9e e0       	ldi	r25, 0x0E	; 14
    3ae4:	9f 93       	push	r25
    3ae6:	8f 93       	push	r24
    3ae8:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61

    return;
}
    3af6:	26 96       	adiw	r28, 0x06	; 6
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	08 95       	ret

00003b08 <libFlash_Init>:
    return;
}

void libFlash_Init(void)
{
    libFlash_Test();
    3b08:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <libFlash_Test>
    3b0c:	08 95       	ret

00003b0e <libLED_Enable>:
/// @param  enable true to enable, false to disable
/// @return None
///
void libLED_Enable(uint8_t index __attribute__ ((unused)), bool enable)
{
    if (enable == true)
    3b0e:	66 23       	and	r22, r22
    3b10:	11 f0       	breq	.+4      	; 0x3b16 <libLED_Enable+0x8>
    {
        PORTD |= (1 << LED_PIN);
    3b12:	5d 9a       	sbi	0x0b, 5	; 11
    3b14:	08 95       	ret
    }
    else
    {
        PORTD &= ~(1 << LED_PIN);
    3b16:	5d 98       	cbi	0x0b, 5	; 11
    3b18:	08 95       	ret

00003b1a <PostCallback>:
/// @param  None
/// @return None
///
static void PostCallback(void)
{
    PORTD |= (1 << SS); //Pull SS high to release device
    3b1a:	5c 9a       	sbi	0x0b, 4	; 11
    3b1c:	08 95       	ret

00003b1e <WriteRegister>:
/// @param  address Address of register.
/// @param  register_data Value to write.
/// @return None
///
static void WriteRegister(uint8_t address, uint8_t register_data)
{
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	c8 2f       	mov	r28, r24
    3b24:	d6 2f       	mov	r29, r22
    sc_assert(address < 0x20);
    3b26:	80 32       	cpi	r24, 0x20	; 32
    3b28:	40 f0       	brcs	.+16     	; 0x3b3a <WriteRegister+0x1c>
    3b2a:	4a e3       	ldi	r20, 0x3A	; 58
    3b2c:	50 e1       	ldi	r21, 0x10	; 16
    3b2e:	65 e2       	ldi	r22, 0x25	; 37
    3b30:	73 e0       	ldi	r23, 0x03	; 3
    3b32:	87 e2       	ldi	r24, 0x27	; 39
    3b34:	90 e1       	ldi	r25, 0x10	; 16
    3b36:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    libSPI_WriteByte(INST_WRITE, &PreCallback, NULL);
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	62 ee       	ldi	r22, 0xE2	; 226
    3b40:	7d e1       	ldi	r23, 0x1D	; 29
    3b42:	82 e1       	ldi	r24, 0x12	; 18
    3b44:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_WriteByte(address, NULL, NULL);
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	8c 2f       	mov	r24, r28
    3b52:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_WriteByte(register_data, NULL, &PostCallback);
    3b56:	4d e8       	ldi	r20, 0x8D	; 141
    3b58:	5d e1       	ldi	r21, 0x1D	; 29
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	8d 2f       	mov	r24, r29
    3b60:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    return;
}
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	08 95       	ret

00003b6a <ReadRegister>:
///
/// @param  address Address of register.
/// @return uint8_t Register value
///
static uint8_t ReadRegister(uint8_t address)
{
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	1f 92       	push	r1
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	18 2f       	mov	r17, r24
    sc_assert(address < 0x20);
    3b78:	80 32       	cpi	r24, 0x20	; 32
    3b7a:	40 f0       	brcs	.+16     	; 0x3b8c <ReadRegister+0x22>
    3b7c:	4c e5       	ldi	r20, 0x5C	; 92
    3b7e:	50 e1       	ldi	r21, 0x10	; 16
    3b80:	65 e3       	ldi	r22, 0x35	; 53
    3b82:	73 e0       	ldi	r23, 0x03	; 3
    3b84:	89 e4       	ldi	r24, 0x49	; 73
    3b86:	90 e1       	ldi	r25, 0x10	; 16
    3b88:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_data;

    libSPI_WriteByte(INST_READ, &PreCallback, NULL);
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	62 ee       	ldi	r22, 0xE2	; 226
    3b92:	7d e1       	ldi	r23, 0x1D	; 29
    3b94:	83 e1       	ldi	r24, 0x13	; 19
    3b96:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_WriteByte(address, NULL, NULL);
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	81 2f       	mov	r24, r17
    3ba4:	0e 94 55 13 	call	0x26aa	; 0x26aa <libSPI_WriteByte>
    libSPI_ReadByte(&register_data, NULL, &PostCallback);
    3ba8:	4d e8       	ldi	r20, 0x8D	; 141
    3baa:	5d e1       	ldi	r21, 0x1D	; 29
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <libSPI_ReadByte>
    return register_data;
}
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	0f 90       	pop	r0
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	08 95       	ret

00003bc4 <PreCallback>:
/// @param  None
/// @return None
///
static void PreCallback(void)
{
    libSPI_SetMode(SPIMODE);
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	0e 94 c3 13 	call	0x2786	; 0x2786 <libSPI_SetMode>
    PORTD &= ~(1 << SS); //Pull SS low to select device
    3bca:	5c 98       	cbi	0x0b, 4	; 11
    3bcc:	08 95       	ret

00003bce <libMCP79510_HWInit>:
/// @return None
///
void libMCP79510_HWInit(void)
{
    //Set SS as output and pull high to release device.
    DDRD |= (1 << SS);
    3bce:	54 9a       	sbi	0x0a, 4	; 10
    PORTD |= (1 << SS);
    3bd0:	5c 9a       	sbi	0x0b, 4	; 11

    //Set MFP as input with an pull-up active.
    DDRD &= ~(1 << MFP);
    3bd2:	53 98       	cbi	0x0a, 3	; 10
    PORTD |= (1 << MFP);
    3bd4:	5b 9a       	sbi	0x0b, 3	; 11
    3bd6:	08 95       	ret

00003bd8 <libMCP79510_GetSecond>:
///
/// @param  *sec Pointer to variable where the second will be stored.
/// @return None
///
void libMCP79510_GetSecond(uint8_t *sec)
{
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	ec 01       	movw	r28, r24
    uint8_t register_content;
    register_content = ReadRegister(REG_TC_SEC);
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    register_content &= ~(1 << REG_TC_SEC_OSC_BIT);

    *sec = BCDToDecimal(register_content);
    3be4:	8f 77       	andi	r24, 0x7F	; 127
    3be6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3bea:	88 83       	st	Y, r24
    return;
}
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	08 95       	ret

00003bf2 <libMCP79510_SetAlarmSeconds>:
/// @param  sec Alarm second to set.
/// @param  alarm_index Alarm index, 0 or 1.
/// @return None
///
void libMCP79510_SetAlarmSeconds(uint8_t sec, uint8_t alarm_index)
{
    3bf2:	cf 93       	push	r28
    sc_assert(sec < 60);
    3bf4:	8c 33       	cpi	r24, 0x3C	; 60
    3bf6:	40 f0       	brcs	.+16     	; 0x3c08 <libMCP79510_SetAlarmSeconds+0x16>
    3bf8:	4e e1       	ldi	r20, 0x1E	; 30
    3bfa:	50 e1       	ldi	r21, 0x10	; 16
    3bfc:	64 ec       	ldi	r22, 0xC4	; 196
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	8b e0       	ldi	r24, 0x0B	; 11
    3c02:	90 e1       	ldi	r25, 0x10	; 16
    3c04:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    sc_assert(alarm_index < 2);
    3c08:	62 30       	cpi	r22, 0x02	; 2
    3c0a:	40 f0       	brcs	.+16     	; 0x3c1c <libMCP79510_SetAlarmSeconds+0x2a>
    3c0c:	4b ef       	ldi	r20, 0xFB	; 251
    3c0e:	5f e0       	ldi	r21, 0x0F	; 15
    3c10:	65 ec       	ldi	r22, 0xC5	; 197
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	88 ee       	ldi	r24, 0xE8	; 232
    3c16:	9f e0       	ldi	r25, 0x0F	; 15
    3c18:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_address;

    register_address = (alarm_index == 0) ? REG_ALARM0_SEC :
    3c1c:	61 11       	cpse	r22, r1
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <libMCP79510_SetAlarmSeconds+0x32>
    3c20:	cc e0       	ldi	r28, 0x0C	; 12
    3c22:	01 c0       	rjmp	.+2      	; 0x3c26 <libMCP79510_SetAlarmSeconds+0x34>
    3c24:	c3 e1       	ldi	r28, 0x13	; 19
                       REG_ALARM1_SEC;
    SetDecimalRegisterValue(register_address, sec);
    3c26:	0e 94 07 0a 	call	0x140e	; 0x140e <DecimalToBCD>
    3c2a:	68 2f       	mov	r22, r24
    3c2c:	8c 2f       	mov	r24, r28
    3c2e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3c32:	cf 91       	pop	r28
    3c34:	08 95       	ret

00003c36 <libMCP79510_GetMinute>:
///
/// @param  *minute Pointer to variable where the minute will be stored.
/// @return None
///
void libMCP79510_GetMinute(uint8_t *minute)
{
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	ec 01       	movw	r28, r24
    *minute = GetDecimalRegisterValue(REG_TC_MIN);
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
    3c3e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3c42:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3c46:	88 83       	st	Y, r24
    return;
}
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	08 95       	ret

00003c4e <libMCP79510_SetAlarmMinute>:
/// @param  minute Alarm minute to set.
/// @param  alarm_index Alarm index, 0 or 1.
/// @return None
///
void libMCP79510_SetAlarmMinute(uint8_t minute, uint8_t alarm_index)
{
    3c4e:	cf 93       	push	r28
    sc_assert(minute < 60);
    3c50:	8c 33       	cpi	r24, 0x3C	; 60
    3c52:	40 f0       	brcs	.+16     	; 0x3c64 <libMCP79510_SetAlarmMinute+0x16>
    3c54:	4c ed       	ldi	r20, 0xDC	; 220
    3c56:	5f e0       	ldi	r21, 0x0F	; 15
    3c58:	62 ef       	ldi	r22, 0xF2	; 242
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	89 ec       	ldi	r24, 0xC9	; 201
    3c5e:	9f e0       	ldi	r25, 0x0F	; 15
    3c60:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    sc_assert(alarm_index < 2);
    3c64:	62 30       	cpi	r22, 0x02	; 2
    3c66:	40 f0       	brcs	.+16     	; 0x3c78 <libMCP79510_SetAlarmMinute+0x2a>
    3c68:	49 eb       	ldi	r20, 0xB9	; 185
    3c6a:	5f e0       	ldi	r21, 0x0F	; 15
    3c6c:	63 ef       	ldi	r22, 0xF3	; 243
    3c6e:	70 e0       	ldi	r23, 0x00	; 0
    3c70:	86 ea       	ldi	r24, 0xA6	; 166
    3c72:	9f e0       	ldi	r25, 0x0F	; 15
    3c74:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_address;

    register_address = (alarm_index == 0) ? REG_ALARM0_MIN :
    3c78:	61 11       	cpse	r22, r1
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <libMCP79510_SetAlarmMinute+0x32>
    3c7c:	cd e0       	ldi	r28, 0x0D	; 13
    3c7e:	01 c0       	rjmp	.+2      	; 0x3c82 <libMCP79510_SetAlarmMinute+0x34>
    3c80:	c4 e1       	ldi	r28, 0x14	; 20
                       REG_ALARM1_MIN;
    SetDecimalRegisterValue(register_address, minute);
    3c82:	0e 94 07 0a 	call	0x140e	; 0x140e <DecimalToBCD>
    3c86:	68 2f       	mov	r22, r24
    3c88:	8c 2f       	mov	r24, r28
    3c8a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3c8e:	cf 91       	pop	r28
    3c90:	08 95       	ret

00003c92 <libMCP79510_GetHour>:
///
/// @param  *hour Pointer to variable where the hour will be stored.
/// @return None
///
void libMCP79510_GetHour(uint8_t *hour)
{
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	1f 92       	push	r1
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	8c 01       	movw	r16, r24
    uint8_t register_content;
    register_content = ReadRegister(REG_TC_HOUR);
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3ca8:	89 83       	std	Y+1, r24	; 0x01

    //Check if 24-hour mode is used.
    if (!IsBitSet(REG_TC_HOUR_MODE_BIT, &register_content))
    3caa:	be 01       	movw	r22, r28
    3cac:	6f 5f       	subi	r22, 0xFF	; 255
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	86 e0       	ldi	r24, 0x06	; 6
    3cb2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <IsBitSet>
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	04 c0       	rjmp	.+8      	; 0x3cc2 <libMCP79510_GetHour+0x30>
    {
        register_content &= 0x3F;
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	8f 73       	andi	r24, 0x3F	; 63
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	03 c0       	rjmp	.+6      	; 0x3cc8 <libMCP79510_GetHour+0x36>
    }
    else
    {
        register_content &= 0x1F;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	8f 71       	andi	r24, 0x1F	; 31
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    }

    *hour = BCDToDecimal(register_content);
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3cce:	f8 01       	movw	r30, r16
    3cd0:	80 83       	st	Z, r24
    return;
}
    3cd2:	0f 90       	pop	r0
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	08 95       	ret

00003cde <libMCP79510_SetAlarmHour>:
/// @param  hour Alarm hour to set.
/// @param  alarm_index Alarm index, 0 or 1.
/// @return None
///
void libMCP79510_SetAlarmHour(uint8_t hour, uint8_t alarm_index)
{
    3cde:	ff 92       	push	r15
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	1f 92       	push	r1
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	18 2f       	mov	r17, r24
    //TODO: check after hour mode is known?
    sc_assert(hour < 24);
    3cf0:	88 31       	cpi	r24, 0x18	; 24
    3cf2:	40 f0       	brcs	.+16     	; 0x3d04 <libMCP79510_SetAlarmHour+0x26>
    3cf4:	4c e9       	ldi	r20, 0x9C	; 156
    3cf6:	5f e0       	ldi	r21, 0x0F	; 15
    3cf8:	6c e3       	ldi	r22, 0x3C	; 60
    3cfa:	71 e0       	ldi	r23, 0x01	; 1
    3cfc:	89 e8       	ldi	r24, 0x89	; 137
    3cfe:	9f e0       	ldi	r25, 0x0F	; 15
    3d00:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
    sc_assert(alarm_index < 2);
    3d04:	62 30       	cpi	r22, 0x02	; 2
    3d06:	40 f0       	brcs	.+16     	; 0x3d18 <libMCP79510_SetAlarmHour+0x3a>
    3d08:	49 e7       	ldi	r20, 0x79	; 121
    3d0a:	5f e0       	ldi	r21, 0x0F	; 15
    3d0c:	6d e3       	ldi	r22, 0x3D	; 61
    3d0e:	71 e0       	ldi	r23, 0x01	; 1
    3d10:	86 e6       	ldi	r24, 0x66	; 102
    3d12:	9f e0       	ldi	r25, 0x0F	; 15
    3d14:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_address = (alarm_index == 0) ? REG_ALARM0_HOUR :
    3d18:	61 11       	cpse	r22, r1
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <libMCP79510_SetAlarmHour+0x42>
    3d1c:	0e e0       	ldi	r16, 0x0E	; 14
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <libMCP79510_SetAlarmHour+0x44>
    3d20:	05 e1       	ldi	r16, 0x15	; 21
                               REG_ALARM1_HOUR;
    uint8_t register_content = ReadRegister(register_address);
    3d22:	80 2f       	mov	r24, r16
    3d24:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3d28:	89 83       	std	Y+1, r24	; 0x01
    uint8_t new_content;

    //Check if 24-hour mode is used.
    if (!IsBitSet(REG_TC_HOUR_MODE_BIT, &register_content))
    3d2a:	be 01       	movw	r22, r28
    3d2c:	6f 5f       	subi	r22, 0xFF	; 255
    3d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d30:	86 e0       	ldi	r24, 0x06	; 6
    3d32:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <IsBitSet>
    3d36:	81 11       	cpse	r24, r1
    3d38:	09 c0       	rjmp	.+18     	; 0x3d4c <libMCP79510_SetAlarmHour+0x6e>
    {
        new_content = (register_content & 0xC0) | DecimalToBCD(hour);
    3d3a:	69 81       	ldd	r22, Y+1	; 0x01
    3d3c:	60 7c       	andi	r22, 0xC0	; 192
    3d3e:	f6 2e       	mov	r15, r22
    3d40:	81 2f       	mov	r24, r17
    3d42:	0e 94 07 0a 	call	0x140e	; 0x140e <DecimalToBCD>
    3d46:	6f 2d       	mov	r22, r15
    3d48:	68 2b       	or	r22, r24
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <libMCP79510_SetAlarmHour+0x7e>
    }
    else
    {
        new_content = (register_content & 0xE0) | DecimalToBCD(hour);
    3d4c:	69 81       	ldd	r22, Y+1	; 0x01
    3d4e:	60 7e       	andi	r22, 0xE0	; 224
    3d50:	f6 2e       	mov	r15, r22
    3d52:	81 2f       	mov	r24, r17
    3d54:	0e 94 07 0a 	call	0x140e	; 0x140e <DecimalToBCD>
    3d58:	6f 2d       	mov	r22, r15
    3d5a:	68 2b       	or	r22, r24
    }

    WriteRegister(register_address, new_content);
    3d5c:	80 2f       	mov	r24, r16
    3d5e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3d62:	0f 90       	pop	r0
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	08 95       	ret

00003d70 <libMCP79510_GetDate>:
///
/// @param  *date Pointer to variable where the date will be stored.
/// @return None
///
void libMCP79510_GetDate(uint8_t *date)
{
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	ec 01       	movw	r28, r24
    *date = GetDecimalRegisterValue(REG_TC_DATE);
    3d76:	85 e0       	ldi	r24, 0x05	; 5
    3d78:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3d7c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3d80:	88 83       	st	Y, r24
    return;
}
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	08 95       	ret

00003d88 <libMCP79510_GetMonth>:
///
/// @param  *month Pointer to variable where the month will be stored.
/// @return None
///
void libMCP79510_GetMonth(uint8_t *month)
{
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	ec 01       	movw	r28, r24
    uint8_t register_content;
    register_content = ReadRegister(REG_TC_MONTH);
    3d8e:	86 e0       	ldi	r24, 0x06	; 6
    3d90:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    register_content &= 0x1F;

    *month = BCDToDecimal(register_content);
    3d94:	8f 71       	andi	r24, 0x1F	; 31
    3d96:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3d9a:	88 83       	st	Y, r24
    return;
}
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	08 95       	ret

00003da2 <libMCP79510_GetYear>:
///
/// @param  *year Pointer to variable where the year will be stored.
/// @return None
///
void libMCP79510_GetYear(uint8_t *year)
{
    3da2:	cf 93       	push	r28
    3da4:	df 93       	push	r29
    3da6:	ec 01       	movw	r28, r24
    *year = GetDecimalRegisterValue(REG_TC_YEAR);
    3da8:	87 e0       	ldi	r24, 0x07	; 7
    3daa:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3dae:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <BCDToDecimal>
    3db2:	88 83       	st	Y, r24
    return;
}
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	08 95       	ret

00003dba <libMCP79510_EnableOscillator>:
///
/// @param  enabled Set to true for enabling the oscillator.
/// @return None
///
void libMCP79510_EnableOscillator(bool enabled)
{
    3dba:	cf 93       	push	r28
    3dbc:	c8 2f       	mov	r28, r24
    uint8_t register_content;
    register_content = ReadRegister(REG_TC_SEC);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>

    if (enabled == true)
    3dc4:	cc 23       	and	r28, r28
    3dc6:	19 f0       	breq	.+6      	; 0x3dce <libMCP79510_EnableOscillator+0x14>
    {
        register_content |= (1 << REG_TC_SEC_OSC_BIT);
    3dc8:	68 2f       	mov	r22, r24
    3dca:	60 68       	ori	r22, 0x80	; 128
    3dcc:	02 c0       	rjmp	.+4      	; 0x3dd2 <libMCP79510_EnableOscillator+0x18>
    }
    else
    {
        register_content &= ~(1 << REG_TC_SEC_OSC_BIT);
    3dce:	68 2f       	mov	r22, r24
    3dd0:	6f 77       	andi	r22, 0x7F	; 127
    }

    WriteRegister(REG_TC_SEC, register_content);
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3dd8:	cf 91       	pop	r28
    3dda:	08 95       	ret

00003ddc <libMCP79510_EnableAlarm>:
///
/// @param  Index of alarm to enable, 0 or 1.
/// @return None
///
void libMCP79510_EnableAlarm(bool enable, uint8_t alarm_index)
{
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	d8 2f       	mov	r29, r24
    3de2:	c6 2f       	mov	r28, r22
    sc_assert(alarm_index < 2);
    3de4:	62 30       	cpi	r22, 0x02	; 2
    3de6:	40 f0       	brcs	.+16     	; 0x3df8 <libMCP79510_EnableAlarm+0x1c>
    3de8:	46 e5       	ldi	r20, 0x56	; 86
    3dea:	5f e0       	ldi	r21, 0x0F	; 15
    3dec:	61 e3       	ldi	r22, 0x31	; 49
    3dee:	72 e0       	ldi	r23, 0x02	; 2
    3df0:	83 e4       	ldi	r24, 0x43	; 67
    3df2:	9f e0       	ldi	r25, 0x0F	; 15
    3df4:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_data = ReadRegister(REG_TC_CONTROL);
    3df8:	88 e0       	ldi	r24, 0x08	; 8
    3dfa:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>

    if (enable == true)
    3dfe:	dd 23       	and	r29, r29
    3e00:	61 f0       	breq	.+24     	; 0x3e1a <libMCP79510_EnableAlarm+0x3e>
    {
        SetBitD(register_data, (REG_TC_CONTROL_ALM0_BIT + alarm_index));
    3e02:	cc 5f       	subi	r28, 0xFC	; 252
    3e04:	e1 e0       	ldi	r30, 0x01	; 1
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	af 01       	movw	r20, r30
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <libMCP79510_EnableAlarm+0x34>
    3e0c:	44 0f       	add	r20, r20
    3e0e:	55 1f       	adc	r21, r21
    3e10:	ca 95       	dec	r28
    3e12:	e2 f7       	brpl	.-8      	; 0x3e0c <libMCP79510_EnableAlarm+0x30>
    3e14:	68 2f       	mov	r22, r24
    3e16:	64 2b       	or	r22, r20
    3e18:	0c c0       	rjmp	.+24     	; 0x3e32 <libMCP79510_EnableAlarm+0x56>
    }
    else
    {
        ClearBit(register_data, (REG_TC_CONTROL_ALM0_BIT + alarm_index));
    3e1a:	cc 5f       	subi	r28, 0xFC	; 252
    3e1c:	41 e0       	ldi	r20, 0x01	; 1
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	9a 01       	movw	r18, r20
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <libMCP79510_EnableAlarm+0x4c>
    3e24:	22 0f       	add	r18, r18
    3e26:	33 1f       	adc	r19, r19
    3e28:	ca 95       	dec	r28
    3e2a:	e2 f7       	brpl	.-8      	; 0x3e24 <libMCP79510_EnableAlarm+0x48>
    3e2c:	20 95       	com	r18
    3e2e:	68 2f       	mov	r22, r24
    3e30:	62 23       	and	r22, r18
    }

    WriteRegister(REG_TC_CONTROL, register_data);
    3e32:	88 e0       	ldi	r24, 0x08	; 8
    3e34:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

00003e3e <libMCP79510_EnableSquareWave>:
///
/// @param  enabled Set to true for enabling the output.
/// @return None
///
void libMCP79510_EnableSquareWave(bool enable)
{
    3e3e:	1f 93       	push	r17
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	1f 92       	push	r1
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	18 2f       	mov	r17, r24
    uint8_t register_data = ReadRegister(REG_TC_CONTROL);
    3e4c:	88 e0       	ldi	r24, 0x08	; 8
    3e4e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>
    3e52:	89 83       	std	Y+1, r24	; 0x01

    SetBit(REG_TC_CONTROL_SQWE_BIT, enable, &register_data);
    3e54:	ae 01       	movw	r20, r28
    3e56:	4f 5f       	subi	r20, 0xFF	; 255
    3e58:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5a:	61 2f       	mov	r22, r17
    3e5c:	86 e0       	ldi	r24, 0x06	; 6
    3e5e:	0e 94 27 0a 	call	0x144e	; 0x144e <SetBit>
    WriteRegister(REG_TC_CONTROL, register_data);
    3e62:	69 81       	ldd	r22, Y+1	; 0x01
    3e64:	88 e0       	ldi	r24, 0x08	; 8
    3e66:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>

    return;
}
    3e6a:	0f 90       	pop	r0
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	1f 91       	pop	r17
    3e72:	08 95       	ret

00003e74 <libMCP79510_Init>:
/// @param  None
/// @return None
///
void libMCP79510_Init(void)
{
    libMCP79510_HWInit();
    3e74:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <libMCP79510_HWInit>
    libMCP79510_EnableSquareWave(false);
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <libMCP79510_EnableSquareWave>
    libMCP79510_EnableOscillator(true);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <libMCP79510_EnableOscillator>

    INFO("Init done");
    3e84:	83 ea       	ldi	r24, 0xA3	; 163
    3e86:	92 e0       	ldi	r25, 0x02	; 2
    3e88:	9f 93       	push	r25
    3e8a:	8f 93       	push	r24
    3e8c:	8b e6       	ldi	r24, 0x6B	; 107
    3e8e:	90 e1       	ldi	r25, 0x10	; 16
    3e90:	9f 93       	push	r25
    3e92:	8f 93       	push	r24
    3e94:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	08 95       	ret

00003ea2 <libMCP79510_ClearAlarmFlag>:
///
/// @param  Index of alarm flag to clear, 0 or 1.
/// @return None
///
void libMCP79510_ClearAlarmFlag(uint8_t alarm_index)
{
    3ea2:	cf 93       	push	r28
    sc_assert(alarm_index < 2);
    3ea4:	82 30       	cpi	r24, 0x02	; 2
    3ea6:	40 f0       	brcs	.+16     	; 0x3eb8 <libMCP79510_ClearAlarmFlag+0x16>
    3ea8:	43 e3       	ldi	r20, 0x33	; 51
    3eaa:	5f e0       	ldi	r21, 0x0F	; 15
    3eac:	65 e8       	ldi	r22, 0x85	; 133
    3eae:	72 e0       	ldi	r23, 0x02	; 2
    3eb0:	80 e2       	ldi	r24, 0x20	; 32
    3eb2:	9f e0       	ldi	r25, 0x0F	; 15
    3eb4:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    uint8_t register_address;
    register_address = (alarm_index == 0) ? REG_ALARM0_DAY :
    3eb8:	81 11       	cpse	r24, r1
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <libMCP79510_ClearAlarmFlag+0x1e>
    3ebc:	cf e0       	ldi	r28, 0x0F	; 15
    3ebe:	01 c0       	rjmp	.+2      	; 0x3ec2 <libMCP79510_ClearAlarmFlag+0x20>
    3ec0:	c6 e1       	ldi	r28, 0x16	; 22
                       REG_ALARM1_DAY;

    uint8_t register_content;
    register_content = ReadRegister(register_address);
    3ec2:	8c 2f       	mov	r24, r28
    3ec4:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ReadRegister>

    ClearBit(register_content, REG_ALARM_DAY_ALM0IF_BIT);
    3ec8:	68 2f       	mov	r22, r24
    3eca:	67 7f       	andi	r22, 0xF7	; 247
    WriteRegister(register_address, register_content);
    3ecc:	8c 2f       	mov	r24, r28
    3ece:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <WriteRegister>
    return;
}
    3ed2:	cf 91       	pop	r28
    3ed4:	08 95       	ret

00003ed6 <__vector_2>:
//////////////////////////////////////////////////////////////////////////
//INTERUPT SERVICE ROUTINES
//////////////////////////////////////////////////////////////////////////

ISR(INT1_vect)
{
    3ed6:	1f 92       	push	r1
    3ed8:	0f 92       	push	r0
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	0f 92       	push	r0
    3ede:	11 24       	eor	r1, r1
    //Do nothing here
}
    3ee0:	0f 90       	pop	r0
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	0f 90       	pop	r0
    3ee6:	1f 90       	pop	r1
    3ee8:	18 95       	reti

00003eea <libPower_Init>:
/// @param  None
/// @return None
///
void libPower_Init(void)
{
    DDRC &= ~(1 << CONNECTED_PIN | 1 << CHARGING_PIN);
    3eea:	87 b1       	in	r24, 0x07	; 7
    3eec:	8d 7e       	andi	r24, 0xED	; 237
    3eee:	87 b9       	out	0x07, r24	; 7

    PORTC  |= (1 << CONNECTED_PIN);
    3ef0:	41 9a       	sbi	0x08, 1	; 8
    PORTC  |= (1 << CHARGING_PIN);
    3ef2:	44 9a       	sbi	0x08, 4	; 8

    //Disable TWI(I2C) and Timer 2
    PRR = ((1 << PRTWI) | (1 << PRTIM2));
    3ef4:	80 ec       	ldi	r24, 0xC0	; 192
    3ef6:	80 93 64 00 	sts	0x0064, r24
    //Turn off USART if debug is disabled
#ifndef DEBUG_ENABLE
    PRR |= (1 << PRUSART0);
#endif

    libADC_EnableInput(0x07, true);
    3efa:	61 e0       	ldi	r22, 0x01	; 1
    3efc:	87 e0       	ldi	r24, 0x07	; 7
    3efe:	0e 94 2f 0c 	call	0x185e	; 0x185e <libADC_EnableInput>
    3f02:	08 95       	ret

00003f04 <libPower_Sleep>:
{
    //Do not enter sleep if global interrupts are disabled.
    //Without this the device can not wake up again.
    //IMPORTANT: This function does not catch cases where
    //           interrupts is disabled inside an interrupt vector.
    if (IsGlobalInteruptEnabled() == false)
    3f04:	0e 94 66 0a 	call	0x14cc	; 0x14cc <IsGlobalInteruptEnabled>
    3f08:	81 11       	cpse	r24, r1
    3f0a:	08 c0       	rjmp	.+16     	; 0x3f1c <libPower_Sleep+0x18>
    {
        sc_assert_fail();
    3f0c:	43 e9       	ldi	r20, 0x93	; 147
    3f0e:	50 e1       	ldi	r21, 0x10	; 16
    3f10:	6a e7       	ldi	r22, 0x7A	; 122
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	83 e8       	ldi	r24, 0x83	; 131
    3f16:	90 e1       	ldi	r25, 0x10	; 16
    3f18:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
static void EnableLowLevelInterupt(bool enable)
{
    if (enable == true)
    {
        //Enable low level sense
        EICRA &= ~(1 << ISC11 | 1 << ISC10);
    3f1c:	e9 e6       	ldi	r30, 0x69	; 105
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
    3f22:	83 7f       	andi	r24, 0xF3	; 243
    3f24:	80 83       	st	Z, r24

        //Enable external interrupt 1
        EIMSK |= (1 << INT1);
    3f26:	e9 9a       	sbi	0x1d, 1	; 29
        return;
    }

    EnableLowLevelInterupt(true);

    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f28:	83 b7       	in	r24, 0x33	; 51
    3f2a:	81 7f       	andi	r24, 0xF1	; 241
    3f2c:	84 60       	ori	r24, 0x04	; 4
    3f2e:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f30:	83 b7       	in	r24, 0x33	; 51
    3f32:	81 60       	ori	r24, 0x01	; 1
    3f34:	83 bf       	out	0x33, r24	; 51
    sleep_cpu();
    3f36:	88 95       	sleep
    sleep_disable();
    3f38:	83 b7       	in	r24, 0x33	; 51
    3f3a:	8e 7f       	andi	r24, 0xFE	; 254
    3f3c:	83 bf       	out	0x33, r24	; 51
        EIMSK |= (1 << INT1);
    }
    else
    {
        //Disable external interrupt 1
        EIMSK &= ~(1 << INT1);
    3f3e:	e9 98       	cbi	0x1d, 1	; 29
    3f40:	08 95       	ret

00003f42 <libPower_IsChargerConnected>:
/// @param  None
/// @return true if connected, otherwise false
///
bool libPower_IsChargerConnected(void)
{
    return ((PINC & (1 << CONNECTED_PIN)) == 0);
    3f42:	86 b1       	in	r24, 0x06	; 6
    3f44:	86 95       	lsr	r24
    3f46:	81 70       	andi	r24, 0x01	; 1
}
    3f48:	91 e0       	ldi	r25, 0x01	; 1
    3f4a:	89 27       	eor	r24, r25
    3f4c:	08 95       	ret

00003f4e <libPower_IsCharging>:
/// @param  None
/// @return true if charging, otherwise false
///
bool libPower_IsCharging(void)
{
    return ((PINC & (1 << CHARGING_PIN)) == 0);
    3f4e:	86 b1       	in	r24, 0x06	; 6
    3f50:	82 95       	swap	r24
    3f52:	81 70       	andi	r24, 0x01	; 1
}
    3f54:	91 e0       	ldi	r25, 0x01	; 1
    3f56:	89 27       	eor	r24, r25
    3f58:	08 95       	ret

00003f5a <libPower_GetBatteryVoltage>:
///
/// @param  None
/// @return Battery voltage in mV
///
uint32_t libPower_GetBatteryVoltage(void)
{
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	00 d0       	rcall	.+0      	; 0x3f60 <libPower_GetBatteryVoltage+0x6>
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    uint16_t sample;
    uint32_t voltage;

    libADC_GetSample(0x07, &sample);
    3f64:	be 01       	movw	r22, r28
    3f66:	6f 5f       	subi	r22, 0xFF	; 255
    3f68:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6a:	87 e0       	ldi	r24, 0x07	; 7
    3f6c:	0e 94 46 0c 	call	0x188c	; 0x188c <libADC_GetSample>
    voltage = ((uint32_t)sample * VREF) / 1024;
    3f70:	29 81       	ldd	r18, Y+1	; 0x01
    3f72:	3a 81       	ldd	r19, Y+2	; 0x02
    3f74:	a4 ee       	ldi	r26, 0xE4	; 228
    3f76:	bc e0       	ldi	r27, 0x0C	; 12
    3f78:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <__umulhisi3>
    3f7c:	05 2e       	mov	r0, r21
    3f7e:	5a e0       	ldi	r21, 0x0A	; 10
    3f80:	96 95       	lsr	r25
    3f82:	87 95       	ror	r24
    3f84:	77 95       	ror	r23
    3f86:	67 95       	ror	r22
    3f88:	5a 95       	dec	r21
    3f8a:	d1 f7       	brne	.-12     	; 0x3f80 <libPower_GetBatteryVoltage+0x26>
    3f8c:	50 2d       	mov	r21, r0
     |
     | GND
    */

    //Adjust voltage from voltage divider
    return (uint32_t)((float)voltage / (R2_RESISTANCE / (R1_RESISTANCE +
    3f8e:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__floatunsisf>
    3f92:	2b e9       	ldi	r18, 0x9B	; 155
    3f94:	3c e6       	ldi	r19, 0x6C	; 108
    3f96:	42 e7       	ldi	r20, 0x72	; 114
    3f98:	5f e3       	ldi	r21, 0x3F	; 63
    3f9a:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    3f9e:	0e 94 46 24 	call	0x488c	; 0x488c <__fixunssfsi>
                                        R2_RESISTANCE)));
}
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	08 95       	ret

00003fac <libPower_IsBatteryVoltageValid>:
/// @param  None
/// @return true if valid, otherwise false
///
bool libPower_IsBatteryVoltageValid(void)
{
    return libADC_IsChannelValid(0x07);
    3fac:	87 e0       	ldi	r24, 0x07	; 7
    3fae:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <libADC_IsChannelValid>
}
    3fb2:	08 95       	ret

00003fb4 <RHTSent>:
    SoftReset();
}

static void RHTSent(const event_type *event __attribute__ ((unused)))
{
    sleep_status.sleep_now = true;
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	80 93 21 04 	sts	0x0421, r24
    3fba:	08 95       	ret

00003fbc <main>:
//////////////////////////////////////////////////////////////////////////
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

int main(void)
{
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
    3fc4:	2b 97       	sbiw	r28, 0x0b	; 11
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	cd bf       	out	0x3d, r28	; 61
    uint8_t mcu_status = MCUSR;
    3fd0:	f4 b6       	in	r15, 0x34	; 52
    MCUSR = 0;
    3fd2:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    3fd4:	88 e1       	ldi	r24, 0x18	; 24
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	80 93 60 00 	sts	0x0060, r24
    3fde:	10 92 60 00 	sts	0x0060, r1
    3fe2:	0f be       	out	0x3f, r0	; 63

    //Init hardware early to ensure all CS are disabled.
    libRFM69_InitHW();
    3fe4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <libRFM69_InitHW>
    RTC_InitHW();
    3fe8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <libMCP79510_HWInit>
    libFlash_InitHW();
    3fec:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <libFlash_InitHW>

    libDebug_Init();
    3ff0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <libDebug_Init>
    INFO("Node unit started");
    3ff4:	08 ec       	ldi	r16, 0xC8	; 200
    3ff6:	12 e0       	ldi	r17, 0x02	; 2
    3ff8:	1f 93       	push	r17
    3ffa:	0f 93       	push	r16
    3ffc:	86 e7       	ldi	r24, 0x76	; 118
    3ffe:	91 e1       	ldi	r25, 0x11	; 17
    4000:	9f 93       	push	r25
    4002:	8f 93       	push	r24
    4004:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    INFO("Last reset: 0x%02X", mcu_status);
    4008:	1f 92       	push	r1
    400a:	ff 92       	push	r15
    400c:	1f 93       	push	r17
    400e:	0f 93       	push	r16
    4010:	85 e5       	ldi	r24, 0x55	; 85
    4012:	91 e1       	ldi	r25, 0x11	; 17
    4014:	9f 93       	push	r25
    4016:	8f 93       	push	r24
    4018:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    libADC_Init();
    401c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <libADC_Init>
    Timer_Init();
    4020:	0e 94 53 14 	call	0x28a6	; 0x28a6 <libTimer_Init>
    libSPI_Init(0);
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	0e 94 f5 13 	call	0x27ea	; 0x27ea <libSPI_Init>
    libADC_Enable(true);
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <libADC_Enable>
    libDHT22_Init();
    4030:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <libDHT22_Init>
    libPower_Init();
    4034:	0e 94 75 1f 	call	0x3eea	; 0x3eea <libPower_Init>
    libFlash_Init();
    4038:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <libFlash_Init>
    //Flash_Init();

    //LED_Init();
    Config_Load();
    403c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <Config_Load>
    RTC_Init();
    4040:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <libMCP79510_Init>
    ErrorHandler_Init();
    4044:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <ErrorHandler_Init>
    //      Disabled during development to prevent filling the error log.
#ifndef DEBUG_ENABLE
    ErrorHandler_LogError(POWERON, mcu_status);
#endif

    Sensor_Init();
    4048:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <Sensor_Init>
    Transceiver_Init();
    404c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Transceiver_Init>
    Power_Init();
    4050:	0e 94 39 21 	call	0x4272	; 0x4272 <Power_Init>

    Event_AddListener(Sensor_WakeUp, EVENT_WAKEUP);
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	8c e6       	ldi	r24, 0x6C	; 108
    4058:	93 e2       	ldi	r25, 0x23	; 35
    405a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>
    Event_AddListener(Power_WakeUp, EVENT_WAKEUP);
    405e:	62 e0       	ldi	r22, 0x02	; 2
    4060:	89 e8       	ldi	r24, 0x89	; 137
    4062:	92 e2       	ldi	r25, 0x22	; 34
    4064:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>
    Event_AddListener(LED_EventHandler, EVENT_ALL);
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	8e e6       	ldi	r24, 0x6E	; 110
    406c:	9a e1       	ldi	r25, 0x1A	; 26
    406e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>
    Event_AddListener(Transceiver_EventHandler, EVENT_ALL);
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	81 e5       	ldi	r24, 0x51	; 81
    4076:	99 e1       	ldi	r25, 0x19	; 25
    4078:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>
    Event_AddListener(RHTSent, EVENT_RHT_SENT);
    407c:	68 e0       	ldi	r22, 0x08	; 8
    407e:	8a ed       	ldi	r24, 0xDA	; 218
    4080:	9f e1       	ldi	r25, 0x1F	; 31
    4082:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>

    //Since RTC-alarms are persistent between restarts we need to make
    //sure that they are disabled.
    RTC_EnableAlarm(false);
    4086:	61 e0       	ldi	r22, 0x01	; 1
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <libMCP79510_EnableAlarm>
    RTC_ClearAlarm();
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <libMCP79510_ClearAlarmFlag>

#ifdef DEBUG_ENABLE
    //Add debug listener last to ensure all debug prints are flushed
    //before sleep.
    Event_AddListener(libDebug_Sleep, EVENT_SLEEP);
    4094:	61 e0       	ldi	r22, 0x01	; 1
    4096:	8c ed       	ldi	r24, 0xDC	; 220
    4098:	9c e0       	ldi	r25, 0x0C	; 12
    409a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Event_AddListener>
#endif

    INFO("Start up done");
    409e:	1f 93       	push	r17
    40a0:	0f 93       	push	r16
    40a2:	89 e3       	ldi	r24, 0x39	; 57
    40a4:	91 e1       	ldi	r25, 0x11	; 17
    40a6:	9f 93       	push	r25
    40a8:	8f 93       	push	r24
    40aa:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    sleep_status.last_sleep_time = Timer_GetMilliseconds();
    40ae:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    40b2:	60 93 1d 04 	sts	0x041D, r22
    40b6:	70 93 1e 04 	sts	0x041E, r23
    40ba:	80 93 1f 04 	sts	0x041F, r24
    40be:	90 93 20 04 	sts	0x0420, r25
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    if (libPower_IsChargerConnected() == true)
    {
        return false;
    }

    return (sleep_status.sleep_now == true ||
    40cc:	01 e2       	ldi	r16, 0x21	; 33
    40ce:	14 e0       	ldi	r17, 0x04	; 4
            Timer_TimeDifference(sleep_status.last_sleep_time) > MAX_AWAKE_TIME_MS);
    40d0:	0f 2e       	mov	r0, r31
    40d2:	fd e1       	ldi	r31, 0x1D	; 29
    40d4:	cf 2e       	mov	r12, r31
    40d6:	f4 e0       	ldi	r31, 0x04	; 4
    40d8:	df 2e       	mov	r13, r31
    40da:	f0 2d       	mov	r31, r0
        //LED_Update();

        if (IsTimeForSleep() == true)
        {

            INFO("Battery voltage: %lu", libPower_GetBatteryVoltage());
    40dc:	0f 2e       	mov	r0, r31
    40de:	f8 ec       	ldi	r31, 0xC8	; 200
    40e0:	8f 2e       	mov	r8, r31
    40e2:	f2 e0       	ldi	r31, 0x02	; 2
    40e4:	9f 2e       	mov	r9, r31
    40e6:	f0 2d       	mov	r31, r0
    40e8:	0f 2e       	mov	r0, r31
    40ea:	f6 e1       	ldi	r31, 0x16	; 22
    40ec:	af 2e       	mov	r10, r31
    40ee:	f1 e1       	ldi	r31, 0x11	; 17
    40f0:	bf 2e       	mov	r11, r31
    40f2:	f0 2d       	mov	r31, r0
            DEBUG("Unused stack: %u\r\n", StackCount());
    40f4:	0f 2e       	mov	r0, r31
    40f6:	f3 e0       	ldi	r31, 0x03	; 3
    40f8:	6f 2e       	mov	r6, r31
    40fa:	f1 e1       	ldi	r31, 0x11	; 17
    40fc:	7f 2e       	mov	r7, r31
    40fe:	f0 2d       	mov	r31, r0
static void NotifyAndEnterSleep(void)
{
    rtc_time_type time;

    RTC_GetCurrentTime(&time);
    INFO("Sleep: %u:%u:%u", time.hour, time.minute, time.second);
    4100:	0f 2e       	mov	r0, r31
    4102:	f4 eb       	ldi	r31, 0xB4	; 180
    4104:	ef 2e       	mov	r14, r31
    4106:	f2 e0       	ldi	r31, 0x02	; 2
    4108:	ff 2e       	mov	r15, r31
    410a:	f0 2d       	mov	r31, r0
    410c:	0f 2e       	mov	r0, r31
    410e:	ff eb       	ldi	r31, 0xBF	; 191
    4110:	4f 2e       	mov	r4, r31
    4112:	f0 e1       	ldi	r31, 0x10	; 16
    4114:	5f 2e       	mov	r5, r31
    4116:	f0 2d       	mov	r31, r0

    event = Event_New(EVENT_WAKEUP);
    Event_Trigger(&event);

    RTC_GetCurrentTime(&time);
    INFO("Wake: %u:%u:%u", time.hour, time.minute, time.second);
    4118:	0f 2e       	mov	r0, r31
    411a:	f2 ea       	ldi	r31, 0xA2	; 162
    411c:	2f 2e       	mov	r2, r31
    411e:	f0 e1       	ldi	r31, 0x10	; 16
    4120:	3f 2e       	mov	r3, r31
    4122:	f0 2d       	mov	r31, r0
    INFO("Start up done");
    sleep_status.last_sleep_time = Timer_GetMilliseconds();

    while (1)
    {
        libADC_Update();
    4124:	0e 94 91 0b 	call	0x1722	; 0x1722 <libADC_Update>
        Power_Update();
    4128:	0e 94 3d 21 	call	0x427a	; 0x427a <Power_Update>
        libDHT22_Update();
    412c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <libDHT22_Update>
        Sensor_Update();
    4130:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <Sensor_Update>
        Transceiver_Update();
    4134:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Transceiver_Update>
    return;
}

static bool IsTimeForSleep(void)
{
    if (libPower_IsChargerConnected() == true)
    4138:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <libPower_IsChargerConnected>
    413c:	81 11       	cpse	r24, r1
    413e:	f2 cf       	rjmp	.-28     	; 0x4124 <main+0x168>
    {
        return false;
    }

    return (sleep_status.sleep_now == true ||
    4140:	f8 01       	movw	r30, r16
    4142:	80 81       	ld	r24, Z
    4144:	81 11       	cpse	r24, r1
    4146:	0c c0       	rjmp	.+24     	; 0x4160 <main+0x1a4>
            Timer_TimeDifference(sleep_status.last_sleep_time) > MAX_AWAKE_TIME_MS);
    4148:	f6 01       	movw	r30, r12
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <Timer_TimeDifference>
        libDHT22_Update();
        Sensor_Update();
        Transceiver_Update();
        //LED_Update();

        if (IsTimeForSleep() == true)
    4156:	69 3b       	cpi	r22, 0xB9	; 185
    4158:	7b 40       	sbci	r23, 0x0B	; 11
    415a:	81 05       	cpc	r24, r1
    415c:	91 05       	cpc	r25, r1
    415e:	10 f3       	brcs	.-60     	; 0x4124 <main+0x168>
        {

            INFO("Battery voltage: %lu", libPower_GetBatteryVoltage());
    4160:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <libPower_GetBatteryVoltage>
    4164:	9f 93       	push	r25
    4166:	8f 93       	push	r24
    4168:	7f 93       	push	r23
    416a:	6f 93       	push	r22
    416c:	9f 92       	push	r9
    416e:	8f 92       	push	r8
    4170:	bf 92       	push	r11
    4172:	af 92       	push	r10
    4174:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            DEBUG("Unused stack: %u\r\n", StackCount());
    4178:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <StackCount>
    417c:	9f 93       	push	r25
    417e:	8f 93       	push	r24
    4180:	7f 92       	push	r7
    4182:	6f 92       	push	r6
    4184:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
            sc_assert(StackCount() > 0);
    4188:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <StackCount>
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	f8 94       	cli
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	0f be       	out	0x3f, r0	; 63
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	89 2b       	or	r24, r25
    4198:	41 f4       	brne	.+16     	; 0x41aa <main+0x1ee>
    419a:	42 ef       	ldi	r20, 0xF2	; 242
    419c:	50 e1       	ldi	r21, 0x10	; 16
    419e:	64 ea       	ldi	r22, 0xA4	; 164
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	8d ed       	ldi	r24, 0xDD	; 221
    41a4:	90 e1       	ldi	r25, 0x10	; 16
    41a6:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

static void NotifyAndEnterSleep(void)
{
    rtc_time_type time;

    RTC_GetCurrentTime(&time);
    41aa:	ce 01       	movw	r24, r28
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	0e 94 a7 14 	call	0x294e	; 0x294e <RTC_GetCurrentTime>
    INFO("Sleep: %u:%u:%u", time.hour, time.minute, time.second);
    41b2:	8e 81       	ldd	r24, Y+6	; 0x06
    41b4:	1f 92       	push	r1
    41b6:	8f 93       	push	r24
    41b8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ba:	1f 92       	push	r1
    41bc:	8f 93       	push	r24
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	1f 92       	push	r1
    41c2:	8f 93       	push	r24
    41c4:	ff 92       	push	r15
    41c6:	ef 92       	push	r14
    41c8:	5f 92       	push	r5
    41ca:	4f 92       	push	r4
    41cc:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

    //TODO: Compensate for time awake
    RTC_AddSeconds(&time, Config_GetReportInterval());
    41d0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Config_GetReportInterval>
    41d4:	ce 01       	movw	r24, r28
    41d6:	01 96       	adiw	r24, 0x01	; 1
    41d8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <RTC_AddSeconds>
    RTC_SetAlarmTime(&time);
    41dc:	ce 01       	movw	r24, r28
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	0e 94 ce 14 	call	0x299c	; 0x299c <RTC_SetAlarmTime>
    RTC_EnableAlarm(true);
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <libMCP79510_EnableAlarm>

    event_type event = Event_New(EVENT_SLEEP);
    41ec:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    41f0:	6f 83       	std	Y+7, r22	; 0x07
    41f2:	78 87       	std	Y+8, r23	; 0x08
    41f4:	89 87       	std	Y+9, r24	; 0x09
    41f6:	9a 87       	std	Y+10, r25	; 0x0a
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	8b 87       	std	Y+11, r24	; 0x0b
    Event_Trigger(&event);
    41fc:	ce 01       	movw	r24, r28
    41fe:	07 96       	adiw	r24, 0x07	; 7
    4200:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>

    //Enter sleep mode, execution will continue from this point
    //after sleep is done.
    libPower_Sleep();
    4204:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <libPower_Sleep>
    RTC_EnableAlarm(false);
    4208:	61 e0       	ldi	r22, 0x01	; 1
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <libMCP79510_EnableAlarm>
    RTC_ClearAlarm();
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <libMCP79510_ClearAlarmFlag>

    sleep_status.last_sleep_time = Timer_GetMilliseconds();
    4216:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    421a:	f6 01       	movw	r30, r12
    421c:	60 83       	st	Z, r22
    421e:	71 83       	std	Z+1, r23	; 0x01
    4220:	82 83       	std	Z+2, r24	; 0x02
    4222:	93 83       	std	Z+3, r25	; 0x03
    sleep_status.sleep_now = false;
    4224:	f8 01       	movw	r30, r16
    4226:	10 82       	st	Z, r1

    event = Event_New(EVENT_WAKEUP);
    4228:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    422c:	6f 83       	std	Y+7, r22	; 0x07
    422e:	78 87       	std	Y+8, r23	; 0x08
    4230:	89 87       	std	Y+9, r24	; 0x09
    4232:	9a 87       	std	Y+10, r25	; 0x0a
    4234:	f2 e0       	ldi	r31, 0x02	; 2
    4236:	fb 87       	std	Y+11, r31	; 0x0b
    Event_Trigger(&event);
    4238:	ce 01       	movw	r24, r28
    423a:	07 96       	adiw	r24, 0x07	; 7
    423c:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>

    RTC_GetCurrentTime(&time);
    4240:	ce 01       	movw	r24, r28
    4242:	01 96       	adiw	r24, 0x01	; 1
    4244:	0e 94 a7 14 	call	0x294e	; 0x294e <RTC_GetCurrentTime>
    INFO("Wake: %u:%u:%u", time.hour, time.minute, time.second);
    4248:	8e 81       	ldd	r24, Y+6	; 0x06
    424a:	1f 92       	push	r1
    424c:	8f 93       	push	r24
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	1f 92       	push	r1
    4252:	8f 93       	push	r24
    4254:	8c 81       	ldd	r24, Y+4	; 0x04
    4256:	1f 92       	push	r1
    4258:	8f 93       	push	r24
    425a:	ff 92       	push	r15
    425c:	ef 92       	push	r14
    425e:	3f 92       	push	r3
    4260:	2f 92       	push	r2
    4262:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	59 cf       	rjmp	.-334    	; 0x4124 <main+0x168>

00004272 <Power_Init>:
/// @param  None
/// @return None
///
void Power_Init(void)
{
    battery_state = POWER_NORMAL;
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	80 93 22 04 	sts	0x0422, r24
    4278:	08 95       	ret

0000427a <Power_Update>:
///
/// @param  None
/// @return None
///
void Power_Update(void)
{
    427a:	cf 93       	push	r28
    427c:	df 93       	push	r29
    427e:	00 d0       	rcall	.+0      	; 0x4280 <Power_Update+0x6>
    4280:	00 d0       	rcall	.+0      	; 0x4282 <Power_Update+0x8>
    4282:	1f 92       	push	r1
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void BatteryMonitoringSM(void)
{
    switch (battery_state)
    4288:	80 91 22 04 	lds	r24, 0x0422
    428c:	83 30       	cpi	r24, 0x03	; 3
    428e:	09 f4       	brne	.+2      	; 0x4292 <Power_Update+0x18>
    4290:	a8 c0       	rjmp	.+336    	; 0x43e2 <Power_Update+0x168>
    4292:	30 f4       	brcc	.+12     	; 0x42a0 <Power_Update+0x26>
    4294:	81 30       	cpi	r24, 0x01	; 1
    4296:	59 f0       	breq	.+22     	; 0x42ae <Power_Update+0x34>
    4298:	82 30       	cpi	r24, 0x02	; 2
    429a:	09 f4       	brne	.+2      	; 0x429e <Power_Update+0x24>
    429c:	55 c0       	rjmp	.+170    	; 0x4348 <Power_Update+0xce>
    429e:	29 c1       	rjmp	.+594    	; 0x44f2 <Power_Update+0x278>
    42a0:	84 30       	cpi	r24, 0x04	; 4
    42a2:	09 f4       	brne	.+2      	; 0x42a6 <Power_Update+0x2c>
    42a4:	c1 c0       	rjmp	.+386    	; 0x4428 <Power_Update+0x1ae>
    42a6:	85 30       	cpi	r24, 0x05	; 5
    42a8:	09 f4       	brne	.+2      	; 0x42ac <Power_Update+0x32>
    42aa:	e0 c0       	rjmp	.+448    	; 0x446c <Power_Update+0x1f2>
    42ac:	22 c1       	rjmp	.+580    	; 0x44f2 <Power_Update+0x278>
    {
        case POWER_NORMAL:
            if (libPower_IsCharging() == true)
    42ae:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    42b2:	88 23       	and	r24, r24
    42b4:	f1 f0       	breq	.+60     	; 0x42f2 <Power_Update+0x78>
            {
                INFO("Charging started");
    42b6:	8d ec       	ldi	r24, 0xCD	; 205
    42b8:	92 e0       	ldi	r25, 0x02	; 2
    42ba:	9f 93       	push	r25
    42bc:	8f 93       	push	r24
    42be:	85 ef       	ldi	r24, 0xF5	; 245
    42c0:	92 e1       	ldi	r25, 0x12	; 18
    42c2:	9f 93       	push	r25
    42c4:	8f 93       	push	r24
    42c6:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGING_STARTED);
    42ca:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    42ce:	69 83       	std	Y+1, r22	; 0x01
    42d0:	7a 83       	std	Y+2, r23	; 0x02
    42d2:	8b 83       	std	Y+3, r24	; 0x03
    42d4:	9c 83       	std	Y+4, r25	; 0x04
    42d6:	83 e0       	ldi	r24, 0x03	; 3
    42d8:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    42da:	ce 01       	movw	r24, r28
    42dc:	01 96       	adiw	r24, 0x01	; 1
    42de:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CHARGING;
    42e2:	84 e0       	ldi	r24, 0x04	; 4
    42e4:	80 93 22 04 	sts	0x0422, r24
    42e8:	0f 90       	pop	r0
    42ea:	0f 90       	pop	r0
    42ec:	0f 90       	pop	r0
    42ee:	0f 90       	pop	r0
    42f0:	08 c1       	rjmp	.+528    	; 0x4502 <Power_Update+0x288>
            }
            else if (libPower_IsBatteryVoltageValid() == true
    42f2:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <libPower_IsBatteryVoltageValid>
    42f6:	88 23       	and	r24, r24
    42f8:	09 f4       	brne	.+2      	; 0x42fc <Power_Update+0x82>
    42fa:	03 c1       	rjmp	.+518    	; 0x4502 <Power_Update+0x288>
                     && libPower_GetBatteryVoltage() < LOW_VOLTAGE_MV)
    42fc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <libPower_GetBatteryVoltage>
    4300:	68 39       	cpi	r22, 0x98	; 152
    4302:	78 40       	sbci	r23, 0x08	; 8
    4304:	81 05       	cpc	r24, r1
    4306:	91 05       	cpc	r25, r1
    4308:	08 f0       	brcs	.+2      	; 0x430c <Power_Update+0x92>
    430a:	fb c0       	rjmp	.+502    	; 0x4502 <Power_Update+0x288>
            {
                INFO("Low battery voltage");
    430c:	8d ec       	ldi	r24, 0xCD	; 205
    430e:	92 e0       	ldi	r25, 0x02	; 2
    4310:	9f 93       	push	r25
    4312:	8f 93       	push	r24
    4314:	83 ed       	ldi	r24, 0xD3	; 211
    4316:	92 e1       	ldi	r25, 0x12	; 18
    4318:	9f 93       	push	r25
    431a:	8f 93       	push	r24
    431c:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_LOW);
    4320:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    4324:	69 83       	std	Y+1, r22	; 0x01
    4326:	7a 83       	std	Y+2, r23	; 0x02
    4328:	8b 83       	std	Y+3, r24	; 0x03
    432a:	9c 83       	std	Y+4, r25	; 0x04
    432c:	87 e0       	ldi	r24, 0x07	; 7
    432e:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    4330:	ce 01       	movw	r24, r28
    4332:	01 96       	adiw	r24, 0x01	; 1
    4334:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_LOW;
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	80 93 22 04 	sts	0x0422, r24
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	dd c0       	rjmp	.+442    	; 0x4502 <Power_Update+0x288>
            }
            break;

        case POWER_LOW:
            if (libPower_IsCharging() == true)
    4348:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    434c:	88 23       	and	r24, r24
    434e:	f1 f0       	breq	.+60     	; 0x438c <Power_Update+0x112>
            {
                INFO("Charging started");
    4350:	8d ec       	ldi	r24, 0xCD	; 205
    4352:	92 e0       	ldi	r25, 0x02	; 2
    4354:	9f 93       	push	r25
    4356:	8f 93       	push	r24
    4358:	84 eb       	ldi	r24, 0xB4	; 180
    435a:	92 e1       	ldi	r25, 0x12	; 18
    435c:	9f 93       	push	r25
    435e:	8f 93       	push	r24
    4360:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGING_STARTED);
    4364:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    4368:	69 83       	std	Y+1, r22	; 0x01
    436a:	7a 83       	std	Y+2, r23	; 0x02
    436c:	8b 83       	std	Y+3, r24	; 0x03
    436e:	9c 83       	std	Y+4, r25	; 0x04
    4370:	83 e0       	ldi	r24, 0x03	; 3
    4372:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    4374:	ce 01       	movw	r24, r28
    4376:	01 96       	adiw	r24, 0x01	; 1
    4378:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CHARGING;
    437c:	84 e0       	ldi	r24, 0x04	; 4
    437e:	80 93 22 04 	sts	0x0422, r24
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	bb c0       	rjmp	.+374    	; 0x4502 <Power_Update+0x288>
            }
            else if (libPower_IsBatteryVoltageValid() == true
    438c:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <libPower_IsBatteryVoltageValid>
    4390:	88 23       	and	r24, r24
    4392:	09 f4       	brne	.+2      	; 0x4396 <Power_Update+0x11c>
    4394:	b6 c0       	rjmp	.+364    	; 0x4502 <Power_Update+0x288>
                     && libPower_GetBatteryVoltage() < CRITICAL_VOLTAGE_MV)
    4396:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <libPower_GetBatteryVoltage>
    439a:	6c 36       	cpi	r22, 0x6C	; 108
    439c:	77 40       	sbci	r23, 0x07	; 7
    439e:	81 05       	cpc	r24, r1
    43a0:	91 05       	cpc	r25, r1
    43a2:	08 f0       	brcs	.+2      	; 0x43a6 <Power_Update+0x12c>
    43a4:	ae c0       	rjmp	.+348    	; 0x4502 <Power_Update+0x288>
            {
                WARNING("Critical battery voltage");
    43a6:	8d ec       	ldi	r24, 0xCD	; 205
    43a8:	92 e0       	ldi	r25, 0x02	; 2
    43aa:	9f 93       	push	r25
    43ac:	8f 93       	push	r24
    43ae:	8a e8       	ldi	r24, 0x8A	; 138
    43b0:	92 e1       	ldi	r25, 0x12	; 18
    43b2:	9f 93       	push	r25
    43b4:	8f 93       	push	r24
    43b6:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CRITICAL);
    43ba:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    43be:	69 83       	std	Y+1, r22	; 0x01
    43c0:	7a 83       	std	Y+2, r23	; 0x02
    43c2:	8b 83       	std	Y+3, r24	; 0x03
    43c4:	9c 83       	std	Y+4, r25	; 0x04
    43c6:	86 e0       	ldi	r24, 0x06	; 6
    43c8:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    43ca:	ce 01       	movw	r24, r28
    43cc:	01 96       	adiw	r24, 0x01	; 1
    43ce:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CRITICAL;
    43d2:	83 e0       	ldi	r24, 0x03	; 3
    43d4:	80 93 22 04 	sts	0x0422, r24
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
    43de:	0f 90       	pop	r0
    43e0:	90 c0       	rjmp	.+288    	; 0x4502 <Power_Update+0x288>
            }
            break;

        case POWER_CRITICAL:
            if (libPower_IsCharging() == true)
    43e2:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <Power_Update+0x172>
    43ea:	8b c0       	rjmp	.+278    	; 0x4502 <Power_Update+0x288>
            {
                INFO("Charging started");
    43ec:	8d ec       	ldi	r24, 0xCD	; 205
    43ee:	92 e0       	ldi	r25, 0x02	; 2
    43f0:	9f 93       	push	r25
    43f2:	8f 93       	push	r24
    43f4:	8b e6       	ldi	r24, 0x6B	; 107
    43f6:	92 e1       	ldi	r25, 0x12	; 18
    43f8:	9f 93       	push	r25
    43fa:	8f 93       	push	r24
    43fc:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGING_STARTED);
    4400:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    4404:	69 83       	std	Y+1, r22	; 0x01
    4406:	7a 83       	std	Y+2, r23	; 0x02
    4408:	8b 83       	std	Y+3, r24	; 0x03
    440a:	9c 83       	std	Y+4, r25	; 0x04
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    4410:	ce 01       	movw	r24, r28
    4412:	01 96       	adiw	r24, 0x01	; 1
    4414:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CHARGING;
    4418:	84 e0       	ldi	r24, 0x04	; 4
    441a:	80 93 22 04 	sts	0x0422, r24
    441e:	0f 90       	pop	r0
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	6d c0       	rjmp	.+218    	; 0x4502 <Power_Update+0x288>
            }
            break;

        case POWER_CHARGING:
            if (libPower_IsCharging() == false)
    4428:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    442c:	81 11       	cpse	r24, r1
    442e:	69 c0       	rjmp	.+210    	; 0x4502 <Power_Update+0x288>
            {
                INFO("Charging stopped");
    4430:	8d ec       	ldi	r24, 0xCD	; 205
    4432:	92 e0       	ldi	r25, 0x02	; 2
    4434:	9f 93       	push	r25
    4436:	8f 93       	push	r24
    4438:	8c e4       	ldi	r24, 0x4C	; 76
    443a:	92 e1       	ldi	r25, 0x12	; 18
    443c:	9f 93       	push	r25
    443e:	8f 93       	push	r24
    4440:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGING_STOPPED);
    4444:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    4448:	69 83       	std	Y+1, r22	; 0x01
    444a:	7a 83       	std	Y+2, r23	; 0x02
    444c:	8b 83       	std	Y+3, r24	; 0x03
    444e:	9c 83       	std	Y+4, r25	; 0x04
    4450:	84 e0       	ldi	r24, 0x04	; 4
    4452:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    4454:	ce 01       	movw	r24, r28
    4456:	01 96       	adiw	r24, 0x01	; 1
    4458:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CONNECTED;
    445c:	85 e0       	ldi	r24, 0x05	; 5
    445e:	80 93 22 04 	sts	0x0422, r24
    4462:	0f 90       	pop	r0
    4464:	0f 90       	pop	r0
    4466:	0f 90       	pop	r0
    4468:	0f 90       	pop	r0
    446a:	4b c0       	rjmp	.+150    	; 0x4502 <Power_Update+0x288>
            }
            break;

        case POWER_CONNECTED:
            if (libPower_IsCharging() == true)
    446c:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    4470:	88 23       	and	r24, r24
    4472:	e9 f0       	breq	.+58     	; 0x44ae <Power_Update+0x234>
            {
                INFO("Charging started");
    4474:	8d ec       	ldi	r24, 0xCD	; 205
    4476:	92 e0       	ldi	r25, 0x02	; 2
    4478:	9f 93       	push	r25
    447a:	8f 93       	push	r24
    447c:	8d e2       	ldi	r24, 0x2D	; 45
    447e:	92 e1       	ldi	r25, 0x12	; 18
    4480:	9f 93       	push	r25
    4482:	8f 93       	push	r24
    4484:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGING_STARTED);
    4488:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    448c:	69 83       	std	Y+1, r22	; 0x01
    448e:	7a 83       	std	Y+2, r23	; 0x02
    4490:	8b 83       	std	Y+3, r24	; 0x03
    4492:	9c 83       	std	Y+4, r25	; 0x04
    4494:	83 e0       	ldi	r24, 0x03	; 3
    4496:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    4498:	ce 01       	movw	r24, r28
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_CHARGING;
    44a0:	84 e0       	ldi	r24, 0x04	; 4
    44a2:	80 93 22 04 	sts	0x0422, r24
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
            }

            if (libPower_IsChargerConnected() == false)
    44ae:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <libPower_IsChargerConnected>
    44b2:	81 11       	cpse	r24, r1
    44b4:	26 c0       	rjmp	.+76     	; 0x4502 <Power_Update+0x288>
            {
                INFO("Charger disconnected");
    44b6:	8d ec       	ldi	r24, 0xCD	; 205
    44b8:	92 e0       	ldi	r25, 0x02	; 2
    44ba:	9f 93       	push	r25
    44bc:	8f 93       	push	r24
    44be:	8a e0       	ldi	r24, 0x0A	; 10
    44c0:	92 e1       	ldi	r25, 0x12	; 18
    44c2:	9f 93       	push	r25
    44c4:	8f 93       	push	r24
    44c6:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
                event_type event = Event_New(EVENT_BATTERY_CHARGER_DISCONNECTED);
    44ca:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    44ce:	69 83       	std	Y+1, r22	; 0x01
    44d0:	7a 83       	std	Y+2, r23	; 0x02
    44d2:	8b 83       	std	Y+3, r24	; 0x03
    44d4:	9c 83       	std	Y+4, r25	; 0x04
    44d6:	85 e0       	ldi	r24, 0x05	; 5
    44d8:	8d 83       	std	Y+5, r24	; 0x05
                Event_Trigger(&event);
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
                battery_state = POWER_NORMAL;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	80 93 22 04 	sts	0x0422, r24
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	08 c0       	rjmp	.+16     	; 0x4502 <Power_Update+0x288>
            }
            break;

        default:
            sc_assert_fail();
    44f2:	4b ef       	ldi	r20, 0xFB	; 251
    44f4:	51 e1       	ldi	r21, 0x11	; 17
    44f6:	6c ec       	ldi	r22, 0xCC	; 204
    44f8:	70 e0       	ldi	r23, 0x00	; 0
    44fa:	8e ee       	ldi	r24, 0xEE	; 238
    44fc:	91 e1       	ldi	r25, 0x11	; 17
    44fe:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>
///
void Power_Update(void)
{
    BatteryMonitoringSM();
    return;
}
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	0f 90       	pop	r0
    4508:	0f 90       	pop	r0
    450a:	0f 90       	pop	r0
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	08 95       	ret

00004512 <Power_WakeUp>:
/// @param  *event Pointer to triggered event
/// @return None
///
void Power_WakeUp(const event_type *event)
{
    sc_assert(event != NULL);
    4512:	89 2b       	or	r24, r25
    4514:	41 f4       	brne	.+16     	; 0x4526 <Power_WakeUp+0x14>
    4516:	40 ee       	ldi	r20, 0xE0	; 224
    4518:	51 e1       	ldi	r21, 0x11	; 17
    451a:	62 e7       	ldi	r22, 0x72	; 114
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	83 ed       	ldi	r24, 0xD3	; 211
    4520:	91 e1       	ldi	r25, 0x11	; 17
    4522:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    DEBUG("Battery voltage: %u\r\n", libPower_GetBatteryVoltage());
    4526:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <libPower_GetBatteryVoltage>
    452a:	9f 93       	push	r25
    452c:	8f 93       	push	r24
    452e:	7f 93       	push	r23
    4530:	6f 93       	push	r22
    4532:	8d eb       	ldi	r24, 0xBD	; 189
    4534:	91 e1       	ldi	r25, 0x11	; 17
    4536:	9f 93       	push	r25
    4538:	8f 93       	push	r24
    453a:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Charger connected: %u\r\n", (uint8_t)libPower_IsChargerConnected());
    453e:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <libPower_IsChargerConnected>
    4542:	1f 92       	push	r1
    4544:	8f 93       	push	r24
    4546:	85 ea       	ldi	r24, 0xA5	; 165
    4548:	91 e1       	ldi	r25, 0x11	; 17
    454a:	9f 93       	push	r25
    454c:	8f 93       	push	r24
    454e:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    DEBUG("Charging: %u\r\n", (uint8_t)libPower_IsCharging());
    4552:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <libPower_IsCharging>
    4556:	1f 92       	push	r1
    4558:	8f 93       	push	r24
    455a:	86 e9       	ldi	r24, 0x96	; 150
    455c:	91 e1       	ldi	r25, 0x11	; 17
    455e:	9f 93       	push	r25
    4560:	8f 93       	push	r24
    4562:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    4566:	8d b7       	in	r24, 0x3d	; 61
    4568:	9e b7       	in	r25, 0x3e	; 62
    456a:	0e 96       	adiw	r24, 0x0e	; 14
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	9e bf       	out	0x3e, r25	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	8d bf       	out	0x3d, r24	; 61
    4576:	08 95       	ret

00004578 <SendCallback>:
//////////////////////////////////////////////////////////////////////////
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void SendCallback(bool status)
{
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	00 d0       	rcall	.+0      	; 0x4580 <SendCallback+0x8>
    4580:	00 d0       	rcall	.+0      	; 0x4582 <SendCallback+0xa>
    4582:	1f 92       	push	r1
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	18 2f       	mov	r17, r24
    event_type event;
    event = Event_New(EVENT_RHT_SENT);
    458a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <libTimer_GetMilliseconds>
    458e:	69 83       	std	Y+1, r22	; 0x01
    4590:	7a 83       	std	Y+2, r23	; 0x02
    4592:	8b 83       	std	Y+3, r24	; 0x03
    4594:	9c 83       	std	Y+4, r25	; 0x04
    4596:	88 e0       	ldi	r24, 0x08	; 8
    4598:	8d 83       	std	Y+5, r24	; 0x05

    Event_Trigger(&event);
    459a:	ce 01       	movw	r24, r28
    459c:	01 96       	adiw	r24, 0x01	; 1
    459e:	0e 94 07 0b 	call	0x160e	; 0x160e <Event_Trigger>
    INFO("Sensor callback: %u", (uint8_t)status);
    45a2:	1f 92       	push	r1
    45a4:	1f 93       	push	r17
    45a6:	81 ee       	ldi	r24, 0xE1	; 225
    45a8:	92 e0       	ldi	r25, 0x02	; 2
    45aa:	9f 93       	push	r25
    45ac:	8f 93       	push	r24
    45ae:	80 e3       	ldi	r24, 0x30	; 48
    45b0:	93 e1       	ldi	r25, 0x13	; 19
    45b2:	9f 93       	push	r25
    45b4:	8f 93       	push	r24
    45b6:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	0f 90       	pop	r0
    45c4:	0f 90       	pop	r0
}
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	1f 91       	pop	r17
    45d6:	08 95       	ret

000045d8 <Sensor_Init>:
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void Sensor_Init(void)
{
    INFO("Init done");
    45d8:	8c ef       	ldi	r24, 0xFC	; 252
    45da:	92 e0       	ldi	r25, 0x02	; 2
    45dc:	9f 93       	push	r25
    45de:	8f 93       	push	r24
    45e0:	8e e8       	ldi	r24, 0x8E	; 142
    45e2:	93 e1       	ldi	r25, 0x13	; 19
    45e4:	9f 93       	push	r25
    45e6:	8f 93       	push	r24
    45e8:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	08 95       	ret

000045f6 <Sensor_Update>:
}

void Sensor_Update(void)
{
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	ab 97       	sbiw	r28, 0x2b	; 43
    4604:	0f b6       	in	r0, 0x3f	; 63
    4606:	f8 94       	cli
    4608:	de bf       	out	0x3e, r29	; 62
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	cd bf       	out	0x3d, r28	; 61
    if (libDHT22_IsReadingValid())
    460e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <libDHT22_IsReadingValid>
    4612:	88 23       	and	r24, r24
    4614:	09 f4       	brne	.+2      	; 0x4618 <Sensor_Update+0x22>
    4616:	55 c0       	rjmp	.+170    	; 0x46c2 <Sensor_Update+0xcc>
    {
        dht22_data_type sample;
        packet_content_type sample_packet;

        sample = libDHT22_GetSensorReading();
    4618:	ce 01       	movw	r24, r28
    461a:	4d 96       	adiw	r24, 0x1d	; 29
    461c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <libDHT22_GetSensorReading>
        INFO("Temperature: %uC", (uint32_t)sample.temperature);
    4620:	69 a1       	ldd	r22, Y+33	; 0x21
    4622:	7a a1       	ldd	r23, Y+34	; 0x22
    4624:	8b a1       	ldd	r24, Y+35	; 0x23
    4626:	9c a1       	ldd	r25, Y+36	; 0x24
    4628:	0e 94 46 24 	call	0x488c	; 0x488c <__fixunssfsi>
    462c:	9f 93       	push	r25
    462e:	8f 93       	push	r24
    4630:	7f 93       	push	r23
    4632:	6f 93       	push	r22
    4634:	0e ee       	ldi	r16, 0xEE	; 238
    4636:	12 e0       	ldi	r17, 0x02	; 2
    4638:	1f 93       	push	r17
    463a:	0f 93       	push	r16
    463c:	8f e6       	ldi	r24, 0x6F	; 111
    463e:	93 e1       	ldi	r25, 0x13	; 19
    4640:	9f 93       	push	r25
    4642:	8f 93       	push	r24
    4644:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>
        INFO("Humidity: %u%%", (uint32_t)sample.humidity);
    4648:	6d 8d       	ldd	r22, Y+29	; 0x1d
    464a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    464c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    464e:	98 a1       	ldd	r25, Y+32	; 0x20
    4650:	0e 94 46 24 	call	0x488c	; 0x488c <__fixunssfsi>
    4654:	9f 93       	push	r25
    4656:	8f 93       	push	r24
    4658:	7f 93       	push	r23
    465a:	6f 93       	push	r22
    465c:	1f 93       	push	r17
    465e:	0f 93       	push	r16
    4660:	82 e5       	ldi	r24, 0x52	; 82
    4662:	93 e1       	ldi	r25, 0x13	; 19
    4664:	9f 93       	push	r25
    4666:	8f 93       	push	r24
    4668:	0e 94 95 0c 	call	0x192a	; 0x192a <libDebug_Print_P>

        rtc_time_type timestamp;
        RTC_GetCurrentTime(&timestamp);
    466c:	ce 01       	movw	r24, r28
    466e:	86 96       	adiw	r24, 0x26	; 38
    4670:	0e 94 a7 14 	call	0x294e	; 0x294e <RTC_GetCurrentTime>

        sample_packet.type = TR_PACKET_TYPE_READING;
    4674:	82 e0       	ldi	r24, 0x02	; 2
    4676:	8f 83       	std	Y+7, r24	; 0x07
        sample_packet.size = sizeof(dht22_data_type) + 1;
    4678:	8a e0       	ldi	r24, 0x0A	; 10
    467a:	88 87       	std	Y+8, r24	; 0x08
        sample_packet.timestamp = timestamp;
    467c:	86 e0       	ldi	r24, 0x06	; 6
    467e:	fe 01       	movw	r30, r28
    4680:	b6 96       	adiw	r30, 0x26	; 38
    4682:	de 01       	movw	r26, r28
    4684:	11 96       	adiw	r26, 0x01	; 1
    4686:	01 90       	ld	r0, Z+
    4688:	0d 92       	st	X+, r0
    468a:	8a 95       	dec	r24
    468c:	e1 f7       	brne	.-8      	; 0x4686 <Sensor_Update+0x90>
        memcpy(sample_packet.data, (uint8_t *)&sample, sizeof(dht22_data_type));
    468e:	89 e0       	ldi	r24, 0x09	; 9
    4690:	fe 01       	movw	r30, r28
    4692:	7d 96       	adiw	r30, 0x1d	; 29
    4694:	de 01       	movw	r26, r28
    4696:	19 96       	adiw	r26, 0x09	; 9
    4698:	01 90       	ld	r0, Z+
    469a:	0d 92       	st	X+, r0
    469c:	8a 95       	dec	r24
    469e:	e1 f7       	brne	.-8      	; 0x4698 <Sensor_Update+0xa2>

        LED_ChangeState(LED_STATE_SENDING);
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_ChangeState>
        Transceiver_SendPacket(0xAA, false, &sample_packet, SendCallback);
    46a6:	2c eb       	ldi	r18, 0xBC	; 188
    46a8:	32 e2       	ldi	r19, 0x22	; 34
    46aa:	ae 01       	movw	r20, r28
    46ac:	4f 5f       	subi	r20, 0xFF	; 255
    46ae:	5f 4f       	sbci	r21, 0xFF	; 255
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	8a ea       	ldi	r24, 0xAA	; 170
    46b4:	0e 94 e7 18 	call	0x31ce	; 0x31ce <Transceiver_SendPacket>
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    }
}
    46c2:	ab 96       	adiw	r28, 0x2b	; 43
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	f8 94       	cli
    46c8:	de bf       	out	0x3e, r29	; 62
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	cd bf       	out	0x3d, r28	; 61
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
    46d4:	0f 91       	pop	r16
    46d6:	08 95       	ret

000046d8 <Sensor_WakeUp>:
/// @param  *event Pointer to triggered event
/// @return None
///
void Sensor_WakeUp(const event_type *event)
{
    sc_assert(event != NULL);
    46d8:	89 2b       	or	r24, r25
    46da:	41 f4       	brne	.+16     	; 0x46ec <Sensor_WakeUp+0x14>
    46dc:	42 e2       	ldi	r20, 0x22	; 34
    46de:	53 e1       	ldi	r21, 0x13	; 19
    46e0:	68 e6       	ldi	r22, 0x68	; 104
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	84 e1       	ldi	r24, 0x14	; 20
    46e6:	93 e1       	ldi	r25, 0x13	; 19
    46e8:	0e 94 ab 19 	call	0x3356	; 0x3356 <ErrorHandler_AssertFail>

    libDHT22_StartReading();
    46ec:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <libDHT22_StartReading>
    46f0:	08 95       	ret

000046f2 <__subsf3>:
    46f2:	50 58       	subi	r21, 0x80	; 128

000046f4 <__addsf3>:
    46f4:	bb 27       	eor	r27, r27
    46f6:	aa 27       	eor	r26, r26
    46f8:	0e d0       	rcall	.+28     	; 0x4716 <__addsf3x>
    46fa:	48 c1       	rjmp	.+656    	; 0x498c <__fp_round>
    46fc:	39 d1       	rcall	.+626    	; 0x4970 <__fp_pscA>
    46fe:	30 f0       	brcs	.+12     	; 0x470c <__addsf3+0x18>
    4700:	3e d1       	rcall	.+636    	; 0x497e <__fp_pscB>
    4702:	20 f0       	brcs	.+8      	; 0x470c <__addsf3+0x18>
    4704:	31 f4       	brne	.+12     	; 0x4712 <__addsf3+0x1e>
    4706:	9f 3f       	cpi	r25, 0xFF	; 255
    4708:	11 f4       	brne	.+4      	; 0x470e <__addsf3+0x1a>
    470a:	1e f4       	brtc	.+6      	; 0x4712 <__addsf3+0x1e>
    470c:	2e c1       	rjmp	.+604    	; 0x496a <__fp_nan>
    470e:	0e f4       	brtc	.+2      	; 0x4712 <__addsf3+0x1e>
    4710:	e0 95       	com	r30
    4712:	e7 fb       	bst	r30, 7
    4714:	24 c1       	rjmp	.+584    	; 0x495e <__fp_inf>

00004716 <__addsf3x>:
    4716:	e9 2f       	mov	r30, r25
    4718:	4a d1       	rcall	.+660    	; 0x49ae <__fp_split3>
    471a:	80 f3       	brcs	.-32     	; 0x46fc <__addsf3+0x8>
    471c:	ba 17       	cp	r27, r26
    471e:	62 07       	cpc	r22, r18
    4720:	73 07       	cpc	r23, r19
    4722:	84 07       	cpc	r24, r20
    4724:	95 07       	cpc	r25, r21
    4726:	18 f0       	brcs	.+6      	; 0x472e <__addsf3x+0x18>
    4728:	71 f4       	brne	.+28     	; 0x4746 <__addsf3x+0x30>
    472a:	9e f5       	brtc	.+102    	; 0x4792 <__addsf3x+0x7c>
    472c:	62 c1       	rjmp	.+708    	; 0x49f2 <__fp_zero>
    472e:	0e f4       	brtc	.+2      	; 0x4732 <__addsf3x+0x1c>
    4730:	e0 95       	com	r30
    4732:	0b 2e       	mov	r0, r27
    4734:	ba 2f       	mov	r27, r26
    4736:	a0 2d       	mov	r26, r0
    4738:	0b 01       	movw	r0, r22
    473a:	b9 01       	movw	r22, r18
    473c:	90 01       	movw	r18, r0
    473e:	0c 01       	movw	r0, r24
    4740:	ca 01       	movw	r24, r20
    4742:	a0 01       	movw	r20, r0
    4744:	11 24       	eor	r1, r1
    4746:	ff 27       	eor	r31, r31
    4748:	59 1b       	sub	r21, r25
    474a:	99 f0       	breq	.+38     	; 0x4772 <__addsf3x+0x5c>
    474c:	59 3f       	cpi	r21, 0xF9	; 249
    474e:	50 f4       	brcc	.+20     	; 0x4764 <__addsf3x+0x4e>
    4750:	50 3e       	cpi	r21, 0xE0	; 224
    4752:	68 f1       	brcs	.+90     	; 0x47ae <__addsf3x+0x98>
    4754:	1a 16       	cp	r1, r26
    4756:	f0 40       	sbci	r31, 0x00	; 0
    4758:	a2 2f       	mov	r26, r18
    475a:	23 2f       	mov	r18, r19
    475c:	34 2f       	mov	r19, r20
    475e:	44 27       	eor	r20, r20
    4760:	58 5f       	subi	r21, 0xF8	; 248
    4762:	f3 cf       	rjmp	.-26     	; 0x474a <__addsf3x+0x34>
    4764:	46 95       	lsr	r20
    4766:	37 95       	ror	r19
    4768:	27 95       	ror	r18
    476a:	a7 95       	ror	r26
    476c:	f0 40       	sbci	r31, 0x00	; 0
    476e:	53 95       	inc	r21
    4770:	c9 f7       	brne	.-14     	; 0x4764 <__addsf3x+0x4e>
    4772:	7e f4       	brtc	.+30     	; 0x4792 <__addsf3x+0x7c>
    4774:	1f 16       	cp	r1, r31
    4776:	ba 0b       	sbc	r27, r26
    4778:	62 0b       	sbc	r22, r18
    477a:	73 0b       	sbc	r23, r19
    477c:	84 0b       	sbc	r24, r20
    477e:	ba f0       	brmi	.+46     	; 0x47ae <__addsf3x+0x98>
    4780:	91 50       	subi	r25, 0x01	; 1
    4782:	a1 f0       	breq	.+40     	; 0x47ac <__addsf3x+0x96>
    4784:	ff 0f       	add	r31, r31
    4786:	bb 1f       	adc	r27, r27
    4788:	66 1f       	adc	r22, r22
    478a:	77 1f       	adc	r23, r23
    478c:	88 1f       	adc	r24, r24
    478e:	c2 f7       	brpl	.-16     	; 0x4780 <__addsf3x+0x6a>
    4790:	0e c0       	rjmp	.+28     	; 0x47ae <__addsf3x+0x98>
    4792:	ba 0f       	add	r27, r26
    4794:	62 1f       	adc	r22, r18
    4796:	73 1f       	adc	r23, r19
    4798:	84 1f       	adc	r24, r20
    479a:	48 f4       	brcc	.+18     	; 0x47ae <__addsf3x+0x98>
    479c:	87 95       	ror	r24
    479e:	77 95       	ror	r23
    47a0:	67 95       	ror	r22
    47a2:	b7 95       	ror	r27
    47a4:	f7 95       	ror	r31
    47a6:	9e 3f       	cpi	r25, 0xFE	; 254
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <__addsf3x+0x96>
    47aa:	b3 cf       	rjmp	.-154    	; 0x4712 <__addsf3+0x1e>
    47ac:	93 95       	inc	r25
    47ae:	88 0f       	add	r24, r24
    47b0:	08 f0       	brcs	.+2      	; 0x47b4 <__addsf3x+0x9e>
    47b2:	99 27       	eor	r25, r25
    47b4:	ee 0f       	add	r30, r30
    47b6:	97 95       	ror	r25
    47b8:	87 95       	ror	r24
    47ba:	08 95       	ret

000047bc <__divsf3>:
    47bc:	0c d0       	rcall	.+24     	; 0x47d6 <__divsf3x>
    47be:	e6 c0       	rjmp	.+460    	; 0x498c <__fp_round>
    47c0:	de d0       	rcall	.+444    	; 0x497e <__fp_pscB>
    47c2:	40 f0       	brcs	.+16     	; 0x47d4 <__divsf3+0x18>
    47c4:	d5 d0       	rcall	.+426    	; 0x4970 <__fp_pscA>
    47c6:	30 f0       	brcs	.+12     	; 0x47d4 <__divsf3+0x18>
    47c8:	21 f4       	brne	.+8      	; 0x47d2 <__divsf3+0x16>
    47ca:	5f 3f       	cpi	r21, 0xFF	; 255
    47cc:	19 f0       	breq	.+6      	; 0x47d4 <__divsf3+0x18>
    47ce:	c7 c0       	rjmp	.+398    	; 0x495e <__fp_inf>
    47d0:	51 11       	cpse	r21, r1
    47d2:	10 c1       	rjmp	.+544    	; 0x49f4 <__fp_szero>
    47d4:	ca c0       	rjmp	.+404    	; 0x496a <__fp_nan>

000047d6 <__divsf3x>:
    47d6:	eb d0       	rcall	.+470    	; 0x49ae <__fp_split3>
    47d8:	98 f3       	brcs	.-26     	; 0x47c0 <__divsf3+0x4>

000047da <__divsf3_pse>:
    47da:	99 23       	and	r25, r25
    47dc:	c9 f3       	breq	.-14     	; 0x47d0 <__divsf3+0x14>
    47de:	55 23       	and	r21, r21
    47e0:	b1 f3       	breq	.-20     	; 0x47ce <__divsf3+0x12>
    47e2:	95 1b       	sub	r25, r21
    47e4:	55 0b       	sbc	r21, r21
    47e6:	bb 27       	eor	r27, r27
    47e8:	aa 27       	eor	r26, r26
    47ea:	62 17       	cp	r22, r18
    47ec:	73 07       	cpc	r23, r19
    47ee:	84 07       	cpc	r24, r20
    47f0:	38 f0       	brcs	.+14     	; 0x4800 <__divsf3_pse+0x26>
    47f2:	9f 5f       	subi	r25, 0xFF	; 255
    47f4:	5f 4f       	sbci	r21, 0xFF	; 255
    47f6:	22 0f       	add	r18, r18
    47f8:	33 1f       	adc	r19, r19
    47fa:	44 1f       	adc	r20, r20
    47fc:	aa 1f       	adc	r26, r26
    47fe:	a9 f3       	breq	.-22     	; 0x47ea <__divsf3_pse+0x10>
    4800:	33 d0       	rcall	.+102    	; 0x4868 <__divsf3_pse+0x8e>
    4802:	0e 2e       	mov	r0, r30
    4804:	3a f0       	brmi	.+14     	; 0x4814 <__divsf3_pse+0x3a>
    4806:	e0 e8       	ldi	r30, 0x80	; 128
    4808:	30 d0       	rcall	.+96     	; 0x486a <__divsf3_pse+0x90>
    480a:	91 50       	subi	r25, 0x01	; 1
    480c:	50 40       	sbci	r21, 0x00	; 0
    480e:	e6 95       	lsr	r30
    4810:	00 1c       	adc	r0, r0
    4812:	ca f7       	brpl	.-14     	; 0x4806 <__divsf3_pse+0x2c>
    4814:	29 d0       	rcall	.+82     	; 0x4868 <__divsf3_pse+0x8e>
    4816:	fe 2f       	mov	r31, r30
    4818:	27 d0       	rcall	.+78     	; 0x4868 <__divsf3_pse+0x8e>
    481a:	66 0f       	add	r22, r22
    481c:	77 1f       	adc	r23, r23
    481e:	88 1f       	adc	r24, r24
    4820:	bb 1f       	adc	r27, r27
    4822:	26 17       	cp	r18, r22
    4824:	37 07       	cpc	r19, r23
    4826:	48 07       	cpc	r20, r24
    4828:	ab 07       	cpc	r26, r27
    482a:	b0 e8       	ldi	r27, 0x80	; 128
    482c:	09 f0       	breq	.+2      	; 0x4830 <__divsf3_pse+0x56>
    482e:	bb 0b       	sbc	r27, r27
    4830:	80 2d       	mov	r24, r0
    4832:	bf 01       	movw	r22, r30
    4834:	ff 27       	eor	r31, r31
    4836:	93 58       	subi	r25, 0x83	; 131
    4838:	5f 4f       	sbci	r21, 0xFF	; 255
    483a:	2a f0       	brmi	.+10     	; 0x4846 <__divsf3_pse+0x6c>
    483c:	9e 3f       	cpi	r25, 0xFE	; 254
    483e:	51 05       	cpc	r21, r1
    4840:	68 f0       	brcs	.+26     	; 0x485c <__divsf3_pse+0x82>
    4842:	8d c0       	rjmp	.+282    	; 0x495e <__fp_inf>
    4844:	d7 c0       	rjmp	.+430    	; 0x49f4 <__fp_szero>
    4846:	5f 3f       	cpi	r21, 0xFF	; 255
    4848:	ec f3       	brlt	.-6      	; 0x4844 <__divsf3_pse+0x6a>
    484a:	98 3e       	cpi	r25, 0xE8	; 232
    484c:	dc f3       	brlt	.-10     	; 0x4844 <__divsf3_pse+0x6a>
    484e:	86 95       	lsr	r24
    4850:	77 95       	ror	r23
    4852:	67 95       	ror	r22
    4854:	b7 95       	ror	r27
    4856:	f7 95       	ror	r31
    4858:	9f 5f       	subi	r25, 0xFF	; 255
    485a:	c9 f7       	brne	.-14     	; 0x484e <__divsf3_pse+0x74>
    485c:	88 0f       	add	r24, r24
    485e:	91 1d       	adc	r25, r1
    4860:	96 95       	lsr	r25
    4862:	87 95       	ror	r24
    4864:	97 f9       	bld	r25, 7
    4866:	08 95       	ret
    4868:	e1 e0       	ldi	r30, 0x01	; 1
    486a:	66 0f       	add	r22, r22
    486c:	77 1f       	adc	r23, r23
    486e:	88 1f       	adc	r24, r24
    4870:	bb 1f       	adc	r27, r27
    4872:	62 17       	cp	r22, r18
    4874:	73 07       	cpc	r23, r19
    4876:	84 07       	cpc	r24, r20
    4878:	ba 07       	cpc	r27, r26
    487a:	20 f0       	brcs	.+8      	; 0x4884 <__divsf3_pse+0xaa>
    487c:	62 1b       	sub	r22, r18
    487e:	73 0b       	sbc	r23, r19
    4880:	84 0b       	sbc	r24, r20
    4882:	ba 0b       	sbc	r27, r26
    4884:	ee 1f       	adc	r30, r30
    4886:	88 f7       	brcc	.-30     	; 0x486a <__divsf3_pse+0x90>
    4888:	e0 95       	com	r30
    488a:	08 95       	ret

0000488c <__fixunssfsi>:
    488c:	98 d0       	rcall	.+304    	; 0x49be <__fp_splitA>
    488e:	88 f0       	brcs	.+34     	; 0x48b2 <__fixunssfsi+0x26>
    4890:	9f 57       	subi	r25, 0x7F	; 127
    4892:	90 f0       	brcs	.+36     	; 0x48b8 <__fixunssfsi+0x2c>
    4894:	b9 2f       	mov	r27, r25
    4896:	99 27       	eor	r25, r25
    4898:	b7 51       	subi	r27, 0x17	; 23
    489a:	a0 f0       	brcs	.+40     	; 0x48c4 <__fixunssfsi+0x38>
    489c:	d1 f0       	breq	.+52     	; 0x48d2 <__fixunssfsi+0x46>
    489e:	66 0f       	add	r22, r22
    48a0:	77 1f       	adc	r23, r23
    48a2:	88 1f       	adc	r24, r24
    48a4:	99 1f       	adc	r25, r25
    48a6:	1a f0       	brmi	.+6      	; 0x48ae <__fixunssfsi+0x22>
    48a8:	ba 95       	dec	r27
    48aa:	c9 f7       	brne	.-14     	; 0x489e <__fixunssfsi+0x12>
    48ac:	12 c0       	rjmp	.+36     	; 0x48d2 <__fixunssfsi+0x46>
    48ae:	b1 30       	cpi	r27, 0x01	; 1
    48b0:	81 f0       	breq	.+32     	; 0x48d2 <__fixunssfsi+0x46>
    48b2:	9f d0       	rcall	.+318    	; 0x49f2 <__fp_zero>
    48b4:	b1 e0       	ldi	r27, 0x01	; 1
    48b6:	08 95       	ret
    48b8:	9c c0       	rjmp	.+312    	; 0x49f2 <__fp_zero>
    48ba:	67 2f       	mov	r22, r23
    48bc:	78 2f       	mov	r23, r24
    48be:	88 27       	eor	r24, r24
    48c0:	b8 5f       	subi	r27, 0xF8	; 248
    48c2:	39 f0       	breq	.+14     	; 0x48d2 <__fixunssfsi+0x46>
    48c4:	b9 3f       	cpi	r27, 0xF9	; 249
    48c6:	cc f3       	brlt	.-14     	; 0x48ba <__fixunssfsi+0x2e>
    48c8:	86 95       	lsr	r24
    48ca:	77 95       	ror	r23
    48cc:	67 95       	ror	r22
    48ce:	b3 95       	inc	r27
    48d0:	d9 f7       	brne	.-10     	; 0x48c8 <__fixunssfsi+0x3c>
    48d2:	3e f4       	brtc	.+14     	; 0x48e2 <__fixunssfsi+0x56>
    48d4:	90 95       	com	r25
    48d6:	80 95       	com	r24
    48d8:	70 95       	com	r23
    48da:	61 95       	neg	r22
    48dc:	7f 4f       	sbci	r23, 0xFF	; 255
    48de:	8f 4f       	sbci	r24, 0xFF	; 255
    48e0:	9f 4f       	sbci	r25, 0xFF	; 255
    48e2:	08 95       	ret

000048e4 <__floatunsisf>:
    48e4:	e8 94       	clt
    48e6:	09 c0       	rjmp	.+18     	; 0x48fa <__floatsisf+0x12>

000048e8 <__floatsisf>:
    48e8:	97 fb       	bst	r25, 7
    48ea:	3e f4       	brtc	.+14     	; 0x48fa <__floatsisf+0x12>
    48ec:	90 95       	com	r25
    48ee:	80 95       	com	r24
    48f0:	70 95       	com	r23
    48f2:	61 95       	neg	r22
    48f4:	7f 4f       	sbci	r23, 0xFF	; 255
    48f6:	8f 4f       	sbci	r24, 0xFF	; 255
    48f8:	9f 4f       	sbci	r25, 0xFF	; 255
    48fa:	99 23       	and	r25, r25
    48fc:	a9 f0       	breq	.+42     	; 0x4928 <__floatsisf+0x40>
    48fe:	f9 2f       	mov	r31, r25
    4900:	96 e9       	ldi	r25, 0x96	; 150
    4902:	bb 27       	eor	r27, r27
    4904:	93 95       	inc	r25
    4906:	f6 95       	lsr	r31
    4908:	87 95       	ror	r24
    490a:	77 95       	ror	r23
    490c:	67 95       	ror	r22
    490e:	b7 95       	ror	r27
    4910:	f1 11       	cpse	r31, r1
    4912:	f8 cf       	rjmp	.-16     	; 0x4904 <__floatsisf+0x1c>
    4914:	fa f4       	brpl	.+62     	; 0x4954 <__floatsisf+0x6c>
    4916:	bb 0f       	add	r27, r27
    4918:	11 f4       	brne	.+4      	; 0x491e <__floatsisf+0x36>
    491a:	60 ff       	sbrs	r22, 0
    491c:	1b c0       	rjmp	.+54     	; 0x4954 <__floatsisf+0x6c>
    491e:	6f 5f       	subi	r22, 0xFF	; 255
    4920:	7f 4f       	sbci	r23, 0xFF	; 255
    4922:	8f 4f       	sbci	r24, 0xFF	; 255
    4924:	9f 4f       	sbci	r25, 0xFF	; 255
    4926:	16 c0       	rjmp	.+44     	; 0x4954 <__floatsisf+0x6c>
    4928:	88 23       	and	r24, r24
    492a:	11 f0       	breq	.+4      	; 0x4930 <__floatsisf+0x48>
    492c:	96 e9       	ldi	r25, 0x96	; 150
    492e:	11 c0       	rjmp	.+34     	; 0x4952 <__floatsisf+0x6a>
    4930:	77 23       	and	r23, r23
    4932:	21 f0       	breq	.+8      	; 0x493c <__floatsisf+0x54>
    4934:	9e e8       	ldi	r25, 0x8E	; 142
    4936:	87 2f       	mov	r24, r23
    4938:	76 2f       	mov	r23, r22
    493a:	05 c0       	rjmp	.+10     	; 0x4946 <__floatsisf+0x5e>
    493c:	66 23       	and	r22, r22
    493e:	71 f0       	breq	.+28     	; 0x495c <__floatsisf+0x74>
    4940:	96 e8       	ldi	r25, 0x86	; 134
    4942:	86 2f       	mov	r24, r22
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	60 e0       	ldi	r22, 0x00	; 0
    4948:	2a f0       	brmi	.+10     	; 0x4954 <__floatsisf+0x6c>
    494a:	9a 95       	dec	r25
    494c:	66 0f       	add	r22, r22
    494e:	77 1f       	adc	r23, r23
    4950:	88 1f       	adc	r24, r24
    4952:	da f7       	brpl	.-10     	; 0x494a <__floatsisf+0x62>
    4954:	88 0f       	add	r24, r24
    4956:	96 95       	lsr	r25
    4958:	87 95       	ror	r24
    495a:	97 f9       	bld	r25, 7
    495c:	08 95       	ret

0000495e <__fp_inf>:
    495e:	97 f9       	bld	r25, 7
    4960:	9f 67       	ori	r25, 0x7F	; 127
    4962:	80 e8       	ldi	r24, 0x80	; 128
    4964:	70 e0       	ldi	r23, 0x00	; 0
    4966:	60 e0       	ldi	r22, 0x00	; 0
    4968:	08 95       	ret

0000496a <__fp_nan>:
    496a:	9f ef       	ldi	r25, 0xFF	; 255
    496c:	80 ec       	ldi	r24, 0xC0	; 192
    496e:	08 95       	ret

00004970 <__fp_pscA>:
    4970:	00 24       	eor	r0, r0
    4972:	0a 94       	dec	r0
    4974:	16 16       	cp	r1, r22
    4976:	17 06       	cpc	r1, r23
    4978:	18 06       	cpc	r1, r24
    497a:	09 06       	cpc	r0, r25
    497c:	08 95       	ret

0000497e <__fp_pscB>:
    497e:	00 24       	eor	r0, r0
    4980:	0a 94       	dec	r0
    4982:	12 16       	cp	r1, r18
    4984:	13 06       	cpc	r1, r19
    4986:	14 06       	cpc	r1, r20
    4988:	05 06       	cpc	r0, r21
    498a:	08 95       	ret

0000498c <__fp_round>:
    498c:	09 2e       	mov	r0, r25
    498e:	03 94       	inc	r0
    4990:	00 0c       	add	r0, r0
    4992:	11 f4       	brne	.+4      	; 0x4998 <__fp_round+0xc>
    4994:	88 23       	and	r24, r24
    4996:	52 f0       	brmi	.+20     	; 0x49ac <__fp_round+0x20>
    4998:	bb 0f       	add	r27, r27
    499a:	40 f4       	brcc	.+16     	; 0x49ac <__fp_round+0x20>
    499c:	bf 2b       	or	r27, r31
    499e:	11 f4       	brne	.+4      	; 0x49a4 <__fp_round+0x18>
    49a0:	60 ff       	sbrs	r22, 0
    49a2:	04 c0       	rjmp	.+8      	; 0x49ac <__fp_round+0x20>
    49a4:	6f 5f       	subi	r22, 0xFF	; 255
    49a6:	7f 4f       	sbci	r23, 0xFF	; 255
    49a8:	8f 4f       	sbci	r24, 0xFF	; 255
    49aa:	9f 4f       	sbci	r25, 0xFF	; 255
    49ac:	08 95       	ret

000049ae <__fp_split3>:
    49ae:	57 fd       	sbrc	r21, 7
    49b0:	90 58       	subi	r25, 0x80	; 128
    49b2:	44 0f       	add	r20, r20
    49b4:	55 1f       	adc	r21, r21
    49b6:	59 f0       	breq	.+22     	; 0x49ce <__fp_splitA+0x10>
    49b8:	5f 3f       	cpi	r21, 0xFF	; 255
    49ba:	71 f0       	breq	.+28     	; 0x49d8 <__fp_splitA+0x1a>
    49bc:	47 95       	ror	r20

000049be <__fp_splitA>:
    49be:	88 0f       	add	r24, r24
    49c0:	97 fb       	bst	r25, 7
    49c2:	99 1f       	adc	r25, r25
    49c4:	61 f0       	breq	.+24     	; 0x49de <__fp_splitA+0x20>
    49c6:	9f 3f       	cpi	r25, 0xFF	; 255
    49c8:	79 f0       	breq	.+30     	; 0x49e8 <__fp_splitA+0x2a>
    49ca:	87 95       	ror	r24
    49cc:	08 95       	ret
    49ce:	12 16       	cp	r1, r18
    49d0:	13 06       	cpc	r1, r19
    49d2:	14 06       	cpc	r1, r20
    49d4:	55 1f       	adc	r21, r21
    49d6:	f2 cf       	rjmp	.-28     	; 0x49bc <__fp_split3+0xe>
    49d8:	46 95       	lsr	r20
    49da:	f1 df       	rcall	.-30     	; 0x49be <__fp_splitA>
    49dc:	08 c0       	rjmp	.+16     	; 0x49ee <__fp_splitA+0x30>
    49de:	16 16       	cp	r1, r22
    49e0:	17 06       	cpc	r1, r23
    49e2:	18 06       	cpc	r1, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	f1 cf       	rjmp	.-30     	; 0x49ca <__fp_splitA+0xc>
    49e8:	86 95       	lsr	r24
    49ea:	71 05       	cpc	r23, r1
    49ec:	61 05       	cpc	r22, r1
    49ee:	08 94       	sec
    49f0:	08 95       	ret

000049f2 <__fp_zero>:
    49f2:	e8 94       	clt

000049f4 <__fp_szero>:
    49f4:	bb 27       	eor	r27, r27
    49f6:	66 27       	eor	r22, r22
    49f8:	77 27       	eor	r23, r23
    49fa:	cb 01       	movw	r24, r22
    49fc:	97 f9       	bld	r25, 7
    49fe:	08 95       	ret

00004a00 <__udivmodhi4>:
    4a00:	aa 1b       	sub	r26, r26
    4a02:	bb 1b       	sub	r27, r27
    4a04:	51 e1       	ldi	r21, 0x11	; 17
    4a06:	07 c0       	rjmp	.+14     	; 0x4a16 <__udivmodhi4_ep>

00004a08 <__udivmodhi4_loop>:
    4a08:	aa 1f       	adc	r26, r26
    4a0a:	bb 1f       	adc	r27, r27
    4a0c:	a6 17       	cp	r26, r22
    4a0e:	b7 07       	cpc	r27, r23
    4a10:	10 f0       	brcs	.+4      	; 0x4a16 <__udivmodhi4_ep>
    4a12:	a6 1b       	sub	r26, r22
    4a14:	b7 0b       	sbc	r27, r23

00004a16 <__udivmodhi4_ep>:
    4a16:	88 1f       	adc	r24, r24
    4a18:	99 1f       	adc	r25, r25
    4a1a:	5a 95       	dec	r21
    4a1c:	a9 f7       	brne	.-22     	; 0x4a08 <__udivmodhi4_loop>
    4a1e:	80 95       	com	r24
    4a20:	90 95       	com	r25
    4a22:	bc 01       	movw	r22, r24
    4a24:	cd 01       	movw	r24, r26
    4a26:	08 95       	ret

00004a28 <__divmodhi4>:
    4a28:	97 fb       	bst	r25, 7
    4a2a:	07 2e       	mov	r0, r23
    4a2c:	16 f4       	brtc	.+4      	; 0x4a32 <__divmodhi4+0xa>
    4a2e:	00 94       	com	r0
    4a30:	07 d0       	rcall	.+14     	; 0x4a40 <__divmodhi4_neg1>
    4a32:	77 fd       	sbrc	r23, 7
    4a34:	09 d0       	rcall	.+18     	; 0x4a48 <__divmodhi4_neg2>
    4a36:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__udivmodhi4>
    4a3a:	07 fc       	sbrc	r0, 7
    4a3c:	05 d0       	rcall	.+10     	; 0x4a48 <__divmodhi4_neg2>
    4a3e:	3e f4       	brtc	.+14     	; 0x4a4e <__divmodhi4_exit>

00004a40 <__divmodhi4_neg1>:
    4a40:	90 95       	com	r25
    4a42:	81 95       	neg	r24
    4a44:	9f 4f       	sbci	r25, 0xFF	; 255
    4a46:	08 95       	ret

00004a48 <__divmodhi4_neg2>:
    4a48:	70 95       	com	r23
    4a4a:	61 95       	neg	r22
    4a4c:	7f 4f       	sbci	r23, 0xFF	; 255

00004a4e <__divmodhi4_exit>:
    4a4e:	08 95       	ret

00004a50 <__udivmodsi4>:
    4a50:	a1 e2       	ldi	r26, 0x21	; 33
    4a52:	1a 2e       	mov	r1, r26
    4a54:	aa 1b       	sub	r26, r26
    4a56:	bb 1b       	sub	r27, r27
    4a58:	fd 01       	movw	r30, r26
    4a5a:	0d c0       	rjmp	.+26     	; 0x4a76 <__udivmodsi4_ep>

00004a5c <__udivmodsi4_loop>:
    4a5c:	aa 1f       	adc	r26, r26
    4a5e:	bb 1f       	adc	r27, r27
    4a60:	ee 1f       	adc	r30, r30
    4a62:	ff 1f       	adc	r31, r31
    4a64:	a2 17       	cp	r26, r18
    4a66:	b3 07       	cpc	r27, r19
    4a68:	e4 07       	cpc	r30, r20
    4a6a:	f5 07       	cpc	r31, r21
    4a6c:	20 f0       	brcs	.+8      	; 0x4a76 <__udivmodsi4_ep>
    4a6e:	a2 1b       	sub	r26, r18
    4a70:	b3 0b       	sbc	r27, r19
    4a72:	e4 0b       	sbc	r30, r20
    4a74:	f5 0b       	sbc	r31, r21

00004a76 <__udivmodsi4_ep>:
    4a76:	66 1f       	adc	r22, r22
    4a78:	77 1f       	adc	r23, r23
    4a7a:	88 1f       	adc	r24, r24
    4a7c:	99 1f       	adc	r25, r25
    4a7e:	1a 94       	dec	r1
    4a80:	69 f7       	brne	.-38     	; 0x4a5c <__udivmodsi4_loop>
    4a82:	60 95       	com	r22
    4a84:	70 95       	com	r23
    4a86:	80 95       	com	r24
    4a88:	90 95       	com	r25
    4a8a:	9b 01       	movw	r18, r22
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	bd 01       	movw	r22, r26
    4a90:	cf 01       	movw	r24, r30
    4a92:	08 95       	ret

00004a94 <__umulhisi3>:
    4a94:	a2 9f       	mul	r26, r18
    4a96:	b0 01       	movw	r22, r0
    4a98:	b3 9f       	mul	r27, r19
    4a9a:	c0 01       	movw	r24, r0
    4a9c:	a3 9f       	mul	r26, r19
    4a9e:	70 0d       	add	r23, r0
    4aa0:	81 1d       	adc	r24, r1
    4aa2:	11 24       	eor	r1, r1
    4aa4:	91 1d       	adc	r25, r1
    4aa6:	b2 9f       	mul	r27, r18
    4aa8:	70 0d       	add	r23, r0
    4aaa:	81 1d       	adc	r24, r1
    4aac:	11 24       	eor	r1, r1
    4aae:	91 1d       	adc	r25, r1
    4ab0:	08 95       	ret

00004ab2 <strncpy_P>:
    4ab2:	fb 01       	movw	r30, r22
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	41 50       	subi	r20, 0x01	; 1
    4ab8:	50 40       	sbci	r21, 0x00	; 0
    4aba:	48 f0       	brcs	.+18     	; 0x4ace <strncpy_P+0x1c>
    4abc:	05 90       	lpm	r0, Z+
    4abe:	0d 92       	st	X+, r0
    4ac0:	00 20       	and	r0, r0
    4ac2:	c9 f7       	brne	.-14     	; 0x4ab6 <strncpy_P+0x4>
    4ac4:	01 c0       	rjmp	.+2      	; 0x4ac8 <strncpy_P+0x16>
    4ac6:	1d 92       	st	X+, r1
    4ac8:	41 50       	subi	r20, 0x01	; 1
    4aca:	50 40       	sbci	r21, 0x00	; 0
    4acc:	e0 f7       	brcc	.-8      	; 0x4ac6 <strncpy_P+0x14>
    4ace:	08 95       	ret

00004ad0 <memcpy>:
    4ad0:	fb 01       	movw	r30, r22
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <memcpy+0xa>
    4ad6:	01 90       	ld	r0, Z+
    4ad8:	0d 92       	st	X+, r0
    4ada:	41 50       	subi	r20, 0x01	; 1
    4adc:	50 40       	sbci	r21, 0x00	; 0
    4ade:	d8 f7       	brcc	.-10     	; 0x4ad6 <memcpy+0x6>
    4ae0:	08 95       	ret

00004ae2 <vsnprintf_P>:
    4ae2:	ae e0       	ldi	r26, 0x0E	; 14
    4ae4:	b0 e0       	ldi	r27, 0x00	; 0
    4ae6:	e7 e7       	ldi	r30, 0x77	; 119
    4ae8:	f5 e2       	ldi	r31, 0x25	; 37
    4aea:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__prologue_saves__+0x1c>
    4aee:	8c 01       	movw	r16, r24
    4af0:	ca 01       	movw	r24, r20
    4af2:	4e e0       	ldi	r20, 0x0E	; 14
    4af4:	4c 83       	std	Y+4, r20	; 0x04
    4af6:	1a 83       	std	Y+2, r17	; 0x02
    4af8:	09 83       	std	Y+1, r16	; 0x01
    4afa:	77 ff       	sbrs	r23, 7
    4afc:	02 c0       	rjmp	.+4      	; 0x4b02 <vsnprintf_P+0x20>
    4afe:	60 e0       	ldi	r22, 0x00	; 0
    4b00:	70 e8       	ldi	r23, 0x80	; 128
    4b02:	61 50       	subi	r22, 0x01	; 1
    4b04:	71 09       	sbc	r23, r1
    4b06:	7e 83       	std	Y+6, r23	; 0x06
    4b08:	6d 83       	std	Y+5, r22	; 0x05
    4b0a:	a9 01       	movw	r20, r18
    4b0c:	bc 01       	movw	r22, r24
    4b0e:	ce 01       	movw	r24, r28
    4b10:	01 96       	adiw	r24, 0x01	; 1
    4b12:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <vfprintf>
    4b16:	4d 81       	ldd	r20, Y+5	; 0x05
    4b18:	5e 81       	ldd	r21, Y+6	; 0x06
    4b1a:	57 fd       	sbrc	r21, 7
    4b1c:	0a c0       	rjmp	.+20     	; 0x4b32 <vsnprintf_P+0x50>
    4b1e:	2f 81       	ldd	r18, Y+7	; 0x07
    4b20:	38 85       	ldd	r19, Y+8	; 0x08
    4b22:	42 17       	cp	r20, r18
    4b24:	53 07       	cpc	r21, r19
    4b26:	0c f4       	brge	.+2      	; 0x4b2a <vsnprintf_P+0x48>
    4b28:	9a 01       	movw	r18, r20
    4b2a:	f8 01       	movw	r30, r16
    4b2c:	e2 0f       	add	r30, r18
    4b2e:	f3 1f       	adc	r31, r19
    4b30:	10 82       	st	Z, r1
    4b32:	2e 96       	adiw	r28, 0x0e	; 14
    4b34:	e4 e0       	ldi	r30, 0x04	; 4
    4b36:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__epilogue_restores__+0x1c>

00004b3a <vfprintf>:
    4b3a:	ac e0       	ldi	r26, 0x0C	; 12
    4b3c:	b0 e0       	ldi	r27, 0x00	; 0
    4b3e:	e3 ea       	ldi	r30, 0xA3	; 163
    4b40:	f5 e2       	ldi	r31, 0x25	; 37
    4b42:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__prologue_saves__>
    4b46:	7c 01       	movw	r14, r24
    4b48:	6b 01       	movw	r12, r22
    4b4a:	8a 01       	movw	r16, r20
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	17 82       	std	Z+7, r1	; 0x07
    4b50:	16 82       	std	Z+6, r1	; 0x06
    4b52:	83 81       	ldd	r24, Z+3	; 0x03
    4b54:	81 ff       	sbrs	r24, 1
    4b56:	bd c1       	rjmp	.+890    	; 0x4ed2 <vfprintf+0x398>
    4b58:	ce 01       	movw	r24, r28
    4b5a:	01 96       	adiw	r24, 0x01	; 1
    4b5c:	4c 01       	movw	r8, r24
    4b5e:	f7 01       	movw	r30, r14
    4b60:	93 81       	ldd	r25, Z+3	; 0x03
    4b62:	f6 01       	movw	r30, r12
    4b64:	93 fd       	sbrc	r25, 3
    4b66:	85 91       	lpm	r24, Z+
    4b68:	93 ff       	sbrs	r25, 3
    4b6a:	81 91       	ld	r24, Z+
    4b6c:	6f 01       	movw	r12, r30
    4b6e:	88 23       	and	r24, r24
    4b70:	09 f4       	brne	.+2      	; 0x4b74 <vfprintf+0x3a>
    4b72:	ab c1       	rjmp	.+854    	; 0x4eca <vfprintf+0x390>
    4b74:	85 32       	cpi	r24, 0x25	; 37
    4b76:	39 f4       	brne	.+14     	; 0x4b86 <vfprintf+0x4c>
    4b78:	93 fd       	sbrc	r25, 3
    4b7a:	85 91       	lpm	r24, Z+
    4b7c:	93 ff       	sbrs	r25, 3
    4b7e:	81 91       	ld	r24, Z+
    4b80:	6f 01       	movw	r12, r30
    4b82:	85 32       	cpi	r24, 0x25	; 37
    4b84:	29 f4       	brne	.+10     	; 0x4b90 <vfprintf+0x56>
    4b86:	b7 01       	movw	r22, r14
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4b8e:	e7 cf       	rjmp	.-50     	; 0x4b5e <vfprintf+0x24>
    4b90:	51 2c       	mov	r5, r1
    4b92:	31 2c       	mov	r3, r1
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	20 32       	cpi	r18, 0x20	; 32
    4b98:	a0 f4       	brcc	.+40     	; 0x4bc2 <vfprintf+0x88>
    4b9a:	8b 32       	cpi	r24, 0x2B	; 43
    4b9c:	69 f0       	breq	.+26     	; 0x4bb8 <vfprintf+0x7e>
    4b9e:	30 f4       	brcc	.+12     	; 0x4bac <vfprintf+0x72>
    4ba0:	80 32       	cpi	r24, 0x20	; 32
    4ba2:	59 f0       	breq	.+22     	; 0x4bba <vfprintf+0x80>
    4ba4:	83 32       	cpi	r24, 0x23	; 35
    4ba6:	69 f4       	brne	.+26     	; 0x4bc2 <vfprintf+0x88>
    4ba8:	20 61       	ori	r18, 0x10	; 16
    4baa:	2c c0       	rjmp	.+88     	; 0x4c04 <vfprintf+0xca>
    4bac:	8d 32       	cpi	r24, 0x2D	; 45
    4bae:	39 f0       	breq	.+14     	; 0x4bbe <vfprintf+0x84>
    4bb0:	80 33       	cpi	r24, 0x30	; 48
    4bb2:	39 f4       	brne	.+14     	; 0x4bc2 <vfprintf+0x88>
    4bb4:	21 60       	ori	r18, 0x01	; 1
    4bb6:	26 c0       	rjmp	.+76     	; 0x4c04 <vfprintf+0xca>
    4bb8:	22 60       	ori	r18, 0x02	; 2
    4bba:	24 60       	ori	r18, 0x04	; 4
    4bbc:	23 c0       	rjmp	.+70     	; 0x4c04 <vfprintf+0xca>
    4bbe:	28 60       	ori	r18, 0x08	; 8
    4bc0:	21 c0       	rjmp	.+66     	; 0x4c04 <vfprintf+0xca>
    4bc2:	27 fd       	sbrc	r18, 7
    4bc4:	27 c0       	rjmp	.+78     	; 0x4c14 <vfprintf+0xda>
    4bc6:	30 ed       	ldi	r19, 0xD0	; 208
    4bc8:	38 0f       	add	r19, r24
    4bca:	3a 30       	cpi	r19, 0x0A	; 10
    4bcc:	78 f4       	brcc	.+30     	; 0x4bec <vfprintf+0xb2>
    4bce:	26 ff       	sbrs	r18, 6
    4bd0:	06 c0       	rjmp	.+12     	; 0x4bde <vfprintf+0xa4>
    4bd2:	fa e0       	ldi	r31, 0x0A	; 10
    4bd4:	5f 9e       	mul	r5, r31
    4bd6:	30 0d       	add	r19, r0
    4bd8:	11 24       	eor	r1, r1
    4bda:	53 2e       	mov	r5, r19
    4bdc:	13 c0       	rjmp	.+38     	; 0x4c04 <vfprintf+0xca>
    4bde:	8a e0       	ldi	r24, 0x0A	; 10
    4be0:	38 9e       	mul	r3, r24
    4be2:	30 0d       	add	r19, r0
    4be4:	11 24       	eor	r1, r1
    4be6:	33 2e       	mov	r3, r19
    4be8:	20 62       	ori	r18, 0x20	; 32
    4bea:	0c c0       	rjmp	.+24     	; 0x4c04 <vfprintf+0xca>
    4bec:	8e 32       	cpi	r24, 0x2E	; 46
    4bee:	21 f4       	brne	.+8      	; 0x4bf8 <vfprintf+0xbe>
    4bf0:	26 fd       	sbrc	r18, 6
    4bf2:	6b c1       	rjmp	.+726    	; 0x4eca <vfprintf+0x390>
    4bf4:	20 64       	ori	r18, 0x40	; 64
    4bf6:	06 c0       	rjmp	.+12     	; 0x4c04 <vfprintf+0xca>
    4bf8:	8c 36       	cpi	r24, 0x6C	; 108
    4bfa:	11 f4       	brne	.+4      	; 0x4c00 <vfprintf+0xc6>
    4bfc:	20 68       	ori	r18, 0x80	; 128
    4bfe:	02 c0       	rjmp	.+4      	; 0x4c04 <vfprintf+0xca>
    4c00:	88 36       	cpi	r24, 0x68	; 104
    4c02:	41 f4       	brne	.+16     	; 0x4c14 <vfprintf+0xda>
    4c04:	f6 01       	movw	r30, r12
    4c06:	93 fd       	sbrc	r25, 3
    4c08:	85 91       	lpm	r24, Z+
    4c0a:	93 ff       	sbrs	r25, 3
    4c0c:	81 91       	ld	r24, Z+
    4c0e:	6f 01       	movw	r12, r30
    4c10:	81 11       	cpse	r24, r1
    4c12:	c1 cf       	rjmp	.-126    	; 0x4b96 <vfprintf+0x5c>
    4c14:	98 2f       	mov	r25, r24
    4c16:	9f 7d       	andi	r25, 0xDF	; 223
    4c18:	95 54       	subi	r25, 0x45	; 69
    4c1a:	93 30       	cpi	r25, 0x03	; 3
    4c1c:	28 f4       	brcc	.+10     	; 0x4c28 <vfprintf+0xee>
    4c1e:	0c 5f       	subi	r16, 0xFC	; 252
    4c20:	1f 4f       	sbci	r17, 0xFF	; 255
    4c22:	ff e3       	ldi	r31, 0x3F	; 63
    4c24:	f9 83       	std	Y+1, r31	; 0x01
    4c26:	0d c0       	rjmp	.+26     	; 0x4c42 <vfprintf+0x108>
    4c28:	83 36       	cpi	r24, 0x63	; 99
    4c2a:	31 f0       	breq	.+12     	; 0x4c38 <vfprintf+0xfe>
    4c2c:	83 37       	cpi	r24, 0x73	; 115
    4c2e:	71 f0       	breq	.+28     	; 0x4c4c <vfprintf+0x112>
    4c30:	83 35       	cpi	r24, 0x53	; 83
    4c32:	09 f0       	breq	.+2      	; 0x4c36 <vfprintf+0xfc>
    4c34:	5b c0       	rjmp	.+182    	; 0x4cec <vfprintf+0x1b2>
    4c36:	22 c0       	rjmp	.+68     	; 0x4c7c <vfprintf+0x142>
    4c38:	f8 01       	movw	r30, r16
    4c3a:	80 81       	ld	r24, Z
    4c3c:	89 83       	std	Y+1, r24	; 0x01
    4c3e:	0e 5f       	subi	r16, 0xFE	; 254
    4c40:	1f 4f       	sbci	r17, 0xFF	; 255
    4c42:	44 24       	eor	r4, r4
    4c44:	43 94       	inc	r4
    4c46:	51 2c       	mov	r5, r1
    4c48:	54 01       	movw	r10, r8
    4c4a:	15 c0       	rjmp	.+42     	; 0x4c76 <vfprintf+0x13c>
    4c4c:	38 01       	movw	r6, r16
    4c4e:	f2 e0       	ldi	r31, 0x02	; 2
    4c50:	6f 0e       	add	r6, r31
    4c52:	71 1c       	adc	r7, r1
    4c54:	f8 01       	movw	r30, r16
    4c56:	a0 80       	ld	r10, Z
    4c58:	b1 80       	ldd	r11, Z+1	; 0x01
    4c5a:	26 ff       	sbrs	r18, 6
    4c5c:	03 c0       	rjmp	.+6      	; 0x4c64 <vfprintf+0x12a>
    4c5e:	65 2d       	mov	r22, r5
    4c60:	70 e0       	ldi	r23, 0x00	; 0
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <vfprintf+0x12e>
    4c64:	6f ef       	ldi	r22, 0xFF	; 255
    4c66:	7f ef       	ldi	r23, 0xFF	; 255
    4c68:	c5 01       	movw	r24, r10
    4c6a:	2c 87       	std	Y+12, r18	; 0x0c
    4c6c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <strnlen>
    4c70:	2c 01       	movw	r4, r24
    4c72:	83 01       	movw	r16, r6
    4c74:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c76:	2f 77       	andi	r18, 0x7F	; 127
    4c78:	22 2e       	mov	r2, r18
    4c7a:	17 c0       	rjmp	.+46     	; 0x4caa <vfprintf+0x170>
    4c7c:	38 01       	movw	r6, r16
    4c7e:	f2 e0       	ldi	r31, 0x02	; 2
    4c80:	6f 0e       	add	r6, r31
    4c82:	71 1c       	adc	r7, r1
    4c84:	f8 01       	movw	r30, r16
    4c86:	a0 80       	ld	r10, Z
    4c88:	b1 80       	ldd	r11, Z+1	; 0x01
    4c8a:	26 ff       	sbrs	r18, 6
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <vfprintf+0x15a>
    4c8e:	65 2d       	mov	r22, r5
    4c90:	70 e0       	ldi	r23, 0x00	; 0
    4c92:	02 c0       	rjmp	.+4      	; 0x4c98 <vfprintf+0x15e>
    4c94:	6f ef       	ldi	r22, 0xFF	; 255
    4c96:	7f ef       	ldi	r23, 0xFF	; 255
    4c98:	c5 01       	movw	r24, r10
    4c9a:	2c 87       	std	Y+12, r18	; 0x0c
    4c9c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <strnlen_P>
    4ca0:	2c 01       	movw	r4, r24
    4ca2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ca4:	20 68       	ori	r18, 0x80	; 128
    4ca6:	22 2e       	mov	r2, r18
    4ca8:	83 01       	movw	r16, r6
    4caa:	23 fc       	sbrc	r2, 3
    4cac:	1b c0       	rjmp	.+54     	; 0x4ce4 <vfprintf+0x1aa>
    4cae:	83 2d       	mov	r24, r3
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	48 16       	cp	r4, r24
    4cb4:	59 06       	cpc	r5, r25
    4cb6:	b0 f4       	brcc	.+44     	; 0x4ce4 <vfprintf+0x1aa>
    4cb8:	b7 01       	movw	r22, r14
    4cba:	80 e2       	ldi	r24, 0x20	; 32
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4cc2:	3a 94       	dec	r3
    4cc4:	f4 cf       	rjmp	.-24     	; 0x4cae <vfprintf+0x174>
    4cc6:	f5 01       	movw	r30, r10
    4cc8:	27 fc       	sbrc	r2, 7
    4cca:	85 91       	lpm	r24, Z+
    4ccc:	27 fe       	sbrs	r2, 7
    4cce:	81 91       	ld	r24, Z+
    4cd0:	5f 01       	movw	r10, r30
    4cd2:	b7 01       	movw	r22, r14
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4cda:	31 10       	cpse	r3, r1
    4cdc:	3a 94       	dec	r3
    4cde:	f1 e0       	ldi	r31, 0x01	; 1
    4ce0:	4f 1a       	sub	r4, r31
    4ce2:	51 08       	sbc	r5, r1
    4ce4:	41 14       	cp	r4, r1
    4ce6:	51 04       	cpc	r5, r1
    4ce8:	71 f7       	brne	.-36     	; 0x4cc6 <vfprintf+0x18c>
    4cea:	e5 c0       	rjmp	.+458    	; 0x4eb6 <vfprintf+0x37c>
    4cec:	84 36       	cpi	r24, 0x64	; 100
    4cee:	11 f0       	breq	.+4      	; 0x4cf4 <vfprintf+0x1ba>
    4cf0:	89 36       	cpi	r24, 0x69	; 105
    4cf2:	39 f5       	brne	.+78     	; 0x4d42 <vfprintf+0x208>
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	27 ff       	sbrs	r18, 7
    4cf8:	07 c0       	rjmp	.+14     	; 0x4d08 <vfprintf+0x1ce>
    4cfa:	60 81       	ld	r22, Z
    4cfc:	71 81       	ldd	r23, Z+1	; 0x01
    4cfe:	82 81       	ldd	r24, Z+2	; 0x02
    4d00:	93 81       	ldd	r25, Z+3	; 0x03
    4d02:	0c 5f       	subi	r16, 0xFC	; 252
    4d04:	1f 4f       	sbci	r17, 0xFF	; 255
    4d06:	08 c0       	rjmp	.+16     	; 0x4d18 <vfprintf+0x1de>
    4d08:	60 81       	ld	r22, Z
    4d0a:	71 81       	ldd	r23, Z+1	; 0x01
    4d0c:	88 27       	eor	r24, r24
    4d0e:	77 fd       	sbrc	r23, 7
    4d10:	80 95       	com	r24
    4d12:	98 2f       	mov	r25, r24
    4d14:	0e 5f       	subi	r16, 0xFE	; 254
    4d16:	1f 4f       	sbci	r17, 0xFF	; 255
    4d18:	2f 76       	andi	r18, 0x6F	; 111
    4d1a:	b2 2e       	mov	r11, r18
    4d1c:	97 ff       	sbrs	r25, 7
    4d1e:	09 c0       	rjmp	.+18     	; 0x4d32 <vfprintf+0x1f8>
    4d20:	90 95       	com	r25
    4d22:	80 95       	com	r24
    4d24:	70 95       	com	r23
    4d26:	61 95       	neg	r22
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2e:	20 68       	ori	r18, 0x80	; 128
    4d30:	b2 2e       	mov	r11, r18
    4d32:	2a e0       	ldi	r18, 0x0A	; 10
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	a4 01       	movw	r20, r8
    4d38:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__ultoa_invert>
    4d3c:	a8 2e       	mov	r10, r24
    4d3e:	a8 18       	sub	r10, r8
    4d40:	44 c0       	rjmp	.+136    	; 0x4dca <vfprintf+0x290>
    4d42:	85 37       	cpi	r24, 0x75	; 117
    4d44:	29 f4       	brne	.+10     	; 0x4d50 <vfprintf+0x216>
    4d46:	2f 7e       	andi	r18, 0xEF	; 239
    4d48:	b2 2e       	mov	r11, r18
    4d4a:	2a e0       	ldi	r18, 0x0A	; 10
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	25 c0       	rjmp	.+74     	; 0x4d9a <vfprintf+0x260>
    4d50:	f2 2f       	mov	r31, r18
    4d52:	f9 7f       	andi	r31, 0xF9	; 249
    4d54:	bf 2e       	mov	r11, r31
    4d56:	8f 36       	cpi	r24, 0x6F	; 111
    4d58:	c1 f0       	breq	.+48     	; 0x4d8a <vfprintf+0x250>
    4d5a:	18 f4       	brcc	.+6      	; 0x4d62 <vfprintf+0x228>
    4d5c:	88 35       	cpi	r24, 0x58	; 88
    4d5e:	79 f0       	breq	.+30     	; 0x4d7e <vfprintf+0x244>
    4d60:	b4 c0       	rjmp	.+360    	; 0x4eca <vfprintf+0x390>
    4d62:	80 37       	cpi	r24, 0x70	; 112
    4d64:	19 f0       	breq	.+6      	; 0x4d6c <vfprintf+0x232>
    4d66:	88 37       	cpi	r24, 0x78	; 120
    4d68:	21 f0       	breq	.+8      	; 0x4d72 <vfprintf+0x238>
    4d6a:	af c0       	rjmp	.+350    	; 0x4eca <vfprintf+0x390>
    4d6c:	2f 2f       	mov	r18, r31
    4d6e:	20 61       	ori	r18, 0x10	; 16
    4d70:	b2 2e       	mov	r11, r18
    4d72:	b4 fe       	sbrs	r11, 4
    4d74:	0d c0       	rjmp	.+26     	; 0x4d90 <vfprintf+0x256>
    4d76:	8b 2d       	mov	r24, r11
    4d78:	84 60       	ori	r24, 0x04	; 4
    4d7a:	b8 2e       	mov	r11, r24
    4d7c:	09 c0       	rjmp	.+18     	; 0x4d90 <vfprintf+0x256>
    4d7e:	24 ff       	sbrs	r18, 4
    4d80:	0a c0       	rjmp	.+20     	; 0x4d96 <vfprintf+0x25c>
    4d82:	9f 2f       	mov	r25, r31
    4d84:	96 60       	ori	r25, 0x06	; 6
    4d86:	b9 2e       	mov	r11, r25
    4d88:	06 c0       	rjmp	.+12     	; 0x4d96 <vfprintf+0x25c>
    4d8a:	28 e0       	ldi	r18, 0x08	; 8
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	05 c0       	rjmp	.+10     	; 0x4d9a <vfprintf+0x260>
    4d90:	20 e1       	ldi	r18, 0x10	; 16
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <vfprintf+0x260>
    4d96:	20 e1       	ldi	r18, 0x10	; 16
    4d98:	32 e0       	ldi	r19, 0x02	; 2
    4d9a:	f8 01       	movw	r30, r16
    4d9c:	b7 fe       	sbrs	r11, 7
    4d9e:	07 c0       	rjmp	.+14     	; 0x4dae <vfprintf+0x274>
    4da0:	60 81       	ld	r22, Z
    4da2:	71 81       	ldd	r23, Z+1	; 0x01
    4da4:	82 81       	ldd	r24, Z+2	; 0x02
    4da6:	93 81       	ldd	r25, Z+3	; 0x03
    4da8:	0c 5f       	subi	r16, 0xFC	; 252
    4daa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dac:	06 c0       	rjmp	.+12     	; 0x4dba <vfprintf+0x280>
    4dae:	60 81       	ld	r22, Z
    4db0:	71 81       	ldd	r23, Z+1	; 0x01
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 5f       	subi	r16, 0xFE	; 254
    4db8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dba:	a4 01       	movw	r20, r8
    4dbc:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__ultoa_invert>
    4dc0:	a8 2e       	mov	r10, r24
    4dc2:	a8 18       	sub	r10, r8
    4dc4:	fb 2d       	mov	r31, r11
    4dc6:	ff 77       	andi	r31, 0x7F	; 127
    4dc8:	bf 2e       	mov	r11, r31
    4dca:	b6 fe       	sbrs	r11, 6
    4dcc:	0b c0       	rjmp	.+22     	; 0x4de4 <vfprintf+0x2aa>
    4dce:	2b 2d       	mov	r18, r11
    4dd0:	2e 7f       	andi	r18, 0xFE	; 254
    4dd2:	a5 14       	cp	r10, r5
    4dd4:	50 f4       	brcc	.+20     	; 0x4dea <vfprintf+0x2b0>
    4dd6:	b4 fe       	sbrs	r11, 4
    4dd8:	0a c0       	rjmp	.+20     	; 0x4dee <vfprintf+0x2b4>
    4dda:	b2 fc       	sbrc	r11, 2
    4ddc:	08 c0       	rjmp	.+16     	; 0x4dee <vfprintf+0x2b4>
    4dde:	2b 2d       	mov	r18, r11
    4de0:	2e 7e       	andi	r18, 0xEE	; 238
    4de2:	05 c0       	rjmp	.+10     	; 0x4dee <vfprintf+0x2b4>
    4de4:	7a 2c       	mov	r7, r10
    4de6:	2b 2d       	mov	r18, r11
    4de8:	03 c0       	rjmp	.+6      	; 0x4df0 <vfprintf+0x2b6>
    4dea:	7a 2c       	mov	r7, r10
    4dec:	01 c0       	rjmp	.+2      	; 0x4df0 <vfprintf+0x2b6>
    4dee:	75 2c       	mov	r7, r5
    4df0:	24 ff       	sbrs	r18, 4
    4df2:	0d c0       	rjmp	.+26     	; 0x4e0e <vfprintf+0x2d4>
    4df4:	fe 01       	movw	r30, r28
    4df6:	ea 0d       	add	r30, r10
    4df8:	f1 1d       	adc	r31, r1
    4dfa:	80 81       	ld	r24, Z
    4dfc:	80 33       	cpi	r24, 0x30	; 48
    4dfe:	11 f4       	brne	.+4      	; 0x4e04 <vfprintf+0x2ca>
    4e00:	29 7e       	andi	r18, 0xE9	; 233
    4e02:	09 c0       	rjmp	.+18     	; 0x4e16 <vfprintf+0x2dc>
    4e04:	22 ff       	sbrs	r18, 2
    4e06:	06 c0       	rjmp	.+12     	; 0x4e14 <vfprintf+0x2da>
    4e08:	73 94       	inc	r7
    4e0a:	73 94       	inc	r7
    4e0c:	04 c0       	rjmp	.+8      	; 0x4e16 <vfprintf+0x2dc>
    4e0e:	82 2f       	mov	r24, r18
    4e10:	86 78       	andi	r24, 0x86	; 134
    4e12:	09 f0       	breq	.+2      	; 0x4e16 <vfprintf+0x2dc>
    4e14:	73 94       	inc	r7
    4e16:	23 fd       	sbrc	r18, 3
    4e18:	13 c0       	rjmp	.+38     	; 0x4e40 <vfprintf+0x306>
    4e1a:	20 ff       	sbrs	r18, 0
    4e1c:	06 c0       	rjmp	.+12     	; 0x4e2a <vfprintf+0x2f0>
    4e1e:	5a 2c       	mov	r5, r10
    4e20:	73 14       	cp	r7, r3
    4e22:	18 f4       	brcc	.+6      	; 0x4e2a <vfprintf+0x2f0>
    4e24:	53 0c       	add	r5, r3
    4e26:	57 18       	sub	r5, r7
    4e28:	73 2c       	mov	r7, r3
    4e2a:	73 14       	cp	r7, r3
    4e2c:	68 f4       	brcc	.+26     	; 0x4e48 <vfprintf+0x30e>
    4e2e:	b7 01       	movw	r22, r14
    4e30:	80 e2       	ldi	r24, 0x20	; 32
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	2c 87       	std	Y+12, r18	; 0x0c
    4e36:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4e3a:	73 94       	inc	r7
    4e3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e3e:	f5 cf       	rjmp	.-22     	; 0x4e2a <vfprintf+0x2f0>
    4e40:	73 14       	cp	r7, r3
    4e42:	10 f4       	brcc	.+4      	; 0x4e48 <vfprintf+0x30e>
    4e44:	37 18       	sub	r3, r7
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <vfprintf+0x310>
    4e48:	31 2c       	mov	r3, r1
    4e4a:	24 ff       	sbrs	r18, 4
    4e4c:	12 c0       	rjmp	.+36     	; 0x4e72 <vfprintf+0x338>
    4e4e:	b7 01       	movw	r22, r14
    4e50:	80 e3       	ldi	r24, 0x30	; 48
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	2c 87       	std	Y+12, r18	; 0x0c
    4e56:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4e5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e5c:	22 ff       	sbrs	r18, 2
    4e5e:	17 c0       	rjmp	.+46     	; 0x4e8e <vfprintf+0x354>
    4e60:	21 ff       	sbrs	r18, 1
    4e62:	03 c0       	rjmp	.+6      	; 0x4e6a <vfprintf+0x330>
    4e64:	88 e5       	ldi	r24, 0x58	; 88
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <vfprintf+0x334>
    4e6a:	88 e7       	ldi	r24, 0x78	; 120
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	b7 01       	movw	r22, r14
    4e70:	0c c0       	rjmp	.+24     	; 0x4e8a <vfprintf+0x350>
    4e72:	82 2f       	mov	r24, r18
    4e74:	86 78       	andi	r24, 0x86	; 134
    4e76:	59 f0       	breq	.+22     	; 0x4e8e <vfprintf+0x354>
    4e78:	21 fd       	sbrc	r18, 1
    4e7a:	02 c0       	rjmp	.+4      	; 0x4e80 <vfprintf+0x346>
    4e7c:	80 e2       	ldi	r24, 0x20	; 32
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <vfprintf+0x348>
    4e80:	8b e2       	ldi	r24, 0x2B	; 43
    4e82:	27 fd       	sbrc	r18, 7
    4e84:	8d e2       	ldi	r24, 0x2D	; 45
    4e86:	b7 01       	movw	r22, r14
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4e8e:	a5 14       	cp	r10, r5
    4e90:	38 f4       	brcc	.+14     	; 0x4ea0 <vfprintf+0x366>
    4e92:	b7 01       	movw	r22, r14
    4e94:	80 e3       	ldi	r24, 0x30	; 48
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4e9c:	5a 94       	dec	r5
    4e9e:	f7 cf       	rjmp	.-18     	; 0x4e8e <vfprintf+0x354>
    4ea0:	aa 94       	dec	r10
    4ea2:	f4 01       	movw	r30, r8
    4ea4:	ea 0d       	add	r30, r10
    4ea6:	f1 1d       	adc	r31, r1
    4ea8:	80 81       	ld	r24, Z
    4eaa:	b7 01       	movw	r22, r14
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4eb2:	a1 10       	cpse	r10, r1
    4eb4:	f5 cf       	rjmp	.-22     	; 0x4ea0 <vfprintf+0x366>
    4eb6:	33 20       	and	r3, r3
    4eb8:	09 f4       	brne	.+2      	; 0x4ebc <vfprintf+0x382>
    4eba:	51 ce       	rjmp	.-862    	; 0x4b5e <vfprintf+0x24>
    4ebc:	b7 01       	movw	r22, r14
    4ebe:	80 e2       	ldi	r24, 0x20	; 32
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <fputc>
    4ec6:	3a 94       	dec	r3
    4ec8:	f6 cf       	rjmp	.-20     	; 0x4eb6 <vfprintf+0x37c>
    4eca:	f7 01       	movw	r30, r14
    4ecc:	86 81       	ldd	r24, Z+6	; 0x06
    4ece:	97 81       	ldd	r25, Z+7	; 0x07
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <vfprintf+0x39c>
    4ed2:	8f ef       	ldi	r24, 0xFF	; 255
    4ed4:	9f ef       	ldi	r25, 0xFF	; 255
    4ed6:	2c 96       	adiw	r28, 0x0c	; 12
    4ed8:	e2 e1       	ldi	r30, 0x12	; 18
    4eda:	0c 94 47 28 	jmp	0x508e	; 0x508e <__epilogue_restores__>

00004ede <__eerd_block_m328p>:
    4ede:	dc 01       	movw	r26, r24
    4ee0:	cb 01       	movw	r24, r22

00004ee2 <__eerd_blraw_m328p>:
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	f9 99       	sbic	0x1f, 1	; 31
    4ee6:	fe cf       	rjmp	.-4      	; 0x4ee4 <__eerd_blraw_m328p+0x2>
    4ee8:	06 c0       	rjmp	.+12     	; 0x4ef6 <__eerd_blraw_m328p+0x14>
    4eea:	f2 bd       	out	0x22, r31	; 34
    4eec:	e1 bd       	out	0x21, r30	; 33
    4eee:	f8 9a       	sbi	0x1f, 0	; 31
    4ef0:	31 96       	adiw	r30, 0x01	; 1
    4ef2:	00 b4       	in	r0, 0x20	; 32
    4ef4:	0d 92       	st	X+, r0
    4ef6:	41 50       	subi	r20, 0x01	; 1
    4ef8:	50 40       	sbci	r21, 0x00	; 0
    4efa:	b8 f7       	brcc	.-18     	; 0x4eea <__eerd_blraw_m328p+0x8>
    4efc:	08 95       	ret

00004efe <__eerd_word_m328p>:
    4efe:	a8 e1       	ldi	r26, 0x18	; 24
    4f00:	b0 e0       	ldi	r27, 0x00	; 0
    4f02:	42 e0       	ldi	r20, 0x02	; 2
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__eerd_blraw_m328p>

00004f0a <strnlen_P>:
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	05 90       	lpm	r0, Z+
    4f0e:	61 50       	subi	r22, 0x01	; 1
    4f10:	70 40       	sbci	r23, 0x00	; 0
    4f12:	01 10       	cpse	r0, r1
    4f14:	d8 f7       	brcc	.-10     	; 0x4f0c <strnlen_P+0x2>
    4f16:	80 95       	com	r24
    4f18:	90 95       	com	r25
    4f1a:	8e 0f       	add	r24, r30
    4f1c:	9f 1f       	adc	r25, r31
    4f1e:	08 95       	ret

00004f20 <strnlen>:
    4f20:	fc 01       	movw	r30, r24
    4f22:	61 50       	subi	r22, 0x01	; 1
    4f24:	70 40       	sbci	r23, 0x00	; 0
    4f26:	01 90       	ld	r0, Z+
    4f28:	01 10       	cpse	r0, r1
    4f2a:	d8 f7       	brcc	.-10     	; 0x4f22 <strnlen+0x2>
    4f2c:	80 95       	com	r24
    4f2e:	90 95       	com	r25
    4f30:	8e 0f       	add	r24, r30
    4f32:	9f 1f       	adc	r25, r31
    4f34:	08 95       	ret

00004f36 <fputc>:
    4f36:	0f 93       	push	r16
    4f38:	1f 93       	push	r17
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	18 2f       	mov	r17, r24
    4f40:	09 2f       	mov	r16, r25
    4f42:	eb 01       	movw	r28, r22
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	81 fd       	sbrc	r24, 1
    4f48:	03 c0       	rjmp	.+6      	; 0x4f50 <fputc+0x1a>
    4f4a:	8f ef       	ldi	r24, 0xFF	; 255
    4f4c:	9f ef       	ldi	r25, 0xFF	; 255
    4f4e:	20 c0       	rjmp	.+64     	; 0x4f90 <fputc+0x5a>
    4f50:	82 ff       	sbrs	r24, 2
    4f52:	10 c0       	rjmp	.+32     	; 0x4f74 <fputc+0x3e>
    4f54:	4e 81       	ldd	r20, Y+6	; 0x06
    4f56:	5f 81       	ldd	r21, Y+7	; 0x07
    4f58:	2c 81       	ldd	r18, Y+4	; 0x04
    4f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    4f5c:	42 17       	cp	r20, r18
    4f5e:	53 07       	cpc	r21, r19
    4f60:	7c f4       	brge	.+30     	; 0x4f80 <fputc+0x4a>
    4f62:	e8 81       	ld	r30, Y
    4f64:	f9 81       	ldd	r31, Y+1	; 0x01
    4f66:	9f 01       	movw	r18, r30
    4f68:	2f 5f       	subi	r18, 0xFF	; 255
    4f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f6c:	39 83       	std	Y+1, r19	; 0x01
    4f6e:	28 83       	st	Y, r18
    4f70:	10 83       	st	Z, r17
    4f72:	06 c0       	rjmp	.+12     	; 0x4f80 <fputc+0x4a>
    4f74:	e8 85       	ldd	r30, Y+8	; 0x08
    4f76:	f9 85       	ldd	r31, Y+9	; 0x09
    4f78:	81 2f       	mov	r24, r17
    4f7a:	09 95       	icall
    4f7c:	89 2b       	or	r24, r25
    4f7e:	29 f7       	brne	.-54     	; 0x4f4a <fputc+0x14>
    4f80:	2e 81       	ldd	r18, Y+6	; 0x06
    4f82:	3f 81       	ldd	r19, Y+7	; 0x07
    4f84:	2f 5f       	subi	r18, 0xFF	; 255
    4f86:	3f 4f       	sbci	r19, 0xFF	; 255
    4f88:	3f 83       	std	Y+7, r19	; 0x07
    4f8a:	2e 83       	std	Y+6, r18	; 0x06
    4f8c:	81 2f       	mov	r24, r17
    4f8e:	90 2f       	mov	r25, r16
    4f90:	df 91       	pop	r29
    4f92:	cf 91       	pop	r28
    4f94:	1f 91       	pop	r17
    4f96:	0f 91       	pop	r16
    4f98:	08 95       	ret

00004f9a <__ultoa_invert>:
    4f9a:	fa 01       	movw	r30, r20
    4f9c:	aa 27       	eor	r26, r26
    4f9e:	28 30       	cpi	r18, 0x08	; 8
    4fa0:	51 f1       	breq	.+84     	; 0x4ff6 <__ultoa_invert+0x5c>
    4fa2:	20 31       	cpi	r18, 0x10	; 16
    4fa4:	81 f1       	breq	.+96     	; 0x5006 <__ultoa_invert+0x6c>
    4fa6:	e8 94       	clt
    4fa8:	6f 93       	push	r22
    4faa:	6e 7f       	andi	r22, 0xFE	; 254
    4fac:	6e 5f       	subi	r22, 0xFE	; 254
    4fae:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb4:	af 4f       	sbci	r26, 0xFF	; 255
    4fb6:	b1 e0       	ldi	r27, 0x01	; 1
    4fb8:	3e d0       	rcall	.+124    	; 0x5036 <__ultoa_invert+0x9c>
    4fba:	b4 e0       	ldi	r27, 0x04	; 4
    4fbc:	3c d0       	rcall	.+120    	; 0x5036 <__ultoa_invert+0x9c>
    4fbe:	67 0f       	add	r22, r23
    4fc0:	78 1f       	adc	r23, r24
    4fc2:	89 1f       	adc	r24, r25
    4fc4:	9a 1f       	adc	r25, r26
    4fc6:	a1 1d       	adc	r26, r1
    4fc8:	68 0f       	add	r22, r24
    4fca:	79 1f       	adc	r23, r25
    4fcc:	8a 1f       	adc	r24, r26
    4fce:	91 1d       	adc	r25, r1
    4fd0:	a1 1d       	adc	r26, r1
    4fd2:	6a 0f       	add	r22, r26
    4fd4:	71 1d       	adc	r23, r1
    4fd6:	81 1d       	adc	r24, r1
    4fd8:	91 1d       	adc	r25, r1
    4fda:	a1 1d       	adc	r26, r1
    4fdc:	20 d0       	rcall	.+64     	; 0x501e <__ultoa_invert+0x84>
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <__ultoa_invert+0x48>
    4fe0:	68 94       	set
    4fe2:	3f 91       	pop	r19
    4fe4:	2a e0       	ldi	r18, 0x0A	; 10
    4fe6:	26 9f       	mul	r18, r22
    4fe8:	11 24       	eor	r1, r1
    4fea:	30 19       	sub	r19, r0
    4fec:	30 5d       	subi	r19, 0xD0	; 208
    4fee:	31 93       	st	Z+, r19
    4ff0:	de f6       	brtc	.-74     	; 0x4fa8 <__ultoa_invert+0xe>
    4ff2:	cf 01       	movw	r24, r30
    4ff4:	08 95       	ret
    4ff6:	46 2f       	mov	r20, r22
    4ff8:	47 70       	andi	r20, 0x07	; 7
    4ffa:	40 5d       	subi	r20, 0xD0	; 208
    4ffc:	41 93       	st	Z+, r20
    4ffe:	b3 e0       	ldi	r27, 0x03	; 3
    5000:	0f d0       	rcall	.+30     	; 0x5020 <__ultoa_invert+0x86>
    5002:	c9 f7       	brne	.-14     	; 0x4ff6 <__ultoa_invert+0x5c>
    5004:	f6 cf       	rjmp	.-20     	; 0x4ff2 <__ultoa_invert+0x58>
    5006:	46 2f       	mov	r20, r22
    5008:	4f 70       	andi	r20, 0x0F	; 15
    500a:	40 5d       	subi	r20, 0xD0	; 208
    500c:	4a 33       	cpi	r20, 0x3A	; 58
    500e:	18 f0       	brcs	.+6      	; 0x5016 <__ultoa_invert+0x7c>
    5010:	49 5d       	subi	r20, 0xD9	; 217
    5012:	31 fd       	sbrc	r19, 1
    5014:	40 52       	subi	r20, 0x20	; 32
    5016:	41 93       	st	Z+, r20
    5018:	02 d0       	rcall	.+4      	; 0x501e <__ultoa_invert+0x84>
    501a:	a9 f7       	brne	.-22     	; 0x5006 <__ultoa_invert+0x6c>
    501c:	ea cf       	rjmp	.-44     	; 0x4ff2 <__ultoa_invert+0x58>
    501e:	b4 e0       	ldi	r27, 0x04	; 4
    5020:	a6 95       	lsr	r26
    5022:	97 95       	ror	r25
    5024:	87 95       	ror	r24
    5026:	77 95       	ror	r23
    5028:	67 95       	ror	r22
    502a:	ba 95       	dec	r27
    502c:	c9 f7       	brne	.-14     	; 0x5020 <__ultoa_invert+0x86>
    502e:	00 97       	sbiw	r24, 0x00	; 0
    5030:	61 05       	cpc	r22, r1
    5032:	71 05       	cpc	r23, r1
    5034:	08 95       	ret
    5036:	9b 01       	movw	r18, r22
    5038:	ac 01       	movw	r20, r24
    503a:	0a 2e       	mov	r0, r26
    503c:	06 94       	lsr	r0
    503e:	57 95       	ror	r21
    5040:	47 95       	ror	r20
    5042:	37 95       	ror	r19
    5044:	27 95       	ror	r18
    5046:	ba 95       	dec	r27
    5048:	c9 f7       	brne	.-14     	; 0x503c <__ultoa_invert+0xa2>
    504a:	62 0f       	add	r22, r18
    504c:	73 1f       	adc	r23, r19
    504e:	84 1f       	adc	r24, r20
    5050:	95 1f       	adc	r25, r21
    5052:	a0 1d       	adc	r26, r0
    5054:	08 95       	ret

00005056 <__prologue_saves__>:
    5056:	2f 92       	push	r2
    5058:	3f 92       	push	r3
    505a:	4f 92       	push	r4
    505c:	5f 92       	push	r5
    505e:	6f 92       	push	r6
    5060:	7f 92       	push	r7
    5062:	8f 92       	push	r8
    5064:	9f 92       	push	r9
    5066:	af 92       	push	r10
    5068:	bf 92       	push	r11
    506a:	cf 92       	push	r12
    506c:	df 92       	push	r13
    506e:	ef 92       	push	r14
    5070:	ff 92       	push	r15
    5072:	0f 93       	push	r16
    5074:	1f 93       	push	r17
    5076:	cf 93       	push	r28
    5078:	df 93       	push	r29
    507a:	cd b7       	in	r28, 0x3d	; 61
    507c:	de b7       	in	r29, 0x3e	; 62
    507e:	ca 1b       	sub	r28, r26
    5080:	db 0b       	sbc	r29, r27
    5082:	0f b6       	in	r0, 0x3f	; 63
    5084:	f8 94       	cli
    5086:	de bf       	out	0x3e, r29	; 62
    5088:	0f be       	out	0x3f, r0	; 63
    508a:	cd bf       	out	0x3d, r28	; 61
    508c:	09 94       	ijmp

0000508e <__epilogue_restores__>:
    508e:	2a 88       	ldd	r2, Y+18	; 0x12
    5090:	39 88       	ldd	r3, Y+17	; 0x11
    5092:	48 88       	ldd	r4, Y+16	; 0x10
    5094:	5f 84       	ldd	r5, Y+15	; 0x0f
    5096:	6e 84       	ldd	r6, Y+14	; 0x0e
    5098:	7d 84       	ldd	r7, Y+13	; 0x0d
    509a:	8c 84       	ldd	r8, Y+12	; 0x0c
    509c:	9b 84       	ldd	r9, Y+11	; 0x0b
    509e:	aa 84       	ldd	r10, Y+10	; 0x0a
    50a0:	b9 84       	ldd	r11, Y+9	; 0x09
    50a2:	c8 84       	ldd	r12, Y+8	; 0x08
    50a4:	df 80       	ldd	r13, Y+7	; 0x07
    50a6:	ee 80       	ldd	r14, Y+6	; 0x06
    50a8:	fd 80       	ldd	r15, Y+5	; 0x05
    50aa:	0c 81       	ldd	r16, Y+4	; 0x04
    50ac:	1b 81       	ldd	r17, Y+3	; 0x03
    50ae:	aa 81       	ldd	r26, Y+2	; 0x02
    50b0:	b9 81       	ldd	r27, Y+1	; 0x01
    50b2:	ce 0f       	add	r28, r30
    50b4:	d1 1d       	adc	r29, r1
    50b6:	0f b6       	in	r0, 0x3f	; 63
    50b8:	f8 94       	cli
    50ba:	de bf       	out	0x3e, r29	; 62
    50bc:	0f be       	out	0x3f, r0	; 63
    50be:	cd bf       	out	0x3d, r28	; 61
    50c0:	ed 01       	movw	r28, r26
    50c2:	08 95       	ret

000050c4 <_exit>:
    50c4:	f8 94       	cli

000050c6 <__stop_program>:
    50c6:	ff cf       	rjmp	.-2      	; 0x50c6 <__stop_program>
