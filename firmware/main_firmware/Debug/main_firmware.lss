
main_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  00005dde  00005e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dde  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000442  00800308  00800308  0000609a  2**0
                  ALLOC
  3 .eeprom       0000033f  00810000  00810000  0000609a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000063d9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000ac0  00000000  00000000  00006435  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b99d  00000000  00000000  00006ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fa9  00000000  00000000  00012892  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b7a  00000000  00000000  0001583b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023f0  00000000  00000000  000193b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ec0  00000000  00000000  0001b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009266  00000000  00000000  0001e668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  000278ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <StackPaint>
       4:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
       8:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
       c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      10:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      14:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      18:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      1c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      20:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      24:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      28:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      2c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      30:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      34:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      38:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__vector_14>
      3c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      40:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      44:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      48:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__vector_18>
      4c:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__vector_19>
      50:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      54:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      58:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      5c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      60:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>
      64:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	2e 2e       	mov	r2, r30
      6a:	2f 2e       	mov	r2, r31
      6c:	2e 2f       	mov	r18, r30
      6e:	63 6f       	ori	r22, 0xF3	; 243
      70:	6d 6d       	ori	r22, 0xDD	; 221
      72:	6f 6e       	ori	r22, 0xEF	; 239
      74:	5f 6c       	ori	r21, 0xCF	; 207
      76:	69 62       	ori	r22, 0x29	; 41
      78:	72 61       	ori	r23, 0x12	; 18
      7a:	72 79       	andi	r23, 0x92	; 146
      7c:	2f 63       	ori	r18, 0x3F	; 63
      7e:	6f 6d       	ori	r22, 0xDF	; 223
      80:	6d 6f       	ori	r22, 0xFD	; 253
      82:	6e 2e       	mov	r6, r30
      84:	63 00       	.word	0x0063	; ????

00000086 <__c.1709>:
      86:	62 69 74 5f 69 6e 64 65 78 20 3c 20 38 00           bit_index < 8.

00000094 <__c.1917>:
      94:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 6f 6e 66     <INFO> %s() Conf
      a4:	69 67 75 72 61 74 69 6f 6e 20 6c 6f 61 64 65 64     iguration loaded
      b4:	0d 0a 00                                            ...

000000b7 <__c.1913>:
      b7:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
      c7:	72 61 72 79 2f 43 6f 6e 66 69 67 2e 63 00           rary/Config.c.

000000d5 <__c.1915>:
      d5:	43 4f 4e 46 49 47 5f 56 45 52 53 49 4f 4e 20 3d     CONFIG_VERSION =
      e5:	3d 20 65 65 70 72 6f 6d 5f 72 65 61 64 5f 77 6f     = eeprom_read_wo
      f5:	72 64 28 26 6e 76 6d 5f 63 6f 6e 66 69 67 2e 76     rd(&nvm_config.v
     105:	65 72 73 69 6f 6e 29 00                             ersion).

0000010d <__c.1783>:
     10d:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     11d:	72 61 72 79 2f 6c 69 62 41 44 43 2e 63 00           rary/libADC.c.

0000012b <__c.1785>:
     12b:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 41 44 43 5f     index < MAX_ADC_
     13b:	49 4e 50 55 54 53 00                                INPUTS.

00000142 <__c.1774>:
     142:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     152:	72 61 72 79 2f 6c 69 62 41 44 43 2e 63 00           rary/libADC.c.

00000160 <__c.1776>:
     160:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 41 44 43 5f     index < MAX_ADC_
     170:	49 4e 50 55 54 53 00                                INPUTS.

00000177 <__c.1764>:
     177:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 55     <WARNING> %s() U
     187:	6e 6b 6e 6f 77 6e 20 53 74 61 74 65 0d 0a 00        nknown State...

00000196 <__c.1749>:
     196:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     1a6:	20 64 6f 6e 65 0d 0a 00                              done...

000001ae <__c.2158>:
     1ae:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     1be:	20 64 6f 6e 65 0d 0a 00                              done...

000001c6 <__c.2524>:
     1c6:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     1d6:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000001e6 <__c.2526>:
     1e6:	61 64 64 72 65 73 73 20 3c 3d 20 52 45 47 5f 54     address <= REG_T
     1f6:	45 53 54 41 46 43 00                                ESTAFC.

000001fd <__c.2516>:
     1fd:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     20d:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

0000021d <__c.2518>:
     21d:	61 64 64 72 65 73 73 20 3c 3d 20 52 45 47 5f 54     address <= REG_T
     22d:	45 53 54 41 46 43 00                                ESTAFC.

00000234 <__c.2496>:
     234:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     244:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000254 <__c.2498>:
     254:	69 6d 70 65 64 61 6e 63 65 20 3c 3d 20 52 46 4d     impedance <= RFM
     264:	5f 4c 4e 41 5f 5a 49 4e 5f 32 30 30 4f 48 4d 00     _LNA_ZIN_200OHM.

00000274 <__c.2488>:
     274:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     284:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000294 <__c.2490>:
     294:	67 61 69 6e 20 3c 3d 20 52 46 4d 5f 4c 4e 41 5f     gain <= RFM_LNA_
     2a4:	47 41 49 4e 5f 47 36 00                             GAIN_G6.

000002ac <__c.2480>:
     2ac:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     2bc:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000002cc <__c.2482>:
     2cc:	66 72 65 71 75 65 6e 63 79 20 3c 3d 20 52 46 4d     frequency <= RFM
     2dc:	5f 43 4c 4b 4f 55 54 5f 4f 46 46 00                 _CLKOUT_OFF.

000002e8 <__c.2426>:
     2e8:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 49 6e 76     <ERROR> %s() Inv
     2f8:	61 6c 69 64 20 73 79 6e 63 20 77 6f 72 64 20 76     alid sync word v
     308:	61 6c 75 65 3a 20 30 78 30 30 0d 0a 00              alue: 0x00...

00000315 <__c.2422>:
     315:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 49 6e 76     <ERROR> %s() Inv
     325:	61 6c 69 64 20 73 79 6e 63 20 77 6f 72 64 20 6c     alid sync word l
     335:	65 6e 67 74 68 3a 20 25 75 0d 0a 00                 ength: %u...

00000341 <__c.2401>:
     341:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     351:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000361 <__c.2403>:
     361:	73 69 7a 65 20 3e 20 30 20 26 26 20 73 69 7a 65     size > 0 && size
     371:	20 3c 3d 20 4d 41 58 5f 53 59 4e 43 5f 57 4f 52      <= MAX_SYNC_WOR
     381:	44 5f 53 49 5a 45 00                                D_SIZE.

00000388 <__c.2352>:
     388:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 4f     <WARNING> %s() O
     398:	43 50 20 6d 75 73 74 20 62 65 20 64 69 73 61 62     CP must be disab
     3a8:	6c 65 64 20 77 68 69 6c 65 20 69 6e 20 68 69 67     led while in hig
     3b8:	68 20 70 6f 77 65 72 20 6d 6f 64 65 0d 0a 00        h power mode...

000003c7 <__c.2340>:
     3c7:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     3d7:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000003e7 <__c.2342>:
     3e7:	70 6f 77 65 72 5f 6c 65 76 65 6c 20 3c 3d 20 33     power_level <= 3
     3f7:	31 00                                               1.

000003f9 <__c.2335>:
     3f9:	50 6f 77 65 72 20 61 6d 70 6c 69 66 69 65 72 20     Power amplifier 
     409:	6d 6f 64 65 3a 20 30 78 25 30 32 58 0d 0a 00        mode: 0x%02X...

00000418 <__c.2330>:
     418:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     428:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000438 <__c.2332>:
     438:	6d 6f 64 65 20 3e 20 30 78 30 31 20 26 26 20 6d     mode > 0x01 && m
     448:	6f 64 65 20 3c 20 30 78 30 35 00                    ode < 0x05.

00000453 <__c.2325>:
     453:	46 72 65 71 20 64 65 76 69 61 74 69 6f 6e 20 76     Freq deviation v
     463:	61 6c 75 65 3a 20 30 78 25 30 34 58 0d 0a 00        alue: 0x%04X...

00000472 <__c.2323>:
     472:	46 72 65 71 20 64 65 76 69 61 74 69 6f 6e 3a 20     Freq deviation: 
     482:	25 75 0d 0a 00                                      %u...

00000487 <__c.2318>:
     487:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     497:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000004a7 <__c.2320>:
     4a7:	66 72 65 71 75 65 6e 63 79 5f 64 65 76 69 61 74     frequency_deviat
     4b7:	69 6f 6e 20 3e 20 36 30 30 00                       ion > 600.

000004c1 <__c.2313>:
     4c1:	4d 6f 64 75 6c 61 74 69 6f 6e 20 73 68 61 70 69     Modulation shapi
     4d1:	6e 67 3a 20 30 78 25 30 32 58 0d 0a 00              ng: 0x%02X...

000004de <__c.2308>:
     4de:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     4ee:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

000004fe <__c.2310>:
     4fe:	6d 6f 64 75 6c 61 74 69 6f 6e 5f 73 68 61 70 69     modulation_shapi
     50e:	6e 67 20 3c 20 30 78 30 34 00                       ng < 0x04.

00000518 <__c.2300>:
     518:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     528:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000538 <__c.2302>:
     538:	6d 6f 64 75 6c 61 74 69 6f 6e 5f 74 79 70 65 20     modulation_type 
     548:	3d 3d 20 52 46 4d 5f 46 53 4b 20 7c 7c 20 6d 6f     == RFM_FSK || mo
     558:	64 75 6c 61 74 69 6f 6e 5f 74 79 70 65 20 3d 3d     dulation_type ==
     568:	20 52 46 4d 5f 4f 4f 4b 00                           RFM_OOK.

00000571 <__c.2282>:
     571:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     581:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

00000591 <__c.2284>:
     591:	66 69 6c 74 65 72 69 6e 67 20 3c 20 33 00           filtering < 3.

0000059f <__c.2233>:
     59f:	46 72 65 71 20 76 61 6c 75 65 3a 20 30 78 25 30     Freq value: 0x%0
     5af:	33 6c 58 0d 0a 00                                   3lX...

000005b5 <__c.2231>:
     5b5:	46 72 65 71 3a 20 25 6c 75 0d 0a 00                 Freq: %lu...

000005c1 <__c.2196>:
     5c1:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 54 69 6d     <ERROR> %s() Tim
     5d1:	65 6f 75 74 21 0d 0a 00                             eout!...

000005d9 <__c.2180>:
     5d9:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 43 6c 65 61     <INFO> %s() Clea
     5e9:	72 20 46 49 46 4f 0d 0a 00                          r FIFO...

000005f2 <__c.2163>:
     5f2:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 46 49 46     <ERROR> %s() FIF
     602:	4f 20 69 73 20 66 75 6c 6c 0d 0a 00                 O is full...

0000060e <__c.2158>:
     60e:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     61e:	72 61 72 79 2f 6c 69 62 52 46 4d 36 39 2e 63 00     rary/libRFM69.c.

0000062e <__c.2160>:
     62e:	6c 65 6e 67 74 68 20 3c 3d 20 52 46 4d 5f 46 49     length <= RFM_FI
     63e:	46 4f 5f 53 49 5a 45 00                             FO_SIZE.

00000646 <__c.2109>:
     646:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 49     <WARNING> %s() I
     656:	6e 76 61 6c 69 64 20 53 50 49 2d 6d 6f 64 65 0d     nvalid SPI-mode.
     666:	0a 00                                               ..

00000668 <__c.2039>:
     668:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 46 61 69     <ERROR> %s() Fai
     678:	6c 65 64 20 74 6f 20 69 6e 69 74 20 53 50 49 2c     led to init SPI,
     688:	20 69 6e 76 61 6c 69 64 20 6d 6f 64 65 3a 20 25      invalid mode: %
     698:	75 0d 0a 00                                         u...

0000069c <__c.2036>:
     69c:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     6ac:	20 64 6f 6e 65 0d 0a 00                              done...

000006b4 <__c.2245>:
     6b4:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     6c4:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000006cf <__c.2247>:
     6cf:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000006dc <__c.2238>:
     6dc:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     6ec:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000006f7 <__c.2240>:
     6f7:	74 69 6d 65 2d 3e 79 65 61 72 20 3c 20 31 30 30     time->year < 100
	...

00000708 <__c.2234>:
     708:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     718:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000723 <__c.2236>:
     723:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000730 <__c.2225>:
     730:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     740:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

0000074b <__c.2227>:
     74b:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000758 <__c.2217>:
     758:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     768:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000773 <__c.2219>:
     773:	63 61 72 72 79 20 3c 20 32 00                       carry < 2.

0000077d <__c.2211>:
     77d:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     78d:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000798 <__c.2213>:
     798:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000007a5 <__c.2202>:
     7a5:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     7b5:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000007c0 <__c.2204>:
     7c0:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000007cd <__c.2193>:
     7cd:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     7dd:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

000007e8 <__c.2195>:
     7e8:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

000007f5 <__c.2167>:
     7f5:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     805:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000810 <__c.2169>:
     810:	77 65 65 6b 5f 64 61 79 20 3c 3d 20 37 00           week_day <= 7.

0000081e <__c.2163>:
     81e:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     82e:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000839 <__c.2165>:
     839:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

00000846 <__c.2141>:
     846:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     856:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000861 <__c.2143>:
     861:	74 69 6d 65 20 21 3d 20 4e 55 4c 4c 00              time != NULL.

0000086e <__c.2133>:
     86e:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     87e:	72 61 72 79 2f 52 54 43 2e 63 00                    rary/RTC.c.

00000889 <__c.2135>:
     889:	74 69 6d 65 73 74 61 6d 70 20 21 3d 20 4e 55 4c     timestamp != NUL
     899:	4c 00                                               L.

0000089b <__c.2446>:
     89b:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     8ab:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     8bb:	2e 63 00                                            .c.

000008be <__c.2448>:
     8be:	70 61 63 6b 65 74 5f 74 79 70 65 20 3c 20 54 52     packet_type < TR
     8ce:	5f 50 41 43 4b 45 54 5f 4e 52 5f 54 59 50 45 53     _PACKET_NR_TYPES
	...

000008df <__c.2541>:
     8df:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     8ef:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     8ff:	2e 63 00                                            .c.

00000902 <__c.2543>:
     902:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000911 <__c.2536>:
     911:	4e 6f 20 41 43 4b 20 6e 65 65 64 65 64 0d 0a 00     No ACK needed...

00000921 <__c.2534>:
     921:	57 61 69 74 69 6e 67 20 66 6f 72 20 41 43 4b 0d     Waiting for ACK.
     931:	0a 00                                               ..

00000933 <__c.2532>:
     933:	50 61 63 6b 65 74 20 73 65 6e 74 0d 0a 00           Packet sent...

00000941 <__c.2529>:
     941:	46 49 46 4f 20 6e 6f 74 20 65 6d 70 74 79 20 31     FIFO not empty 1
     951:	3a 20 25 75 0d 0a 00                                : %u...

00000958 <__c.2527>:
     958:	54 58 20 72 65 61 64 79 3a 20 25 75 0d 0a 00        TX ready: %u...

00000967 <__c.2525>:
     967:	57 72 69 74 65 20 70 61 63 6b 65 74 20 74 6f 20     Write packet to 
     977:	46 49 46 4f 0d 0a 00                                FIFO...

0000097e <__c.2521>:
     97e:	46 49 46 4f 20 6e 6f 74 20 65 6d 70 74 79 20 30     FIFO not empty 0
     98e:	3a 20 25 75 0d 0a 00                                : %u...

00000995 <__c.2564>:
     995:	25 75 0d 0a 00                                      %u...

0000099a <__c.2562>:
     99a:	25 75 2c 00                                         %u,.

0000099e <__c.2560>:
     99e:	32 30 25 30 32 75 2d 25 30 32 75 2d 25 30 32 75     20%02u-%02u-%02u
     9ae:	20 25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 2c      %02u:%02u:%02u,
	...

000009bf <__c.2558>:
     9bf:	25 75 2c 00                                         %u,.

000009c3 <__c.2556>:
     9c3:	25 64 2c 00                                         %d,.

000009c7 <__c.2554>:
     9c7:	25 75 2c 00                                         %u,.

000009cb <__c.2552>:
     9cb:	25 75 2c 00                                         %u,.

000009cf <__c.2550>:
     9cf:	25 75 2c 00                                         %u,.

000009d3 <__c.2548>:
     9d3:	3c 50 43 4b 3e 00                                   <PCK>.

000009d9 <__c.2489>:
     9d9:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 20 70     <INFO> %s() No p
     9e9:	61 63 6b 65 74 20 68 61 6e 64 6c 65 72 20 66 6f     acket handler fo
     9f9:	72 20 70 61 63 6b 65 74 20 74 79 70 65 20 25 75     r packet type %u
     a09:	0d 0a 00                                            ...

00000a0c <__c.2486>:
     a0c:	3c 45 52 52 4f 52 3e 20 25 73 28 29 20 53 69 7a     <ERROR> %s() Siz
     a1c:	65 20 6f 66 20 64 61 74 61 20 70 61 63 6b 65 74     e of data packet
     a2c:	20 69 73 20 6c 61 72 67 65 72 20 74 68 65 6e 20      is larger then 
     a3c:	74 68 65 20 46 49 46 4f 0d 0a 00                    the FIFO...

00000a47 <__c.2511>:
     a47:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     a57:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     a67:	2e 63 00                                            .c.

00000a6a <__c.2513>:
     a6a:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000a79 <__c.2508>:
     a79:	41 43 4b 20 6d 6f 64 65 20 72 65 61 64 79 0d 0a     ACK mode ready..
	...

00000a8a <__c.2503>:
     a8a:	49 6e 69 74 20 6c 69 73 74 65 6e 3a 20 72 65 73     Init listen: res
     a9a:	74 61 72 74 20 52 58 0d 0a 00                       tart RX...

00000aa4 <__c.2495>:
     aa4:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 65 6e 64     <INFO> %s() Send
     ab4:	69 6e 67 20 70 61 63 6b 65 74 20 66 72 6f 6d 20     ing packet from 
     ac4:	62 75 66 66 65 72 0d 0a 00                          buffer...

00000acd <__c.2423>:
     acd:	2e 2e 2f 2e 2e 2f 63 6f 6d 6d 6f 6e 5f 6c 69 62     ../../common_lib
     add:	72 61 72 79 2f 54 72 61 6e 73 63 65 69 76 65 72     rary/Transceiver
     aed:	2e 63 00                                            .c.

00000af0 <__c.2425>:
     af0:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000aff <__c.2414>:
     aff:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 54     <WARNING> %s() T
     b0f:	72 61 6e 73 63 65 69 76 65 72 20 6e 6f 74 20 69     ransceiver not i
     b1f:	6e 69 74 69 61 6c 69 7a 65 64 0d 0a 00              nitialized...

00000b2c <__c.2407>:
     b2c:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 54 72 61 6e     <INFO> %s() Tran
     b3c:	73 63 65 69 76 65 72 20 69 6e 69 74 69 61 74 65     sceiver initiate
     b4c:	64 0d 0a 00                                         d...

00000b50 <__c.1955>:
     b50:	3c 2f 4c 4f 47 3e 0d 0a 00                          </LOG>...

00000b59 <__c.1950>:
     b59:	25 75 2c 25 6c 75 0d 0a 00                          %u,%lu...

00000b62 <__c.1948>:
     b62:	25 75 2c 25 6c 75 2c 25 75 2c 00                    %u,%lu,%u,.

00000b6d <__c.1946>:
     b6d:	3c 2f 4c 4f 47 3e 0d 0a 00                          </LOG>...

00000b76 <__c.1943>:
     b76:	3c 4c 4f 47 3e 0d 0a 00                             <LOG>...

00000b7e <__c.1935>:
     b7e:	3c 43 52 49 54 49 43 41 4c 3e 20 25 73 28 29 20     <CRITICAL> %s() 
     b8e:	45 6e 74 65 72 69 6e 67 20 66 61 69 6c 20 73 74     Entering fail st
     b9e:	61 74 65 2c 20 6d 61 6e 75 61 6c 20 72 65 62 6f     ate, manual rebo
     bae:	6f 74 20 69 73 20 6e 65 65 64 65 64 2e 0d 0a 00     ot is needed....

00000bbe <__c.1930>:
     bbe:	3c 45 52 52 4f 52 3e 20 46 61 69 6c 65 64 20 61     <ERROR> Failed a
     bce:	73 73 65 72 74 3a 20 25 73 3a 25 75 20 28 25 73     ssert: %s:%u (%s
     bde:	29 0d 0a 00                                         )...

00000be2 <__c.1918>:
     be2:	2e 2e 2f 2e 2e 2f 75 74 69 6c 69 74 79 2f 45 72     ../../utility/Er
     bf2:	72 6f 72 48 61 6e 64 6c 65 72 2e 63 00              rorHandler.c.

00000bff <__c.1920>:
     bff:	63 75 72 72 65 6e 74 5f 69 64 20 21 3d 20 30 00     current_id != 0.

00000c0f <__c.1914>:
     c0f:	2e 2e 2f 2e 2e 2f 75 74 69 6c 69 74 79 2f 45 72     ../../utility/Er
     c1f:	72 6f 72 48 61 6e 64 6c 65 72 2e 63 00              rorHandler.c.

00000c2c <__c.1916>:
     c2c:	63 75 72 72 65 6e 74 5f 69 6e 64 65 78 20 3c 20     current_index < 
     c3c:	45 52 52 4f 52 5f 4c 4f 47 5f 53 49 5a 45 00        ERROR_LOG_SIZE.

00000c4b <__c.1905>:
     c4b:	43 75 72 72 65 6e 74 20 65 72 72 6f 72 20 6c 6f     Current error lo
     c5b:	67 20 69 6e 64 65 78 3a 20 25 75 0d 0a 00           g index: %u...

00000c69 <__c.1809>:
     c69:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 49     <WARNING> %s() I
     c79:	6e 76 61 6c 69 64 20 69 6e 64 69 63 61 74 6f 72     nvalid indicator
     c89:	20 70 6f 73 69 74 69 6f 6e 3a 20 25 75 0d 0a 00      position: %u...

00000c99 <__c.2492>:
     c99:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 20 76     <INFO> %s() No v
     ca9:	61 6c 69 64 20 64 61 74 61 2c 20 63 6f 6e 74 65     alid data, conte
     cb9:	78 74 3a 20 25 75 0d 0a 00                          xt: %u...

00000cc2 <__c.2490>:
     cc2:	48 75 6d 69 64 69 74 79 3a 20 2d 00                 Humidity: -.

00000cce <__c.2488>:
     cce:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 2d 00        Temperature: -.

00000cdd <__c.2486>:
     cdd:	48 75 6d 69 64 69 74 79 3a 20 25 6c 69 2e 25 75     Humidity: %li.%u
     ced:	25 25 00                                            %%.

00000cf0 <__c.2484>:
     cf0:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 25 6c 69     Temperature: %li
     d00:	2e 25 75 43 00                                      .%uC.

00000d05 <__c.2481>:
     d05:	25 75 00                                            %u.

00000d08 <__c.2507>:
     d08:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 20 76     <INFO> %s() No v
     d18:	61 6c 69 64 20 64 61 74 61 2c 20 63 6f 6e 74 65     alid data, conte
     d28:	78 74 3a 20 25 75 0d 0a 00                          xt: %u...

00000d31 <__c.2505>:
     d31:	53 6f 75 72 63 65 3a 20 2d 00                       Source: -.

00000d3b <__c.2503>:
     d3b:	52 53 53 49 3a 20 2d 00                             RSSI: -.

00000d43 <__c.2501>:
     d43:	53 6f 75 72 63 65 3a 20 30 78 25 30 32 58 00        Source: 0x%02X.

00000d52 <__c.2499>:
     d52:	52 53 53 49 3a 20 25 64 00                          RSSI: %d.

00000d5b <__c.2469>:
     d5b:	2e 2e 2f 67 75 69 2f 67 75 69 4e 6f 64 65 73 2e     ../gui/guiNodes.
     d6b:	63 00                                               c.

00000d6d <__c.2471>:
     d6d:	76 69 65 77 5f 69 6e 64 65 78 20 2b 20 4d 41 58     view_index + MAX
     d7d:	5f 4e 52 5f 4e 4f 44 45 5f 56 49 45 57 53 20 3c     _NR_NODE_VIEWS <
     d8d:	20 4d 41 58 5f 4e 52 5f 4e 4f 44 45 5f 56 49 45      MAX_NR_NODE_VIE
     d9d:	57 53 20 2a 20 32 00                                WS * 2.

00000da4 <__c.2213>:
     da4:	25 30 32 75 3a 25 30 32 75 00                       %02u:%02u.

00000dae <__c.2221>:
     dae:	25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 00        %02u:%02u:%02u.

00000dbd <__c.2219>:
     dbd:	32 30 25 30 32 75 2d 25 30 32 75 2d 25 30 32 75     20%02u-%02u-%02u
	...

00000dce <__c.2206>:
     dce:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     dde:	20 64 6f 6e 65 0d 0a 00                              done...

00000de6 <__c.2130>:
     de6:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 2d 2d 00     Temperature: --.

00000df6 <__c.2128>:
     df6:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 25 75 2e     Temperature: %u.
     e06:	25 75 43 00                                         %uC.

00000e0a <__c.2121>:
     e0a:	61 76 67 3a 20 25 75 43 00                          avg: %uC.

00000e13 <__c.2119>:
     e13:	6e 6f 77 3a 20 25 75 43 00                          now: %uC.

00000e1c <__c.2117>:
     e1c:	6d 69 6e 3a 20 25 75 43 00                          min: %uC.

00000e25 <__c.2115>:
     e25:	6d 61 78 3a 20 25 75 43 00                          max: %uC.

00000e2e <__c.2109>:
     e2e:	53 61 6d 70 6c 65 20 74 69 6d 65 3a 20 25 75 20     Sample time: %u 
     e3e:	73 65 63 00                                         sec.

00000e42 <__c.2107>:
     e42:	41 76 67 2e 20 70 65 72 69 6f 64 3a 20 25 75 20     Avg. period: %u 
     e52:	6d 69 6e 00                                         min.

00000e56 <__c.2008>:
     e56:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 65 77 20     <INFO> %s() New 
     e66:	76 69 65 77 20 61 64 64 65 64 20 61 73 20 73 69     view added as si
     e76:	62 6c 69 6e 67 20 74 6f 20 72 6f 6f 74 0d 0a 00     bling to root...

00000e86 <__c.2005>:
     e86:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 65 77 20     <INFO> %s() New 
     e96:	76 69 65 77 20 61 64 64 65 64 20 61 73 20 72 6f     view added as ro
     ea6:	6f 74 0d 0a 00                                      ot...

00000eab <__c.1987>:
     eab:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     ebb:	20 64 6f 6e 65 0d 0a 00                              done...

00000ec3 <__c.2062>:
     ec3:	50 75 73 68 0d 0a 00                                Push...

00000eca <__c.2054>:
     eca:	4c 65 66 74 0d 0a 00                                Left...

00000ed1 <__c.2052>:
     ed1:	52 69 67 68 74 0d 0a 00                             Right...

00000ed9 <__c.2036>:
     ed9:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     ee9:	20 64 6f 6e 65 0d 0a 00                              done...

00000ef1 <__c.1979>:
     ef1:	2e 2e 2f 2e 2f 53 65 6e 73 6f 72 2e 63 00           .././Sensor.c.

00000eff <__c.1981>:
     eff:	73 63 5f 61 73 73 65 72 74 5f 66 61 69 6c 00        sc_assert_fail.

00000f0e <__c.1954>:
     f0e:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4e 6f 20 73     <INFO> %s() No s
     f1e:	61 6d 70 6c 65 20 66 6f 75 6e 64 2c 20 41 64 64     ample found, Add
     f2e:	72 65 73 73 3a 20 30 78 25 30 32 58 2c 20 48 65     ress: 0x%02X, He
     f3e:	61 64 65 72 3a 20 30 78 25 30 34 58 0d 0a 0d 0a     ader: 0x%04X....
	...

00000f4f <__c.1947>:
     f4f:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
     f5f:	20 64 6f 6e 65 0d 0a 00                              done...

00000f67 <__c.1945>:
     f67:	53 6d 6f 6f 74 68 69 6e 67 20 61 6c 70 68 61 3a     Smoothing alpha:
     f77:	20 25 75 0d 0a 00                                    %u...

00000f7d <mf52_table>:
     f7d:	36 00 48 00 5f 00 7a 00 9c 00 c2 00 f4 00 20 01     6.H._.z....... .
     f8d:	56 01 8e 01 c7 01 00 02 38 02 6c 02 9d 02 ca 02     V.......8.l.....
     f9d:	f2 02 16 03 35 03 51 03 69 03 7d 03 8f 03 9e 03     ....5.Q.i.}.....
     fad:	ab 03 b6 03 c0 03 c8 03 cf 03                       ..........

00000fb7 <__c.2231>:
     fb7:	2e 2e 2f 2e 2f 4e 6f 64 65 73 2e 63 00              .././Nodes.c.

00000fc4 <__c.2233>:
     fc4:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 4e 52 5f 4e     index < MAX_NR_N
     fd4:	4f 44 45 53 00                                      ODES.

00000fd9 <__c.2247>:
     fd9:	50 61 63 6b 65 74 20 68 61 6e 64 6c 65 64 0d 0a     Packet handled..
	...

00000fea <__c.2243>:
     fea:	2e 2e 2f 2e 2f 4e 6f 64 65 73 2e 63 00              .././Nodes.c.

00000ff7 <__c.2245>:
     ff7:	69 6e 64 65 78 20 3c 20 4d 41 58 5f 4e 52 5f 4e     index < MAX_NR_N
    1007:	4f 44 45 53 00                                      ODES.

0000100c <__c.2238>:
    100c:	2e 2e 2f 2e 2f 4e 6f 64 65 73 2e 63 00              .././Nodes.c.

00001019 <__c.2240>:
    1019:	70 61 63 6b 65 74 20 21 3d 20 4e 55 4c 4c 00        packet != NULL.

00001028 <ubuntuMono_10ptDescriptors>:
    1028:	01 00 00 03 0b 00 06 16 00 05 21 00 06 2c 00 06     ..........!..,..
    1038:	37 00 01 42 00 04 4d 00 04 58 00 05 63 00 05 6e     7..B..M..X..c..n
    1048:	00 02 79 00 03 84 00 01 8f 00 05 9a 00 05 a5 00     ..y.............
    1058:	05 b0 00 05 bb 00 05 c6 00 06 d1 00 05 dc 00 05     ................
    1068:	e7 00 05 f2 00 05 fd 00 05 08 01 01 13 01 02 1e     ................
    1078:	01 05 29 01 05 34 01 05 3f 01 04 4a 01 05 55 01     ..)..4..?..J..U.
    1088:	06 60 01 05 6b 01 05 76 01 05 81 01 05 8c 01 05     .`..k..v........
    1098:	97 01 05 a2 01 05 ad 01 05 b8 01 05 c3 01 05 ce     ................
    10a8:	01 05 d9 01 06 e4 01 05 ef 01 05 fa 01 05 05 02     ................
    10b8:	05 10 02 05 1b 02 05 26 02 05 31 02 05 3c 02 06     .......&..1..<..
    10c8:	47 02 05 52 02 06 5d 02 07 68 02 05 73 02 03 7e     G..R..]..h..s..~
    10d8:	02 05 89 02 03 94 02 05 9f 02 06 aa 02 02 b5 02     ................
    10e8:	05 c0 02 05 cb 02 05 d6 02 05 e1 02 05 ec 02 06     ................
    10f8:	f7 02 05 02 03 05 0d 03 05 18 03 05 23 03 05 2e     ............#...
    1108:	03 05 39 03 05 44 03 05 4f 03 05 5a 03 05 65 03     ..9..D..O..Z..e.
    1118:	05 70 03 05 7b 03 05 86 03 05 91 03 05 9c 03 07     .p..{...........
    1128:	a7 03 07 b2 03 06 bd 03 05 c8 03 05 d3 03 04 de     ................
    1138:	03 01 e9 03 04 f4 03 06 ff 03                       ..........

00001142 <ubuntuMono_10ptBitmaps>:
    1142:	00 80 80 80 80 80 80 00 80 00 00 a0 a0 a0 00 00     ................
    1152:	00 00 00 00 00 00 00 14 28 fc 28 50 fc 50 a0 00     ........(.(P.P..
    1162:	00 20 78 80 80 60 30 08 08 f0 20 00 00 e4 a8 b0     . x..`0... .....
    1172:	f0 3c 34 54 9c 00 00 00 30 48 48 70 74 98 88 74     .<4T....0HHpt..t
    1182:	00 00 80 80 80 00 00 00 00 00 00 00 00 00 10 20     ............... 
    1192:	40 80 80 80 80 40 20 10 00 80 40 20 10 10 10 10     @....@ ...@ ....
    11a2:	20 40 80 00 20 f8 20 50 50 00 00 00 00 00 00 00      @.. . PP.......
    11b2:	00 20 20 f8 20 20 00 00 00 00 00 00 00 00 00 00     .  .  ..........
    11c2:	00 40 40 80 00 00 00 00 00 e0 00 00 00 00 00 00     .@@.............
    11d2:	00 00 00 00 00 00 00 80 00 00 08 10 10 10 20 20     ..............  
    11e2:	20 40 40 40 80 00 70 88 88 a8 a8 88 88 70 00 00      @@@..p......p..
    11f2:	00 20 e0 20 20 20 20 20 f8 00 00 00 70 88 08 10     . .     ....p...
    1202:	20 40 80 f8 00 00 00 f0 08 08 70 08 08 08 f0 00      @........p.....
    1212:	00 00 08 18 28 48 88 fc 08 08 00 00 00 f8 80 80     ....(H..........
    1222:	f0 08 08 08 f0 00 00 00 38 40 80 f0 88 88 88 70     ........8@.....p
    1232:	00 00 00 f8 08 10 20 20 20 40 40 00 00 00 70 88     ......   @@...p.
    1242:	88 70 50 88 88 70 00 00 00 70 88 88 88 78 08 10     .pP..p...p...x..
    1252:	e0 00 00 00 00 00 00 80 00 00 00 80 00 00 00 00     ................
    1262:	00 00 80 00 00 00 40 40 80 00 00 00 08 70 80 70     ......@@.....p.p
    1272:	08 00 00 00 00 00 00 f8 00 00 f8 00 00 00 00 00     ................
    1282:	00 00 80 70 08 70 80 00 00 00 00 e0 10 10 20 60     ...p.p........ `
    1292:	40 00 40 00 00 00 30 48 88 98 a8 a8 a8 98 40 30     @.@...0H......@0
    12a2:	00 30 30 48 48 48 78 84 84 00 00 00 f0 88 88 f0     .00HHHx.........
    12b2:	88 88 88 f0 00 00 00 38 40 80 80 80 80 40 38 00     .......8@....@8.
    12c2:	00 00 e0 90 88 88 88 88 90 e0 00 00 00 f8 80 80     ................
    12d2:	f0 80 80 80 f8 00 00 00 f8 80 80 f8 80 80 80 80     ................
    12e2:	00 00 00 30 48 80 80 88 88 48 38 00 00 00 88 88     ...0H....H8.....
    12f2:	88 f8 88 88 88 88 00 00 00 f8 20 20 20 20 20 20     ..........      
    1302:	f8 00 00 00 78 08 08 08 08 08 88 70 00 00 00 88     ....x......p....
    1312:	90 a0 c0 a0 90 90 88 00 00 00 80 80 80 80 80 80     ................
    1322:	80 f8 00 00 00 48 c8 b4 b4 b4 84 84 84 00 00 00     .....H..........
    1332:	88 c8 c8 a8 a8 98 98 88 00 00 00 70 88 88 88 88     ...........p....
    1342:	88 88 70 00 00 00 f0 88 88 88 f0 80 80 80 00 00     ..p.............
    1352:	00 70 88 88 88 88 88 88 70 20 18 00 f0 88 88 88     .p......p ......
    1362:	f0 90 88 88 00 00 00 78 80 80 60 10 08 88 70 00     .......x..`...p.
    1372:	00 00 f8 20 20 20 20 20 20 20 00 00 00 88 88 88     ...       ......
    1382:	88 88 88 88 70 00 00 00 84 84 48 48 48 28 30 30     ....p.....HHH(00
    1392:	00 00 00 88 88 88 a8 a8 d8 88 88 00 00 00 84 48     ...............H
    13a2:	30 30 30 48 48 84 00 00 00 82 44 44 28 10 10 10     000HH.....DD(...
    13b2:	10 00 00 00 f8 08 10 20 20 40 80 f8 00 00 00 e0     .......  @......
    13c2:	80 80 80 80 80 80 80 80 e0 80 40 40 40 20 20 20     ..........@@@   
    13d2:	10 10 10 08 00 e0 20 20 20 20 20 20 20 20 e0 00     ......        ..
    13e2:	20 50 50 88 00 00 00 00 00 00 00 00 00 00 00 00      PP.............
    13f2:	00 00 00 00 fc 80 40 00 00 00 00 00 00 00 00 00     ......@.........
    1402:	00 00 00 70 08 78 88 88 78 00 00 80 80 80 f0 88     ...p.x..x.......
    1412:	88 88 88 f0 00 00 00 00 00 78 80 80 80 80 78 00     .........x....x.
    1422:	00 08 08 08 78 88 88 88 88 78 00 00 00 00 00 70     ....x....x.....p
    1432:	88 f8 80 80 78 00 00 3c 40 40 f8 40 40 40 40 40     ....x..<@@.@@@@@
    1442:	00 00 00 00 00 78 88 88 88 88 78 08 f0 80 80 80     .....x....x.....
    1452:	f0 88 88 88 88 88 00 00 00 20 00 e0 20 20 20 20     ......... ..    
    1462:	18 00 00 00 10 00 78 08 08 08 08 08 08 f0 80 80     ......x.........
    1472:	80 98 a0 c0 a0 90 88 00 00 e0 20 20 20 20 20 20     ..........      
    1482:	20 18 00 00 00 00 00 f0 a8 a8 a8 88 88 00 00 00      ...............
    1492:	00 00 f0 88 88 88 88 88 00 00 00 00 00 70 88 88     .............p..
    14a2:	88 88 70 00 00 00 00 00 f0 88 88 88 88 f0 80 80     ..p.............
    14b2:	00 00 00 78 88 88 88 88 78 08 08 00 00 00 f8 80     ...x....x.......
    14c2:	80 80 80 80 00 00 00 00 00 78 80 60 10 08 f0 00     .........x.`....
    14d2:	00 00 40 40 f8 40 40 40 40 38 00 00 00 00 00 88     ..@@.@@@@8......
    14e2:	88 88 88 88 78 00 00 00 00 00 82 44 44 28 28 10     ....x......DD((.
    14f2:	00 00 00 00 00 82 92 aa aa 6c 44 00 00 00 00 00     .........lD.....
    1502:	84 48 30 30 48 84 00 00 00 00 00 88 88 50 50 50     .H00H........PPP
    1512:	20 20 c0 00 00 00 f8 10 20 40 40 f8 00 00 30 40       ...... @@...0@
    1522:	40 40 40 80 40 40 40 40 30 80 80 80 80 80 80 80     @@@.@@@@0.......
    1532:	80 80 80 80 c0 20 20 20 20 10 20 20 20 20 c0 00     .....    .    ..
    1542:	00 00 00 00 64 98 00 00 00 00                       ....d.....

0000154c <__c.1962>:
    154c:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 49 6e 69 74     <INFO> %s() Init
    155c:	20 64 6f 6e 65 0d 0a 00                              done...

00001564 <__c.2836>:
    1564:	2e 2e 2f 2e 2f 6d 61 69 6e 5f 66 69 72 6d 77 61     .././main_firmwa
    1574:	72 65 2e 63 00                                      re.c.

00001579 <__c.2838>:
    1579:	75 6e 75 73 65 64 5f 6d 65 6d 6f 72 79 20 3e 20     unused_memory > 
    1589:	30 00                                               0.

0000158b <__c.2834>:
    158b:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 48     <WARNING> %s() H
    159b:	69 67 68 20 4d 43 55 20 74 65 6d 70 65 72 61 74     igh MCU temperat
    15ab:	75 72 65 3a 20 25 75 0d 0a 00                       ure: %u...

000015b5 <__c.2830>:
    15b5:	3c 57 41 52 4e 49 4e 47 3e 20 25 73 28 29 20 4c     <WARNING> %s() L
    15c5:	6f 77 20 6d 65 6d 6f 72 79 3a 20 25 75 0d 0a 00     ow memory: %u...

000015d5 <__c.2818>:
    15d5:	4e 6f 64 65 20 72 6f 6c 65 3a 20 30 78 25 30 32     Node role: 0x%02
    15e5:	58 0d 0a 00                                         X...

000015e9 <__c.2816>:
    15e9:	4e 6f 64 65 20 49 44 3a 20 30 78 25 30 32 58 0d     Node ID: 0x%02X.
    15f9:	0a 00                                               ..

000015fb <__c.2814>:
    15fb:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 53 74 61 72     <INFO> %s() Star
    160b:	74 20 75 70 20 64 6f 6e 65 0d 0a 00                 t up done...

00001617 <__c.2812>:
    1617:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4c 61 73 74     <INFO> %s() Last
    1627:	20 72 65 73 65 74 3a 20 30 78 25 30 32 58 0d 0a      reset: 0x%02X..
	...

00001638 <__c.2809>:
    1638:	3c 49 4e 46 4f 3e 20 25 73 28 29 20 4d 61 69 6e     <INFO> %s() Main
    1648:	20 75 6e 69 74 20 73 74 61 72 74 65 64 0d 0a 00      unit started...

00001658 <StackPaint>:
    {
        *p = STACK_CANARY;
        p++;
    }
#else
    __asm volatile ("    ldi r30,lo8(_end)\n"
    1658:	ea e4       	ldi	r30, 0x4A	; 74
    165a:	f7 e0       	ldi	r31, 0x07	; 7
    165c:	85 ec       	ldi	r24, 0xC5	; 197
    165e:	98 e0       	ldi	r25, 0x08	; 8
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <.cmp>

00001662 <.loop>:
    1662:	81 93       	st	Z+, r24

00001664 <.cmp>:
    1664:	ef 3f       	cpi	r30, 0xFF	; 255
    1666:	f9 07       	cpc	r31, r25
    1668:	e0 f3       	brcs	.-8      	; 0x1662 <.loop>
    166a:	d9 f3       	breq	.-10     	; 0x1662 <.loop>
    166c:	11 24       	eor	r1, r1
    166e:	1f be       	out	0x3f, r1	; 63
    1670:	cf ef       	ldi	r28, 0xFF	; 255
    1672:	d8 e0       	ldi	r29, 0x08	; 8
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	cd bf       	out	0x3d, r28	; 61

00001678 <__do_copy_data>:
    1678:	13 e0       	ldi	r17, 0x03	; 3
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b1 e0       	ldi	r27, 0x01	; 1
    167e:	ee ed       	ldi	r30, 0xDE	; 222
    1680:	fd e5       	ldi	r31, 0x5D	; 93
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <__do_copy_data+0x10>
    1684:	05 90       	lpm	r0, Z+
    1686:	0d 92       	st	X+, r0
    1688:	a8 30       	cpi	r26, 0x08	; 8
    168a:	b1 07       	cpc	r27, r17
    168c:	d9 f7       	brne	.-10     	; 0x1684 <__do_copy_data+0xc>

0000168e <__do_clear_bss>:
    168e:	27 e0       	ldi	r18, 0x07	; 7
    1690:	a8 e0       	ldi	r26, 0x08	; 8
    1692:	b3 e0       	ldi	r27, 0x03	; 3
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <.do_clear_bss_start>

00001696 <.do_clear_bss_loop>:
    1696:	1d 92       	st	X+, r1

00001698 <.do_clear_bss_start>:
    1698:	aa 34       	cpi	r26, 0x4A	; 74
    169a:	b2 07       	cpc	r27, r18
    169c:	e1 f7       	brne	.-8      	; 0x1696 <.do_clear_bss_loop>
    169e:	0e 94 cc 28 	call	0x5198	; 0x5198 <main>
    16a2:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <_exit>

000016a6 <__bad_interrupt>:
    16a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000016aa <FloatToParts>:
//////////////////////////////////////////////////////////////////////////
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

float_parts_type FloatToParts(float f_value)
{
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <FloatToParts+0xe>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <FloatToParts+0x10>
    16ba:	1f 92       	push	r1
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	6b 01       	movw	r12, r22
    16c2:	7c 01       	movw	r14, r24
    float_parts_type parts;

    parts.integer = (int32_t)f_value;
    16c4:	0e 94 27 2a 	call	0x544e	; 0x544e <__fixsfsi>

    int8_t tmp;
    tmp = (int8_t)((f_value - parts.integer) * 10);
    parts.fractional = tmp < 0 ? -tmp : tmp;

    return parts;
    16c8:	69 83       	std	Y+1, r22	; 0x01
    16ca:	7a 83       	std	Y+2, r23	; 0x02
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    float_parts_type parts;

    parts.integer = (int32_t)f_value;

    int8_t tmp;
    tmp = (int8_t)((f_value - parts.integer) * 10);
    16d0:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <__floatsisf>
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	c7 01       	movw	r24, r14
    16da:	b6 01       	movw	r22, r12
    16dc:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <__subsf3>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__mulsf3>
    16ec:	0e 94 27 2a 	call	0x544e	; 0x544e <__fixsfsi>
    parts.fractional = tmp < 0 ? -tmp : tmp;
    16f0:	77 27       	eor	r23, r23
    16f2:	67 fd       	sbrc	r22, 7
    16f4:	70 95       	com	r23
    16f6:	77 23       	and	r23, r23
    16f8:	1c f4       	brge	.+6      	; 0x1700 <FloatToParts+0x56>
    16fa:	71 95       	neg	r23
    16fc:	61 95       	neg	r22
    16fe:	71 09       	sbc	r23, r1

    return parts;
    1700:	29 81       	ldd	r18, Y+1	; 0x01
    1702:	3a 81       	ldd	r19, Y+2	; 0x02
    1704:	4b 81       	ldd	r20, Y+3	; 0x03
    1706:	5c 81       	ldd	r21, Y+4	; 0x04
}
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	08 95       	ret

00001726 <GetExponentialMovingAverage>:
///               sample frequency and sample window.
/// @return uint16_t Average value.
///
uint16_t GetExponentialMovingAverage(uint16_t value, uint16_t average,
                                     uint16_t alpha)
{
    1726:	8f 92       	push	r8
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	fb 01       	movw	r30, r22
    uint32_t tmp = (uint32_t)alpha * (uint32_t)value + (uint32_t)(65536 - alpha) *
    1738:	6a 01       	movw	r12, r20
    173a:	e1 2c       	mov	r14, r1
    173c:	f1 2c       	mov	r15, r1
    173e:	dc 01       	movw	r26, r24
    1740:	a7 01       	movw	r20, r14
    1742:	96 01       	movw	r18, r12
    1744:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__muluhisi3>
    1748:	4b 01       	movw	r8, r22
    174a:	5c 01       	movw	r10, r24
    174c:	20 e8       	ldi	r18, 0x80	; 128
    174e:	92 0e       	add	r9, r18
    1750:	a1 1c       	adc	r10, r1
    1752:	b1 1c       	adc	r11, r1
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a1 e0       	ldi	r26, 0x01	; 1
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	9c 01       	movw	r18, r24
    175e:	ad 01       	movw	r20, r26
    1760:	2c 19       	sub	r18, r12
    1762:	3d 09       	sbc	r19, r13
    1764:	4e 09       	sbc	r20, r14
    1766:	5f 09       	sbc	r21, r15
    1768:	df 01       	movw	r26, r30
    176a:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__muluhisi3>
                   (uint32_t)average;
    return (uint16_t)((tmp + 32768) / 65536);
    176e:	68 0d       	add	r22, r8
    1770:	79 1d       	adc	r23, r9
    1772:	8a 1d       	adc	r24, r10
    1774:	9b 1d       	adc	r25, r11
}
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	9f 90       	pop	r9
    1784:	8f 90       	pop	r8
    1786:	08 95       	ret

00001788 <BCDToDecimal>:

uint8_t BCDToDecimal(uint8_t bcd_data)
{
    uint8_t data;

    data = ((bcd_data & 0xF0) >> 4) * 10;
    1788:	98 2f       	mov	r25, r24
    178a:	92 95       	swap	r25
    178c:	9f 70       	andi	r25, 0x0F	; 15
    178e:	99 0f       	add	r25, r25
    1790:	29 2f       	mov	r18, r25
    1792:	22 0f       	add	r18, r18
    1794:	22 0f       	add	r18, r18
    1796:	92 0f       	add	r25, r18
    data += (bcd_data & 0x0F);
    1798:	8f 70       	andi	r24, 0x0F	; 15

    return data;
}
    179a:	89 0f       	add	r24, r25
    179c:	08 95       	ret

0000179e <SetBit>:
    return data;
}

void SetBit(uint8_t bit_index, bool state, uint8_t *data)
{
    sc_assert(bit_index < 8);
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	40 f0       	brcs	.+16     	; 0x17b2 <SetBit+0x14>
    17a2:	46 e8       	ldi	r20, 0x86	; 134
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	6b e7       	ldi	r22, 0x7B	; 123
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	88 e6       	ldi	r24, 0x68	; 104
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    if (state == true)
    17b2:	66 23       	and	r22, r22
    17b4:	71 f0       	breq	.+28     	; 0x17d2 <SetBit+0x34>
    {
        *data |= (1 << bit_index);
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	b9 01       	movw	r22, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <SetBit+0x24>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <SetBit+0x20>
    17c6:	cb 01       	movw	r24, r22
    17c8:	fa 01       	movw	r30, r20
    17ca:	90 81       	ld	r25, Z
    17cc:	89 2b       	or	r24, r25
    17ce:	80 83       	st	Z, r24
    17d0:	08 95       	ret
    }
    else
    {
        *data &= ~(1 << bit_index);
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	b9 01       	movw	r22, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <SetBit+0x40>
    17da:	66 0f       	add	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <SetBit+0x3c>
    17e2:	cb 01       	movw	r24, r22
    17e4:	80 95       	com	r24
    17e6:	fa 01       	movw	r30, r20
    17e8:	90 81       	ld	r25, Z
    17ea:	89 23       	and	r24, r25
    17ec:	80 83       	st	Z, r24
    17ee:	08 95       	ret

000017f0 <StackCount>:
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    17f0:	80 91 4a 07 	lds	r24, 0x074A
    17f4:	85 3c       	cpi	r24, 0xC5	; 197
    17f6:	a9 f4       	brne	.+42     	; 0x1822 <StackCount+0x32>
    17f8:	8a e4       	ldi	r24, 0x4A	; 74
    17fa:	97 e0       	ldi	r25, 0x07	; 7
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	98 40       	sbci	r25, 0x08	; 8
    1800:	09 f0       	breq	.+2      	; 0x1804 <StackCount+0x14>
    1802:	90 f4       	brcc	.+36     	; 0x1828 <StackCount+0x38>
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
/// @param  None
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    1808:	ea e4       	ldi	r30, 0x4A	; 74
    180a:	f7 e0       	ldi	r31, 0x07	; 7
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    {
        p++;
    180c:	31 96       	adiw	r30, 0x01	; 1
        c++;
    180e:	01 96       	adiw	r24, 0x01	; 1
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;

    while(*p == STACK_CANARY && p <= &__stack)
    1810:	20 81       	ld	r18, Z
    1812:	25 3c       	cpi	r18, 0xC5	; 197
    1814:	59 f4       	brne	.+22     	; 0x182c <StackCount+0x3c>
    1816:	28 e0       	ldi	r18, 0x08	; 8
    1818:	ef 3f       	cpi	r30, 0xFF	; 255
    181a:	f2 07       	cpc	r31, r18
    181c:	b9 f3       	breq	.-18     	; 0x180c <StackCount+0x1c>
    181e:	b0 f3       	brcs	.-20     	; 0x180c <StackCount+0x1c>
    1820:	08 95       	ret
/// @return uint16_t Number of bytes likely to have never been used by the stack.
///
uint16_t StackCount(void)
{
    const uint8_t *p = &_end;
    uint16_t       c = 0;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	08 95       	ret
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
        p++;
        c++;
    }

    return c;
}
    182c:	08 95       	ret

0000182e <Config_Load>:
///
/// @param  None
/// @return bool true if the NVM configuration was valid, otherwise false
///
bool Config_Load(void)
{
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	6f 97       	sbiw	r28, 0x1f	; 31
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    bool status = false;
    config_type new_config;

    sc_assert(CONFIG_VERSION == eeprom_read_word(&nvm_config.version));
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <__eerd_word_m328p>
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	41 f0       	breq	.+16     	; 0x185e <Config_Load+0x30>
    184e:	45 ed       	ldi	r20, 0xD5	; 213
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	66 e8       	ldi	r22, 0x86	; 134
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	87 eb       	ldi	r24, 0xB7	; 183
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));
    185e:	4f e1       	ldi	r20, 0x1F	; 31
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <__eerd_block_m328p>

static bool ValidateConfig(config_type *config)
{
    sc_assert(config != NULL);

    return (config->node_id != 0 &&
    186e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1870:	88 23       	and	r24, r24
    1872:	31 f0       	breq	.+12     	; 0x1880 <Config_Load+0x52>
            (config->node_role > 0 && config->node_role < 4));
    1874:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1876:	81 50       	subi	r24, 0x01	; 1

static bool ValidateConfig(config_type *config)
{
    sc_assert(config != NULL);

    return (config->node_id != 0 &&
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	20 f0       	brcs	.+8      	; 0x1884 <Config_Load+0x56>
/// @param  None
/// @return bool true if the NVM configuration was valid, otherwise false
///
bool Config_Load(void)
{
    bool status = false;
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	1a c0       	rjmp	.+52     	; 0x18b4 <Config_Load+0x86>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	18 c0       	rjmp	.+48     	; 0x18b4 <Config_Load+0x86>

    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));

    if(ValidateConfig(&new_config) == true)
    {
        active_config = new_config;
    1884:	8f e1       	ldi	r24, 0x1F	; 31
    1886:	fe 01       	movw	r30, r28
    1888:	31 96       	adiw	r30, 0x01	; 1
    188a:	a8 e0       	ldi	r26, 0x08	; 8
    188c:	b3 e0       	ldi	r27, 0x03	; 3
    188e:	01 90       	ld	r0, Z+
    1890:	0d 92       	st	X+, r0
    1892:	8a 95       	dec	r24
    1894:	e1 f7       	brne	.-8      	; 0x188e <Config_Load+0x60>
        status = true;
        INFO("Configuration loaded");
    1896:	86 e1       	ldi	r24, 0x16	; 22
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	84 e9       	ldi	r24, 0x94	; 148
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    eeprom_read_block(&new_config, &nvm_config, sizeof(active_config));

    if(ValidateConfig(&new_config) == true)
    {
        active_config = new_config;
        status = true;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
        INFO("Configuration loaded");
    }
    return status;
}
    18b4:	6f 96       	adiw	r28, 0x1f	; 31
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <Config_GetNetworkId>:
/// @return uint8_t* Pointer to network id
///
uint8_t *Config_GetNetworkId(void)
{
    return active_config.network_id;
}
    18c6:	8a e0       	ldi	r24, 0x0A	; 10
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	08 95       	ret

000018cc <Config_GetNodeId>:
/// @return uint8_t Node id
///
uint8_t Config_GetNodeId(void)
{
    return active_config.node_id;
}
    18cc:	80 91 25 03 	lds	r24, 0x0325
    18d0:	08 95       	ret

000018d2 <Config_GetNodeRole>:
/// @return uint8_t Node role, (master=1, node=2, listener=3)
///
uint8_t Config_GetNodeRole(void)
{
    return active_config.node_role;
}
    18d2:	80 91 26 03 	lds	r24, 0x0326
    18d6:	08 95       	ret

000018d8 <libADC_Init>:
/// @return None
///
void libADC_Init(void)
{
    //Set the prescaler to 128(115 KHz) and enable interrupt
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
    18d8:	ea e7       	ldi	r30, 0x7A	; 122
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	87 60       	ori	r24, 0x07	; 7
    18e0:	80 83       	st	Z, r24

    //Set the reference voltage to AREF
    ADMUX = 0x00;
    18e2:	10 92 7c 00 	sts	0x007C, r1
    18e6:	ea e2       	ldi	r30, 0x2A	; 42
    18e8:	f3 e0       	ldi	r31, 0x03	; 3

static void InitInputArray()
{
    uint8_t index;

    for (index = 0; index < MAX_ADC_INPUTS; ++index)
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	df 01       	movw	r26, r30
    18ee:	12 97       	sbiw	r26, 0x02	; 2
    {
        adc_inputs[index].active = false;
    18f0:	1c 92       	st	X, r1
    18f2:	11 96       	adiw	r26, 0x01	; 1
        adc_inputs[index].valid = false;
    18f4:	1c 92       	st	X, r1
        adc_inputs[index].channel_index = index;
    18f6:	80 83       	st	Z, r24
        adc_inputs[index].sample_value = 0;
    18f8:	12 82       	std	Z+2, r1	; 0x02
    18fa:	11 82       	std	Z+1, r1	; 0x01

static void InitInputArray()
{
    uint8_t index;

    for (index = 0; index < MAX_ADC_INPUTS; ++index)
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	35 96       	adiw	r30, 0x05	; 5
    1900:	89 30       	cpi	r24, 0x09	; 9
    1902:	a1 f7       	brne	.-24     	; 0x18ec <libADC_Init+0x14>

    //Set the reference voltage to AREF
    ADMUX = 0x00;

    InitInputArray();
    adc_state = LIBADC_IDLE;
    1904:	10 92 55 03 	sts	0x0355, r1

    INFO("Init done");
    1908:	80 e3       	ldi	r24, 0x30	; 48
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	86 e9       	ldi	r24, 0x96	; 150
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	08 95       	ret

00001926 <libADC_Update>:
///
void libADC_Update(void)
{
    static uint8_t current_input = 0;

    if (current_input >= MAX_ADC_INPUTS)
    1926:	80 91 27 03 	lds	r24, 0x0327
    192a:	89 30       	cpi	r24, 0x09	; 9
    192c:	10 f0       	brcs	.+4      	; 0x1932 <libADC_Update+0xc>
    {
        current_input = 0;
    192e:	10 92 27 03 	sts	0x0327, r1
    }

    switch (adc_state)
    1932:	80 91 55 03 	lds	r24, 0x0355
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	31 f0       	breq	.+12     	; 0x1946 <libADC_Update+0x20>
    193a:	08 f4       	brcc	.+2      	; 0x193e <libADC_Update+0x18>
    193c:	7e c0       	rjmp	.+252    	; 0x1a3a <libADC_Update+0x114>
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	09 f4       	brne	.+2      	; 0x1944 <libADC_Update+0x1e>
    1942:	40 c0       	rjmp	.+128    	; 0x19c4 <libADC_Update+0x9e>
    1944:	68 c0       	rjmp	.+208    	; 0x1a16 <libADC_Update+0xf0>
        case LIBADC_IDLE:
            //Do nothing when idle
            break;

        case LIBADC_NEW_SAMPLE:
            while (adc_inputs[current_input].active != true &&
    1946:	20 91 27 03 	lds	r18, 0x0327
    194a:	82 2f       	mov	r24, r18
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	8e 0f       	add	r24, r30
    195a:	9f 1f       	adc	r25, r31
    195c:	fc 01       	movw	r30, r24
    195e:	e8 5d       	subi	r30, 0xD8	; 216
    1960:	fc 4f       	sbci	r31, 0xFC	; 252
    1962:	80 81       	ld	r24, Z
    1964:	81 11       	cpse	r24, r1
    1966:	66 c0       	rjmp	.+204    	; 0x1a34 <libADC_Update+0x10e>
    1968:	29 30       	cpi	r18, 0x09	; 9
    196a:	08 f0       	brcs	.+2      	; 0x196e <libADC_Update+0x48>
    196c:	66 c0       	rjmp	.+204    	; 0x1a3a <libADC_Update+0x114>
    196e:	2f 5f       	subi	r18, 0xFF	; 255
    1970:	82 2f       	mov	r24, r18
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	fc 01       	movw	r30, r24
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	8e 0f       	add	r24, r30
    1980:	9f 1f       	adc	r25, r31
    1982:	fc 01       	movw	r30, r24
    1984:	e8 5d       	subi	r30, 0xD8	; 216
    1986:	fc 4f       	sbci	r31, 0xFC	; 252
    1988:	80 81       	ld	r24, Z
    198a:	88 23       	and	r24, r24
    198c:	19 f0       	breq	.+6      	; 0x1994 <libADC_Update+0x6e>
    198e:	20 93 27 03 	sts	0x0327, r18
    1992:	50 c0       	rjmp	.+160    	; 0x1a34 <libADC_Update+0x10e>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	82 0f       	add	r24, r18
    1998:	8a 30       	cpi	r24, 0x0A	; 10
    199a:	19 f4       	brne	.+6      	; 0x19a2 <libADC_Update+0x7c>
    199c:	20 93 27 03 	sts	0x0327, r18
    19a0:	08 95       	ret
    19a2:	28 2f       	mov	r18, r24
    19a4:	e5 cf       	rjmp	.-54     	; 0x1970 <libADC_Update+0x4a>
{
    uint8_t new_admux;

    sc_assert(adc_channel < MAX_ADC_INPUTS);

    new_admux = ADMUX;
    19a6:	ec e7       	ldi	r30, 0x7C	; 124
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    //Clear MUX-bits
    new_admux &= 0xF0;
    19ac:	80 7f       	andi	r24, 0xF0	; 240

    //Set new channel
    new_admux |= adc_channel;
    19ae:	28 2b       	or	r18, r24
    ADMUX = new_admux;
    19b0:	20 83       	st	Z, r18
            if (adc_inputs[current_input].active == true &&
                    current_input < MAX_ADC_INPUTS)
            {
                SelectInput(current_input);
                //Start a new conversion
                ADCSRA |= (1 << ADSC);
    19b2:	ea e7       	ldi	r30, 0x7A	; 122
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	80 64       	ori	r24, 0x40	; 64
    19ba:	80 83       	st	Z, r24
                adc_state = LIBADC_SAMPLING;
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	80 93 55 03 	sts	0x0355, r24
    19c2:	08 95       	ret
            }
            break;

        case LIBADC_SAMPLING:
            //Check if ADC is done
            if (ADCSRA & (1 << ADIF))
    19c4:	80 91 7a 00 	lds	r24, 0x007A
    19c8:	84 ff       	sbrs	r24, 4
    19ca:	37 c0       	rjmp	.+110    	; 0x1a3a <libADC_Update+0x114>
            {
                adc_inputs[current_input].sample_value = ADCL;
    19cc:	20 91 27 03 	lds	r18, 0x0327
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	80 91 78 00 	lds	r24, 0x0078
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	e2 0f       	add	r30, r18
    19e4:	f3 1f       	adc	r31, r19
    19e6:	e8 5d       	subi	r30, 0xD8	; 216
    19e8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ea:	94 83       	std	Z+4, r25	; 0x04
    19ec:	83 83       	std	Z+3, r24	; 0x03
                adc_inputs[current_input].sample_value |= (ADCH << 8);
    19ee:	20 91 79 00 	lds	r18, 0x0079
    19f2:	92 2b       	or	r25, r18
    19f4:	94 83       	std	Z+4, r25	; 0x04
    19f6:	83 83       	std	Z+3, r24	; 0x03
                adc_inputs[current_input].valid = true;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	81 83       	std	Z+1, r24	; 0x01
                ADCSRA &= ~(1 << ADIF);
    19fc:	ea e7       	ldi	r30, 0x7A	; 122
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	90 81       	ld	r25, Z
    1a02:	9f 7e       	andi	r25, 0xEF	; 239
    1a04:	90 83       	st	Z, r25
                adc_state = LIBADC_NEW_SAMPLE;
    1a06:	80 93 55 03 	sts	0x0355, r24
                ++current_input;
    1a0a:	80 91 27 03 	lds	r24, 0x0327
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	80 93 27 03 	sts	0x0327, r24
    1a14:	08 95       	ret
            }
            break;

        default:
            WARNING("Unknown State");
    1a16:	82 e2       	ldi	r24, 0x22	; 34
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9f 93       	push	r25
    1a1c:	8f 93       	push	r24
    1a1e:	87 e7       	ldi	r24, 0x77	; 119
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            break;
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	08 95       	ret
                    current_input < MAX_ADC_INPUTS)
            {
                ++current_input;
            }

            if (adc_inputs[current_input].active == true &&
    1a34:	29 30       	cpi	r18, 0x09	; 9
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <libADC_Update+0x114>
    1a38:	b6 cf       	rjmp	.-148    	; 0x19a6 <libADC_Update+0x80>
    1a3a:	08 95       	ret

00001a3c <libADC_Enable>:
/// @param  mode Select if enable/disable ADC
/// @return None
///
void libADC_Enable(bool mode)
{
    if (mode == true)
    1a3c:	88 23       	and	r24, r24
    1a3e:	49 f0       	breq	.+18     	; 0x1a52 <libADC_Enable+0x16>
    {
        adc_state = LIBADC_NEW_SAMPLE;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 55 03 	sts	0x0355, r24
        ADCSRA |= (1 << ADEN);
    1a46:	ea e7       	ldi	r30, 0x7A	; 122
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 68       	ori	r24, 0x80	; 128
    1a4e:	80 83       	st	Z, r24
    1a50:	08 95       	ret
    }
    else
    {
        adc_state = LIBADC_IDLE;
    1a52:	10 92 55 03 	sts	0x0355, r1
        ADCSRA &= ~(1 << ADEN);
    1a56:	ea e7       	ldi	r30, 0x7A	; 122
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 77       	andi	r24, 0x7F	; 127
    1a5e:	80 83       	st	Z, r24
    1a60:	08 95       	ret

00001a62 <libADC_EnableInput>:
/// @param  mode Selects if to enable or disable input
/// @return None
///
void libADC_EnableInput(uint8_t index, bool mode)
{
    sc_assert(index < MAX_ADC_INPUTS);
    1a62:	89 30       	cpi	r24, 0x09	; 9
    1a64:	40 f0       	brcs	.+16     	; 0x1a76 <libADC_EnableInput+0x14>
    1a66:	40 e6       	ldi	r20, 0x60	; 96
    1a68:	51 e0       	ldi	r21, 0x01	; 1
    1a6a:	6f eb       	ldi	r22, 0xBF	; 191
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	82 e4       	ldi	r24, 0x42	; 66
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    adc_inputs[index].active = mode;
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	fc 01       	movw	r30, r24
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	8e 0f       	add	r24, r30
    1a84:	9f 1f       	adc	r25, r31
    1a86:	fc 01       	movw	r30, r24
    1a88:	e8 5d       	subi	r30, 0xD8	; 216
    1a8a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8c:	60 83       	st	Z, r22
    1a8e:	08 95       	ret

00001a90 <libADC_GetSample>:
///
function_status libADC_GetSample(uint8_t index, uint16_t *sample_value)
{
    function_status status = ERROR;

    sc_assert(index < MAX_ADC_INPUTS);
    1a90:	89 30       	cpi	r24, 0x09	; 9
    1a92:	40 f0       	brcs	.+16     	; 0x1aa4 <libADC_GetSample+0x14>
    1a94:	4b e2       	ldi	r20, 0x2B	; 43
    1a96:	51 e0       	ldi	r21, 0x01	; 1
    1a98:	61 ed       	ldi	r22, 0xD1	; 209
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	8d e0       	ldi	r24, 0x0D	; 13
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    if (adc_inputs[index].active == true && adc_inputs[index].valid == true)
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	e8 0f       	add	r30, r24
    1ab2:	f9 1f       	adc	r31, r25
    1ab4:	e8 5d       	subi	r30, 0xD8	; 216
    1ab6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab8:	20 81       	ld	r18, Z
    1aba:	22 23       	and	r18, r18
    1abc:	e9 f0       	breq	.+58     	; 0x1af8 <libADC_GetSample+0x68>
    1abe:	fc 01       	movw	r30, r24
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e8 0f       	add	r30, r24
    1aca:	f9 1f       	adc	r31, r25
    1acc:	e8 5d       	subi	r30, 0xD8	; 216
    1ace:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad0:	21 81       	ldd	r18, Z+1	; 0x01
    1ad2:	22 23       	and	r18, r18
    1ad4:	99 f0       	breq	.+38     	; 0x1afc <libADC_GetSample+0x6c>
    {
        *sample_value = adc_inputs[index].sample_value;
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	8e 0f       	add	r24, r30
    1ae2:	9f 1f       	adc	r25, r31
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e8 5d       	subi	r30, 0xD8	; 216
    1ae8:	fc 4f       	sbci	r31, 0xFC	; 252
    1aea:	83 81       	ldd	r24, Z+3	; 0x03
    1aec:	94 81       	ldd	r25, Z+4	; 0x04
    1aee:	fb 01       	movw	r30, r22
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
        status = SUCCESS;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	08 95       	ret
/// @return ERROR  If index is invalid or input is disabled
/// @return SUCCESS If index is valid and input is active
///
function_status libADC_GetSample(uint8_t index, uint16_t *sample_value)
{
    function_status status = ERROR;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    {
        *sample_value = adc_inputs[index].sample_value;
        status = SUCCESS;
    }
    return status;
}
    1afe:	08 95       	ret

00001b00 <libDebug_Print_P>:
/// @param  text Text to print
/// @param  variable number of arguments
/// @return None
///
void libDebug_Print_P(const char *text, ...)
{
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	c0 55       	subi	r28, 0x50	; 80
    1b0e:	d1 09       	sbc	r29, r1
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 5a       	subi	r30, 0xA9	; 169
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	41 91       	ld	r20, Z+
    1b22:	51 91       	ld	r21, Z+
    va_list args;
    char buffer[OUT_BUFFER_SIZE];

    va_start(args, text);

    vsnprintf_P(buffer, OUT_BUFFER_SIZE, text, args);
    1b24:	9f 01       	movw	r18, r30
    1b26:	60 e5       	ldi	r22, 0x50	; 80
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	8e 01       	movw	r16, r28
    1b2c:	0f 5f       	subi	r16, 0xFF	; 255
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	c8 01       	movw	r24, r16
    1b32:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <vsnprintf_P>

    //Make sure that the output always is null terminated.
    buffer[OUT_BUFFER_SIZE - 1] = '\n';
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	61 96       	adiw	r28, 0x11	; 17
    1b3a:	8f af       	std	Y+63, r24	; 0x3f
    1b3c:	61 97       	sbiw	r28, 0x11	; 17

    UART_Write((uint8_t *)buffer, strlen(buffer));
    1b3e:	f8 01       	movw	r30, r16
    1b40:	01 90       	ld	r0, Z+
    1b42:	00 20       	and	r0, r0
    1b44:	e9 f7       	brne	.-6      	; 0x1b40 <libDebug_Print_P+0x40>
    1b46:	31 97       	sbiw	r30, 0x01	; 1
    1b48:	bf 01       	movw	r22, r30
    1b4a:	60 1b       	sub	r22, r16
    1b4c:	71 0b       	sbc	r23, r17
    1b4e:	c8 01       	movw	r24, r16
    1b50:	0e 94 39 1b 	call	0x3672	; 0x3672 <UART_Write>
    va_end(args);
    return;
}
    1b54:	c0 5b       	subi	r28, 0xB0	; 176
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	08 95       	ret

00001b6c <libDebug_Init>:
/// @return None
///
void libDebug_Init(void)
{
#ifdef DEBUG_ENABLE
    UART_Init();
    1b6c:	0e 94 15 1b 	call	0x362a	; 0x362a <UART_Init>
    UART_Enable(true);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	0e 94 36 1b 	call	0x366c	; 0x366c <UART_Enable>
#endif
    INFO("Init done");
    1b76:	8c e3       	ldi	r24, 0x3C	; 60
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	9f 93       	push	r25
    1b7c:	8f 93       	push	r24
    1b7e:	8e ea       	ldi	r24, 0xAE	; 174
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	08 95       	ret

00001b94 <PostCallback>:
    return;
}

static void PostCallback(void)
{
    ReleaseCS(); //Release device
    1b94:	2a 9a       	sbi	0x05, 2	; 5
    1b96:	08 95       	ret

00001b98 <PreCallback>:
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void PreCallback(void)
{
    libSPI_SetMode(SPIMODE);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 26 14 	call	0x284c	; 0x284c <libSPI_SetMode>

    PullCS(); //Select device
    1b9e:	2a 98       	cbi	0x05, 2	; 5
    1ba0:	08 95       	ret

00001ba2 <libRFM69_InitHW>:
///
void libRFM69_InitHW(void)
{
    InitReset();

    InitCS();
    1ba2:	22 9a       	sbi	0x04, 2	; 4
    PullCS(); //Pull SS high to release device
    1ba4:	2a 98       	cbi	0x05, 2	; 5
    1ba6:	08 95       	ret

00001ba8 <libRFM69_Reset>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba8:	8b ed       	ldi	r24, 0xDB	; 219
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <libRFM69_Reset+0x4>
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <libRFM69_Reset+0xa>
    1bb2:	00 00       	nop
{
    PullReset();
    _delay_us(RESET_TIMING_US);
    ReleaseReset();

    reset_time_ms = Timer_GetMilliseconds();
    1bb4:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    1bb8:	60 93 56 03 	sts	0x0356, r22
    1bbc:	70 93 57 03 	sts	0x0357, r23
    1bc0:	80 93 58 03 	sts	0x0358, r24
    1bc4:	90 93 59 03 	sts	0x0359, r25
    1bc8:	08 95       	ret

00001bca <libRFM69_Init>:
/// @param  None
/// @return None
///
void libRFM69_Init(void)
{
    libRFM69_InitHW();
    1bca:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <libRFM69_InitHW>
    libRFM69_Reset();
    1bce:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <libRFM69_Reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bd2:	8f e2       	ldi	r24, 0x2F	; 47
    1bd4:	95 e7       	ldi	r25, 0x75	; 117
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <libRFM69_Init+0xc>
    1bda:	00 c0       	rjmp	.+0      	; 0x1bdc <libRFM69_Init+0x12>
    1bdc:	00 00       	nop
    1bde:	08 95       	ret

00001be0 <libRFM69_WriteRegister>:
    libRFM69_WriteRegister(REG_TESTDAGC, register_content);
    return;
}

void libRFM69_WriteRegister(uint8_t address, uint8_t register_data)
{
    1be0:	cf 93       	push	r28
    1be2:	c6 2f       	mov	r28, r22
    sc_assert(address <= REG_TESTAFC);
    1be4:	82 37       	cpi	r24, 0x72	; 114
    1be6:	40 f0       	brcs	.+16     	; 0x1bf8 <libRFM69_WriteRegister+0x18>
    1be8:	4d e1       	ldi	r20, 0x1D	; 29
    1bea:	52 e0       	ldi	r21, 0x02	; 2
    1bec:	66 e2       	ldi	r22, 0x26	; 38
    1bee:	75 e0       	ldi	r23, 0x05	; 5
    1bf0:	8d ef       	ldi	r24, 0xFD	; 253
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    libSPI_WriteByte(address | WRITE_REG, &PreCallback, NULL);
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	6c ec       	ldi	r22, 0xCC	; 204
    1bfe:	7d e0       	ldi	r23, 0x0D	; 13
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>
    libSPI_WriteByte(register_data, NULL, &PostCallback);
    1c06:	4a ec       	ldi	r20, 0xCA	; 202
    1c08:	5d e0       	ldi	r21, 0x0D	; 13
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	8c 2f       	mov	r24, r28
    1c10:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>

    return;
}
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <libRFM69_ClearFIFO>:
    return index;
}

void libRFM69_ClearFIFO(void)
{
    INFO("Clear FIFO");
    1c18:	89 e9       	ldi	r24, 0x99	; 153
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	9f 93       	push	r25
    1c1e:	8f 93       	push	r24
    1c20:	89 ed       	ldi	r24, 0xD9	; 217
    1c22:	95 e0       	ldi	r25, 0x05	; 5
    1c24:	9f 93       	push	r25
    1c26:	8f 93       	push	r24
    1c28:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    libRFM69_WriteRegister(REG_IRQFLAGS2, (1 << REG_IRQFLAGS2_BIT_FIFOOVERRUN));
    1c2c:	60 e1       	ldi	r22, 0x10	; 16
    1c2e:	88 e2       	ldi	r24, 0x28	; 40
    1c30:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	08 95       	ret

00001c3e <libRFM69_SetRSSIThreshold>:
/// @return uint8_t RSSI threshold
/// @return None
///
void libRFM69_SetRSSIThreshold(int8_t threshold)
{
    libRFM69_WriteRegister(REG_RSSITHRESH, (uint8_t)(threshold * -1) << 1);
    1c3e:	81 95       	neg	r24
    1c40:	68 2f       	mov	r22, r24
    1c42:	66 0f       	add	r22, r22
    1c44:	89 e2       	ldi	r24, 0x29	; 41
    1c46:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1c4a:	08 95       	ret

00001c4c <libRFM69_SetCarrierFrequency>:
    return ((int8_t)(register_content >> 1) * -1);
}


void libRFM69_SetCarrierFrequency(uint32_t frequency)
{
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	c6 2f       	mov	r28, r22
    1c5e:	d7 2f       	mov	r29, r23
    1c60:	18 2f       	mov	r17, r24
    1c62:	09 2f       	mov	r16, r25
    uint32_t frequency_value = frequency / RFM_FSTEP;
    1c64:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <__floatunsisf>
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	34 e2       	ldi	r19, 0x24	; 36
    1c6c:	44 e7       	ldi	r20, 0x74	; 116
    1c6e:	52 e4       	ldi	r21, 0x42	; 66
    1c70:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    1c74:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__fixunssfsi>
    1c78:	6b 01       	movw	r12, r22
    1c7a:	7c 01       	movw	r14, r24

    DEBUG("Freq: %lu\r\n", frequency);
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	85 eb       	ldi	r24, 0xB5	; 181
    1c86:	95 e0       	ldi	r25, 0x05	; 5
    1c88:	9f 93       	push	r25
    1c8a:	8f 93       	push	r24
    1c8c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("Freq value: 0x%03lX\r\n", frequency_value);
    1c90:	ff 92       	push	r15
    1c92:	ef 92       	push	r14
    1c94:	df 92       	push	r13
    1c96:	cf 92       	push	r12
    1c98:	8f e9       	ldi	r24, 0x9F	; 159
    1c9a:	95 e0       	ldi	r25, 0x05	; 5
    1c9c:	9f 93       	push	r25
    1c9e:	8f 93       	push	r24
    1ca0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    libRFM69_WriteRegister(REG_FRFMSB, (frequency_value >> 16) & 0xFF);
    1ca4:	b7 01       	movw	r22, r14
    1ca6:	88 27       	eor	r24, r24
    1ca8:	99 27       	eor	r25, r25
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FRFMID, (frequency_value >> 8) & 0xFF);
    1cb0:	99 27       	eor	r25, r25
    1cb2:	8f 2d       	mov	r24, r15
    1cb4:	7e 2d       	mov	r23, r14
    1cb6:	6d 2d       	mov	r22, r13
    1cb8:	88 e0       	ldi	r24, 0x08	; 8
    1cba:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FRFLSB, frequency_value & 0xFF);
    1cbe:	6c 2d       	mov	r22, r12
    1cc0:	89 e0       	ldi	r24, 0x09	; 9
    1cc2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1cc6:	8d b7       	in	r24, 0x3d	; 61
    1cc8:	9e b7       	in	r25, 0x3e	; 62
    1cca:	0c 96       	adiw	r24, 0x0c	; 12
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	9e bf       	out	0x3e, r25	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	8d bf       	out	0x3d, r24	; 61

    return;
}
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	08 95       	ret

00001ce8 <libRFM69_SetBitRate>:

    return;
}

void libRFM69_SetBitRate(uint32_t bit_rate)
{
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	9b 01       	movw	r18, r22
    1cf2:	ac 01       	movw	r20, r24
    uint16_t bit_rate_value = (uint16_t)(RFM_FXOSC / bit_rate);
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	78 e4       	ldi	r23, 0x48	; 72
    1cf8:	88 ee       	ldi	r24, 0xE8	; 232
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
    1d00:	69 01       	movw	r12, r18
    1d02:	7a 01       	movw	r14, r20

    libRFM69_WriteRegister(REG_BITRATEMSB, (uint8_t)(bit_rate_value >> 8));
    1d04:	63 2f       	mov	r22, r19
    1d06:	77 27       	eor	r23, r23
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_BITRATELSB, (uint8_t)(bit_rate_value));
    1d0e:	6c 2d       	mov	r22, r12
    1d10:	84 e0       	ldi	r24, 0x04	; 4
    1d12:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <libRFM69_SetNodeAddress>:
/// @param  node_address Address
/// @return None
///
void libRFM69_SetNodeAddress(uint8_t node_address)
{
    libRFM69_WriteRegister(REG_NODEADRS, node_address);
    1d20:	68 2f       	mov	r22, r24
    1d22:	89 e3       	ldi	r24, 0x39	; 57
    1d24:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1d28:	08 95       	ret

00001d2a <libRFM69_SetBroadcastAddress>:
/// @param  broadcast_address Address
/// @return None
///
void libRFM69_SetBroadcastAddress(uint8_t broadcast_address)
{
    libRFM69_WriteRegister(REG_BROADCASTADRS, broadcast_address);
    1d2a:	68 2f       	mov	r22, r24
    1d2c:	8a e3       	ldi	r24, 0x3A	; 58
    1d2e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1d32:	08 95       	ret

00001d34 <libRFM69_SetFrequencyDeviation>:
///
/// @param  frequency_deviation The frequency deviation in hertz.
/// @return None
///
void libRFM69_SetFrequencyDeviation(uint16_t frequency_deviation)
{
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    //Minimum frequency according to the RFM69HW datasheet.
    sc_assert(frequency_deviation > 600);
    1d3e:	c9 35       	cpi	r28, 0x59	; 89
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	d8 07       	cpc	r29, r24
    1d44:	40 f4       	brcc	.+16     	; 0x1d56 <libRFM69_SetFrequencyDeviation+0x22>
    1d46:	47 ea       	ldi	r20, 0xA7	; 167
    1d48:	54 e0       	ldi	r21, 0x04	; 4
    1d4a:	65 ed       	ldi	r22, 0xD5	; 213
    1d4c:	72 e0       	ldi	r23, 0x02	; 2
    1d4e:	87 e8       	ldi	r24, 0x87	; 135
    1d50:	94 e0       	ldi	r25, 0x04	; 4
    1d52:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint16_t frequency_deviation_value = (uint16_t)((float)frequency_deviation /
    1d56:	be 01       	movw	r22, r28
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <__floatunsisf>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	34 e2       	ldi	r19, 0x24	; 36
    1d64:	44 e7       	ldi	r20, 0x74	; 116
    1d66:	52 e4       	ldi	r21, 0x42	; 66
    1d68:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    1d6c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__fixunssfsi>
    1d70:	16 2f       	mov	r17, r22
    1d72:	07 2f       	mov	r16, r23
                                         RFM_FSTEP);

    DEBUG("Freq deviation: %u\r\n", frequency_deviation);
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	82 e7       	ldi	r24, 0x72	; 114
    1d7a:	94 e0       	ldi	r25, 0x04	; 4
    1d7c:	9f 93       	push	r25
    1d7e:	8f 93       	push	r24
    1d80:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("Freq deviation value: 0x%04X\r\n", frequency_deviation_value);
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	83 e5       	ldi	r24, 0x53	; 83
    1d8a:	94 e0       	ldi	r25, 0x04	; 4
    1d8c:	9f 93       	push	r25
    1d8e:	8f 93       	push	r24
    1d90:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    libRFM69_WriteRegister(REG_FDEVMSB, ((frequency_deviation_value >> 8) & 0xFF));
    1d94:	60 2f       	mov	r22, r16
    1d96:	85 e0       	ldi	r24, 0x05	; 5
    1d98:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_FDEVLSB, (frequency_deviation_value & 0xFF));
    1d9c:	61 2f       	mov	r22, r17
    1d9e:	86 e0       	ldi	r24, 0x06	; 6
    1da0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    1da4:	8d b7       	in	r24, 0x3d	; 61
    1da6:	9e b7       	in	r25, 0x3e	; 62
    1da8:	08 96       	adiw	r24, 0x08	; 8
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	9e bf       	out	0x3e, r25	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	8d bf       	out	0x3d, r24	; 61

    return;
}
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <libRFM69_SetPreambleLength>:
///
/// @param length Number of preamble bytes.
/// @return None
///
void libRFM69_SetPreambleLength(uint16_t length)
{
    1dbe:	cf 93       	push	r28
    1dc0:	c8 2f       	mov	r28, r24
    libRFM69_WriteRegister(REG_PREAMBLEMSB, (length >> 8));
    1dc2:	69 2f       	mov	r22, r25
    1dc4:	8c e2       	ldi	r24, 0x2C	; 44
    1dc6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    libRFM69_WriteRegister(REG_PREAMBLELSB, (length & 0x00FF));
    1dca:	6c 2f       	mov	r22, r28
    1dcc:	8d e2       	ldi	r24, 0x2D	; 45
    1dce:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    1dd2:	cf 91       	pop	r28
    1dd4:	08 95       	ret

00001dd6 <libRFM69_ReadRegister>:

    return;
}

void libRFM69_ReadRegister(uint8_t address, uint8_t *register_data)
{
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	eb 01       	movw	r28, r22
    sc_assert(address <= REG_TESTAFC);
    1ddc:	82 37       	cpi	r24, 0x72	; 114
    1dde:	40 f0       	brcs	.+16     	; 0x1df0 <libRFM69_ReadRegister+0x1a>
    1de0:	46 ee       	ldi	r20, 0xE6	; 230
    1de2:	51 e0       	ldi	r21, 0x01	; 1
    1de4:	60 e3       	ldi	r22, 0x30	; 48
    1de6:	75 e0       	ldi	r23, 0x05	; 5
    1de8:	86 ec       	ldi	r24, 0xC6	; 198
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    libSPI_WriteByte(address & READ_REG, &PreCallback, NULL);
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	6c ec       	ldi	r22, 0xCC	; 204
    1df6:	7d e0       	ldi	r23, 0x0D	; 13
    1df8:	8f 77       	andi	r24, 0x7F	; 127
    1dfa:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>
    libSPI_ReadByte(register_data, NULL, &PostCallback);
    1dfe:	4a ec       	ldi	r20, 0xCA	; 202
    1e00:	5d e0       	ldi	r21, 0x0D	; 13
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	ce 01       	movw	r24, r28
    1e08:	0e 94 01 14 	call	0x2802	; 0x2802 <libSPI_ReadByte>

    return;
}
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <libRFM69_IsFIFOFull>:
    return (Timer_TimeDifference(reset_time_ms) > POR_TIME_MS);
}

//TODO: Use remove these functions and use macros!
bool libRFM69_IsFIFOFull(void)
{
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	1f 92       	push	r1
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    1e1c:	be 01       	movw	r22, r28
    1e1e:	6f 5f       	subi	r22, 0xFF	; 255
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	88 e2       	ldi	r24, 0x28	; 40
    1e24:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    1e28:	99 81       	ldd	r25, Y+1	; 0x01
    1e2a:	89 2f       	mov	r24, r25
    1e2c:	88 1f       	adc	r24, r24
    1e2e:	88 27       	eor	r24, r24
    1e30:	88 1f       	adc	r24, r24

//TODO: Use remove these functions and use macros!
bool libRFM69_IsFIFOFull(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOFULL);
}
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <libRFM69_WriteToFIFO>:
/// @param  data Pointer to buffer with data to write.
/// @param  length Number of bytes to write.
/// @return uint8_t Number of bytes written.
///
uint8_t libRFM69_WriteToFIFO(const uint8_t *data, uint8_t length)
{
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	06 2f       	mov	r16, r22
    sc_assert(length <= RFM_FIFO_SIZE);
    1e44:	63 34       	cpi	r22, 0x43	; 67
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <libRFM69_WriteToFIFO+0x16>

    uint8_t index;

    for (index = 0; index < length; ++index)
    1e48:	61 11       	cpse	r22, r1
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <libRFM69_WriteToFIFO+0x26>
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	25 c0       	rjmp	.+74     	; 0x1e9a <libRFM69_WriteToFIFO+0x60>
/// @param  length Number of bytes to write.
/// @return uint8_t Number of bytes written.
///
uint8_t libRFM69_WriteToFIFO(const uint8_t *data, uint8_t length)
{
    sc_assert(length <= RFM_FIFO_SIZE);
    1e50:	4e e2       	ldi	r20, 0x2E	; 46
    1e52:	56 e0       	ldi	r21, 0x06	; 6
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	71 e0       	ldi	r23, 0x01	; 1
    1e58:	8e e0       	ldi	r24, 0x0E	; 14
    1e5a:	96 e0       	ldi	r25, 0x06	; 6
    1e5c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    1e60:	c8 2f       	mov	r28, r24
    1e62:	d9 2f       	mov	r29, r25

    uint8_t index;

    for (index = 0; index < length; ++index)
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    {
        if (libRFM69_IsFIFOFull())
    1e66:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <libRFM69_IsFIFOFull>
    1e6a:	88 23       	and	r24, r24
    1e6c:	79 f0       	breq	.+30     	; 0x1e8c <libRFM69_WriteToFIFO+0x52>
        {
            ERROR("FIFO is full");
    1e6e:	2c ea       	ldi	r18, 0xAC	; 172
    1e70:	31 e0       	ldi	r19, 0x01	; 1
    1e72:	3f 93       	push	r19
    1e74:	2f 93       	push	r18
    1e76:	22 ef       	ldi	r18, 0xF2	; 242
    1e78:	35 e0       	ldi	r19, 0x05	; 5
    1e7a:	3f 93       	push	r19
    1e7c:	2f 93       	push	r18
    1e7e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            break;
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	07 c0       	rjmp	.+14     	; 0x1e9a <libRFM69_WriteToFIFO+0x60>
        }

        libRFM69_WriteRegister(REG_FIFO, data[index]);
    1e8c:	69 91       	ld	r22, Y+
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
{
    sc_assert(length <= RFM_FIFO_SIZE);

    uint8_t index;

    for (index = 0; index < length; ++index)
    1e94:	1f 5f       	subi	r17, 0xFF	; 255
    1e96:	10 13       	cpse	r17, r16
    1e98:	e6 cf       	rjmp	.-52     	; 0x1e66 <libRFM69_WriteToFIFO+0x2c>

        libRFM69_WriteRegister(REG_FIFO, data[index]);
    }

    return index;
}
    1e9a:	81 2f       	mov	r24, r17
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <libRFM69_EnableCRCAutoClear>:
///                                No PayloadReady interrupt issued.
///                 Disabled(False): Do not clear FIFO. PayloadReady interrupt issued.
/// @return None
///
void libRFM69_EnableCRCAutoClear(bool enable)
{
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	1f 92       	push	r1
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1eb4:	be 01       	movw	r22, r28
    1eb6:	6f 5f       	subi	r22, 0xFF	; 255
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	87 e3       	ldi	r24, 0x37	; 55
    1ebc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0xF7) | ((uint8_t)!enable << 3);
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	61 27       	eor	r22, r17
    1ec4:	66 0f       	add	r22, r22
    1ec6:	66 0f       	add	r22, r22
    1ec8:	66 0f       	add	r22, r22
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	87 7f       	andi	r24, 0xF7	; 247
    1ece:	68 2b       	or	r22, r24
    1ed0:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1ed2:	87 e3       	ldi	r24, 0x37	; 55
    1ed4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	08 95       	ret

00001ee2 <libRFM69_EnableCRC>:
///
/// @param  enabled Enabled/disable
/// @return None
///
void libRFM69_EnableCRC(bool enable)
{
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    1ef0:	be 01       	movw	r22, r28
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	87 e3       	ldi	r24, 0x37	; 55
    1ef8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0xEF) | ((uint8_t)enable << 4);
    1efc:	20 e1       	ldi	r18, 0x10	; 16
    1efe:	12 9f       	mul	r17, r18
    1f00:	c0 01       	movw	r24, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	69 81       	ldd	r22, Y+1	; 0x01
    1f06:	6f 7e       	andi	r22, 0xEF	; 239
    1f08:	68 2b       	or	r22, r24
    1f0a:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    1f0c:	87 e3       	ldi	r24, 0x37	; 55
    1f0e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    1f12:	0f 90       	pop	r0
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	08 95       	ret

00001f1c <libRFM69_GetMode>:
///
/// @param  None
/// @return libRFM69_mode_type Operating mode (0-4)
///
libRFM69_mode_type libRFM69_GetMode(void)
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	1f 92       	push	r1
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1f26:	be 01       	movw	r22, r28
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return (libRFM69_mode_type)((register_content & REG_OPMODE_MODE_MASK) >> 2);
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8c 71       	andi	r24, 0x1C	; 28
}
    1f36:	86 95       	lsr	r24
    1f38:	86 95       	lsr	r24
    1f3a:	0f 90       	pop	r0
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	08 95       	ret

00001f42 <libRFM69_SetMode>:

void libRFM69_SetMode(libRFM69_mode_type mode)
{
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	1f 92       	push	r1
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    1f50:	be 01       	movw	r22, r28
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_OPMODE_MODE_MASK) | (mode << 2);
    1f5c:	11 0f       	add	r17, r17
    1f5e:	11 0f       	add	r17, r17
    1f60:	69 81       	ldd	r22, Y+1	; 0x01
    1f62:	63 7e       	andi	r22, 0xE3	; 227
    1f64:	61 2b       	or	r22, r17
    1f66:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    1f6e:	0f 90       	pop	r0
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	08 95       	ret

00001f78 <libRFM69_IsModeReady>:
    }
    return status;
}

bool libRFM69_IsModeReady(void)
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	1f 92       	push	r1
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_IRQFLAGS1, &register_content);
    1f82:	be 01       	movw	r22, r28
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	87 e2       	ldi	r24, 0x27	; 39
    1f8a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return (register_content & RF_IRQFLAGS1_MODEREADY) == RF_IRQFLAGS1_MODEREADY;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	88 1f       	adc	r24, r24
    1f92:	88 27       	eor	r24, r24
    1f94:	88 1f       	adc	r24, r24
    1f96:	0f 90       	pop	r0
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <libRFM69_WaitForModeReady>:

    return;
}

bool libRFM69_WaitForModeReady(void)
{
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    bool status = true;
    uint32_t timeout_timer = Timer_GetMilliseconds();
    1fa6:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    1faa:	6b 01       	movw	r12, r22
    1fac:	7c 01       	movw	r14, r24

    while (!libRFM69_IsModeReady())
    1fae:	19 c0       	rjmp	.+50     	; 0x1fe2 <libRFM69_WaitForModeReady+0x44>
    {
        if (Timer_TimeDifference(timeout_timer) > WAIT_TIMEOUT_MS)
    1fb0:	c7 01       	movw	r24, r14
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
    1fb8:	6b 30       	cpi	r22, 0x0B	; 11
    1fba:	71 05       	cpc	r23, r1
    1fbc:	81 05       	cpc	r24, r1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	80 f0       	brcs	.+32     	; 0x1fe2 <libRFM69_WaitForModeReady+0x44>
        {
            ERROR("Timeout!");
    1fc2:	8f e7       	ldi	r24, 0x7F	; 127
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	9f 93       	push	r25
    1fc8:	8f 93       	push	r24
    1fca:	81 ec       	ldi	r24, 0xC1	; 193
    1fcc:	95 e0       	ldi	r25, 0x05	; 5
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            status = false;
            break;
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    while (!libRFM69_IsModeReady())
    {
        if (Timer_TimeDifference(timeout_timer) > WAIT_TIMEOUT_MS)
        {
            ERROR("Timeout!");
            status = false;
    1fde:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <libRFM69_WaitForModeReady+0x4e>
bool libRFM69_WaitForModeReady(void)
{
    bool status = true;
    uint32_t timeout_timer = Timer_GetMilliseconds();

    while (!libRFM69_IsModeReady())
    1fe2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <libRFM69_IsModeReady>
    1fe6:	88 23       	and	r24, r24
    1fe8:	19 f3       	breq	.-58     	; 0x1fb0 <libRFM69_WaitForModeReady+0x12>
    return;
}

bool libRFM69_WaitForModeReady(void)
{
    bool status = true;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
            status = false;
            break;
        }
    }
    return status;
}
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <libRFM69_EnableListenMode>:

    return;
}

void libRFM69_EnableListenMode(bool enable)
{
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	1f 92       	push	r1
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    2004:	be 01       	movw	r22, r28
    2006:	6f 5f       	subi	r22, 0xFF	; 255
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0xBF) | (uint8_t)enable;
    2010:	69 81       	ldd	r22, Y+1	; 0x01
    2012:	6f 7b       	andi	r22, 0xBF	; 191
    2014:	61 2b       	or	r22, r17
    2016:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    201e:	0f 90       	pop	r0
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	08 95       	ret

00002028 <libRFM69_EnableSequencer>:

void libRFM69_EnableSequencer(bool enable)
{
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	1f 92       	push	r1
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OPMODE, &register_content);
    2036:	be 01       	movw	r22, r28
    2038:	6f 5f       	subi	r22, 0xFF	; 255
    203a:	7f 4f       	sbci	r23, 0xFF	; 255
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0x7F) | ((uint8_t)!enable << 7);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	18 27       	eor	r17, r24
    2046:	69 81       	ldd	r22, Y+1	; 0x01
    2048:	10 fb       	bst	r17, 0
    204a:	67 f9       	bld	r22, 7
    204c:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_OPMODE, register_content);
    204e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    2052:	0f 90       	pop	r0
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	08 95       	ret

0000205c <libRFM69_EnableEncryption>:

void libRFM69_EnableEncryption(bool enable)
{
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	1f 92       	push	r1
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    206a:	be 01       	movw	r22, r28
    206c:	6f 5f       	subi	r22, 0xFF	; 255
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	8d e3       	ldi	r24, 0x3D	; 61
    2072:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(PACKETCONFIG2_BIT_AESON, enable, &register_content);
    2076:	ae 01       	movw	r20, r28
    2078:	4f 5f       	subi	r20, 0xFF	; 255
    207a:	5f 4f       	sbci	r21, 0xFF	; 255
    207c:	61 2f       	mov	r22, r17
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    2084:	69 81       	ldd	r22, Y+1	; 0x01
    2086:	8d e3       	ldi	r24, 0x3D	; 61
    2088:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	08 95       	ret

00002096 <libRFM69_SetPacketFormat>:

void libRFM69_SetPacketFormat(libRFM69_packet_format_type packet_format)
{
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	1f 92       	push	r1
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    20a4:	be 01       	movw	r22, r28
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	87 e3       	ldi	r24, 0x37	; 55
    20ac:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(PACKETCONFIG1_BIT_PCKFORMAT, (bool)packet_format,
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	11 11       	cpse	r17, r1
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <libRFM69_SetPacketFormat+0x22>
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	ae 01       	movw	r20, r28
    20ba:	4f 5f       	subi	r20, 0xFF	; 255
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	87 e0       	ldi	r24, 0x07	; 7
    20c0:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
           &register_content);

    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    20c4:	69 81       	ldd	r22, Y+1	; 0x01
    20c6:	87 e3       	ldi	r24, 0x37	; 55
    20c8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    20cc:	0f 90       	pop	r0
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	08 95       	ret

000020d6 <libRFM69_SetTXStartCondition>:

void libRFM69_SetTXStartCondition(libRFM69_tx_start_condition_type
                                  start_condition)
{
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	1f 92       	push	r1
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_FIFOTHRESH, &register_content);
    20e4:	be 01       	movw	r22, r28
    20e6:	6f 5f       	subi	r22, 0xFF	; 255
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	8c e3       	ldi	r24, 0x3C	; 60
    20ec:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(0x07, (bool)start_condition, &register_content);
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	11 11       	cpse	r17, r1
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <libRFM69_SetTXStartCondition+0x22>
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	ae 01       	movw	r20, r28
    20fa:	4f 5f       	subi	r20, 0xFF	; 255
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255
    20fe:	87 e0       	ldi	r24, 0x07	; 7
    2100:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>

    libRFM69_WriteRegister(REG_FIFOTHRESH, register_content);
    2104:	69 81       	ldd	r22, Y+1	; 0x01
    2106:	8c e3       	ldi	r24, 0x3C	; 60
    2108:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    210c:	0f 90       	pop	r0
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	08 95       	ret

00002116 <libRFM69_RestartRx>:
///
/// @param  None
/// @return None
///
void libRFM69_RestartRx(void)
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	1f 92       	push	r1
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    2120:	be 01       	movw	r22, r28
    2122:	6f 5f       	subi	r22, 0xFF	; 255
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	8d e3       	ldi	r24, 0x3D	; 61
    2128:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content | (1 << 2));
    212c:	69 81       	ldd	r22, Y+1	; 0x01
    212e:	64 60       	ori	r22, 0x04	; 4
    2130:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    2132:	8d e3       	ldi	r24, 0x3D	; 61
    2134:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    2138:	0f 90       	pop	r0
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <libRFM69_SetPacketRxDelay>:
///
/// @param  val Inter packet Rx delay
/// @return None
///
void libRFM69_SetPacketRxDelay(uint8_t val)
{
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG2, &register_content);
    214e:	be 01       	movw	r22, r28
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	8d e3       	ldi	r24, 0x3D	; 61
    2156:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0x0F) | (val << 4);
    215a:	20 e1       	ldi	r18, 0x10	; 16
    215c:	12 9f       	mul	r17, r18
    215e:	c0 01       	movw	r24, r0
    2160:	11 24       	eor	r1, r1
    2162:	69 81       	ldd	r22, Y+1	; 0x01
    2164:	6f 70       	andi	r22, 0x0F	; 15
    2166:	68 2b       	or	r22, r24
    2168:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PACKETCONFIG2, register_content);
    216a:	8d e3       	ldi	r24, 0x3D	; 61
    216c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    2170:	0f 90       	pop	r0
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	08 95       	ret

0000217a <libRFM69_SetAddressFiltering>:
///         RFM_ADDRESS_FILTER_ADDRESS_BROADCAST: Address must match node address or broadcast address

/// @return None
///
void libRFM69_SetAddressFiltering(libRFM69_address_filtering_type filtering)
{
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	1f 92       	push	r1
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	18 2f       	mov	r17, r24
    sc_assert(filtering < 3);
    2188:	83 30       	cpi	r24, 0x03	; 3
    218a:	40 f0       	brcs	.+16     	; 0x219c <libRFM69_SetAddressFiltering+0x22>
    218c:	41 e9       	ldi	r20, 0x91	; 145
    218e:	55 e0       	ldi	r21, 0x05	; 5
    2190:	69 e5       	ldi	r22, 0x59	; 89
    2192:	72 e0       	ldi	r23, 0x02	; 2
    2194:	81 e7       	ldi	r24, 0x71	; 113
    2196:	95 e0       	ldi	r25, 0x05	; 5
    2198:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    219c:	be 01       	movw	r22, r28
    219e:	6f 5f       	subi	r22, 0xFF	; 255
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	87 e3       	ldi	r24, 0x37	; 55
    21a4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & 0xF9) |
                       (filtering << 1);
    21a8:	11 0f       	add	r17, r17
    sc_assert(filtering < 3);

    uint8_t register_content;

    libRFM69_ReadRegister(REG_PACKETCONFIG1, &register_content);
    register_content = (register_content & 0xF9) |
    21aa:	69 81       	ldd	r22, Y+1	; 0x01
    21ac:	69 7f       	andi	r22, 0xF9	; 249
    21ae:	61 2b       	or	r22, r17
    21b0:	69 83       	std	Y+1, r22	; 0x01
                       (filtering << 1);

    libRFM69_WriteRegister(REG_PACKETCONFIG1, register_content);
    21b2:	87 e3       	ldi	r24, 0x37	; 55
    21b4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    21b8:	0f 90       	pop	r0
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	08 95       	ret

000021c2 <libRFM69_SetDataMode>:
///
/// @param  data_mode Data mode to set.
/// @return None
///
void libRFM69_SetDataMode(libRFM69_data_mode_type data_mode)
{
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	1f 92       	push	r1
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    21d0:	be 01       	movw	r22, r28
    21d2:	6f 5f       	subi	r22, 0xFF	; 255
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_DATA_MODE_MASK) |
                       (data_mode << 5);
    21dc:	20 e2       	ldi	r18, 0x20	; 32
    21de:	12 9f       	mul	r17, r18
    21e0:	c0 01       	movw	r24, r0
    21e2:	11 24       	eor	r1, r1
void libRFM69_SetDataMode(libRFM69_data_mode_type data_mode)
{
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    register_content = (register_content & ~REG_DATA_MODUL_DATA_MODE_MASK) |
    21e4:	69 81       	ldd	r22, Y+1	; 0x01
    21e6:	6f 79       	andi	r22, 0x9F	; 159
    21e8:	68 2b       	or	r22, r24
    21ea:	69 83       	std	Y+1, r22	; 0x01
                       (data_mode << 5);

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    21f2:	0f 90       	pop	r0
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	08 95       	ret

000021fc <libRFM69_SetModulationType>:
///
/// @param  modulation_type FSK or OOK.
/// @return None
///
void libRFM69_SetModulationType(libRFM69_modulation_type_type modulation_type)
{
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	1f 92       	push	r1
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	18 2f       	mov	r17, r24
    sc_assert(modulation_type == RFM_FSK || modulation_type == RFM_OOK);
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	40 f0       	brcs	.+16     	; 0x221e <libRFM69_SetModulationType+0x22>
    220e:	48 e3       	ldi	r20, 0x38	; 56
    2210:	55 e0       	ldi	r21, 0x05	; 5
    2212:	60 ea       	ldi	r22, 0xA0	; 160
    2214:	72 e0       	ldi	r23, 0x02	; 2
    2216:	88 e1       	ldi	r24, 0x18	; 24
    2218:	95 e0       	ldi	r25, 0x05	; 5
    221a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    221e:	be 01       	movw	r22, r28
    2220:	6f 5f       	subi	r22, 0xFF	; 255
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_TYPE_MASK) |
                       (modulation_type << 3);
    222a:	11 0f       	add	r17, r17
    222c:	11 0f       	add	r17, r17
    222e:	11 0f       	add	r17, r17
{
    sc_assert(modulation_type == RFM_FSK || modulation_type == RFM_OOK);
    uint8_t register_content;

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_TYPE_MASK) |
    2230:	69 81       	ldd	r22, Y+1	; 0x01
    2232:	67 7e       	andi	r22, 0xE7	; 231
    2234:	61 2b       	or	r22, r17
    2236:	69 83       	std	Y+1, r22	; 0x01
                       (modulation_type << 3);

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    223e:	0f 90       	pop	r0
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	08 95       	ret

00002248 <libRFM69_SetModulationShaping>:
///
/// @param  modulation_shaping The modulation shaping value.
/// @return None
///
void libRFM69_SetModulationShaping(uint8_t modulation_shaping)
{
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	1f 92       	push	r1
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	18 2f       	mov	r17, r24
    sc_assert(modulation_shaping < 0x04);
    2256:	84 30       	cpi	r24, 0x04	; 4
    2258:	40 f0       	brcs	.+16     	; 0x226a <libRFM69_SetModulationShaping+0x22>
    225a:	4e ef       	ldi	r20, 0xFE	; 254
    225c:	54 e0       	ldi	r21, 0x04	; 4
    225e:	6f eb       	ldi	r22, 0xBF	; 191
    2260:	72 e0       	ldi	r23, 0x02	; 2
    2262:	8e ed       	ldi	r24, 0xDE	; 222
    2264:	94 e0       	ldi	r25, 0x04	; 4
    2266:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint8_t register_content;

    DEBUG("Modulation shaping: 0x%02X\r\n", modulation_shaping);
    226a:	1f 92       	push	r1
    226c:	8f 93       	push	r24
    226e:	21 ec       	ldi	r18, 0xC1	; 193
    2270:	34 e0       	ldi	r19, 0x04	; 4
    2272:	3f 93       	push	r19
    2274:	2f 93       	push	r18
    2276:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    libRFM69_ReadRegister(REG_DATAMODUL, &register_content);
    227a:	be 01       	movw	r22, r28
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content = (register_content & ~REG_DATA_MODUL_MODULATION_SHAPING_MASK)
    2286:	69 81       	ldd	r22, Y+1	; 0x01
    2288:	6c 7f       	andi	r22, 0xFC	; 252
    228a:	61 2b       	or	r22, r17
    228c:	69 83       	std	Y+1, r22	; 0x01
                       | modulation_shaping;

    libRFM69_WriteRegister(REG_DATAMODUL, register_content);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	08 95       	ret

000022a6 <libRFM69_SetPowerAmplifierMode>:
///
/// @param  mode The power amplifier mode, value between 2 and 4.
/// @return None
///
void libRFM69_SetPowerAmplifierMode(uint8_t mode)
{
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	1f 92       	push	r1
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    sc_assert(mode > 0x01 && mode < 0x05);
    22b4:	9e ef       	ldi	r25, 0xFE	; 254
    22b6:	98 0f       	add	r25, r24
    22b8:	93 30       	cpi	r25, 0x03	; 3
    22ba:	40 f0       	brcs	.+16     	; 0x22cc <libRFM69_SetPowerAmplifierMode+0x26>
    22bc:	48 e3       	ldi	r20, 0x38	; 56
    22be:	54 e0       	ldi	r21, 0x04	; 4
    22c0:	6b ee       	ldi	r22, 0xEB	; 235
    22c2:	72 e0       	ldi	r23, 0x02	; 2
    22c4:	88 e1       	ldi	r24, 0x18	; 24
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint8_t register_content;

    DEBUG("Power amplifier mode: 0x%02X\r\n", mode);
    22cc:	08 2f       	mov	r16, r24
    22ce:	10 e0       	ldi	r17, 0x00	; 0
    22d0:	1f 92       	push	r1
    22d2:	8f 93       	push	r24
    22d4:	89 ef       	ldi	r24, 0xF9	; 249
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	9f 93       	push	r25
    22da:	8f 93       	push	r24
    22dc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    libRFM69_ReadRegister(REG_PALEVEL, &register_content);
    22e0:	be 01       	movw	r22, r28
    22e2:	6f 5f       	subi	r22, 0xFF	; 255
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	81 e1       	ldi	r24, 0x11	; 17
    22e8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>

    register_content &= ~REG_PA_LEVEL_PA_MASK;
    register_content |= (mode << 5);
    22ec:	00 0f       	add	r16, r16
    22ee:	11 1f       	adc	r17, r17
    22f0:	02 95       	swap	r16
    22f2:	12 95       	swap	r17
    22f4:	10 7f       	andi	r17, 0xF0	; 240
    22f6:	10 27       	eor	r17, r16
    22f8:	00 7f       	andi	r16, 0xF0	; 240
    22fa:	10 27       	eor	r17, r16

    DEBUG("Power amplifier mode: 0x%02X\r\n", mode);

    libRFM69_ReadRegister(REG_PALEVEL, &register_content);

    register_content &= ~REG_PA_LEVEL_PA_MASK;
    22fc:	69 81       	ldd	r22, Y+1	; 0x01
    22fe:	6f 71       	andi	r22, 0x1F	; 31
    register_content |= (mode << 5);
    2300:	60 2b       	or	r22, r16
    2302:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PALEVEL, register_content);
    2304:	81 e1       	ldi	r24, 0x11	; 17
    2306:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	08 95       	ret

0000231e <libRFM69_SetPowerLevel>:
///
/// @param  power_level Value between 0 and 31.
/// @return None
///
void libRFM69_SetPowerLevel(uint8_t power_level)
{
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	1f 92       	push	r1
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	18 2f       	mov	r17, r24
    sc_assert(power_level <= 31);
    232c:	80 32       	cpi	r24, 0x20	; 32
    232e:	40 f0       	brcs	.+16     	; 0x2340 <libRFM69_SetPowerLevel+0x22>
    2330:	47 ee       	ldi	r20, 0xE7	; 231
    2332:	53 e0       	ldi	r21, 0x03	; 3
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	73 e0       	ldi	r23, 0x03	; 3
    2338:	87 ec       	ldi	r24, 0xC7	; 199
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_PALEVEL, &register_content);
    2340:	be 01       	movw	r22, r28
    2342:	6f 5f       	subi	r22, 0xFF	; 255
    2344:	7f 4f       	sbci	r23, 0xFF	; 255
    2346:	81 e1       	ldi	r24, 0x11	; 17
    2348:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>

    register_content &= ~REG_PA_LEVEL_POUT_MASK;
    234c:	69 81       	ldd	r22, Y+1	; 0x01
    234e:	60 7e       	andi	r22, 0xE0	; 224
    register_content |= power_level;
    2350:	61 2b       	or	r22, r17
    2352:	69 83       	std	Y+1, r22	; 0x01

    libRFM69_WriteRegister(REG_PALEVEL, register_content);
    2354:	81 e1       	ldi	r24, 0x11	; 17
    2356:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    235a:	0f 90       	pop	r0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	08 95       	ret

00002364 <libRFM69_EnableOCP>:
///
/// @param  None
/// @return bool true if overrun flag was set, otherwise false.
///
void libRFM69_EnableOCP(bool enabled)
{
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	1f 92       	push	r1
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_OCP, &register_content);
    2372:	be 01       	movw	r22, r28
    2374:	6f 5f       	subi	r22, 0xFF	; 255
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	83 e1       	ldi	r24, 0x13	; 19
    237a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(4, enabled, &register_content);
    237e:	ae 01       	movw	r20, r28
    2380:	4f 5f       	subi	r20, 0xFF	; 255
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	61 2f       	mov	r22, r17
    2386:	84 e0       	ldi	r24, 0x04	; 4
    2388:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>

    libRFM69_WriteRegister(REG_OCP, register_content);
    238c:	69 81       	ldd	r22, Y+1	; 0x01
    238e:	83 e1       	ldi	r24, 0x13	; 19
    2390:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    return;
}
    2394:	0f 90       	pop	r0
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	08 95       	ret

0000239e <libRFM69_SetSyncWordSize>:
///
/// @param  uint8_t Size of the sync word, (1-8).
/// @return None
///
void libRFM69_SetSyncWordSize(uint8_t size)
{
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	1f 92       	push	r1
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	18 2f       	mov	r17, r24
    sc_assert(size > 0 && size <= MAX_SYNC_WORD_SIZE);
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	81 0f       	add	r24, r17
    23b0:	88 30       	cpi	r24, 0x08	; 8
    23b2:	40 f0       	brcs	.+16     	; 0x23c4 <libRFM69_SetSyncWordSize+0x26>
    23b4:	41 e6       	ldi	r20, 0x61	; 97
    23b6:	53 e0       	ldi	r21, 0x03	; 3
    23b8:	6f ed       	ldi	r22, 0xDF	; 223
    23ba:	73 e0       	ldi	r23, 0x03	; 3
    23bc:	81 e4       	ldi	r24, 0x41	; 65
    23be:	93 e0       	ldi	r25, 0x03	; 3
    23c0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    23c4:	be 01       	movw	r22, r28
    23c6:	6f 5f       	subi	r22, 0xFF	; 255
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	8e e2       	ldi	r24, 0x2E	; 46
    23cc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    register_content &= (0xC7);

    register_content |= ((size - 1) << 3);
    23d0:	81 2f       	mov	r24, r17
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    sc_assert(size > 0 && size <= MAX_SYNC_WORD_SIZE);

    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    register_content &= (0xC7);
    23e2:	69 81       	ldd	r22, Y+1	; 0x01
    23e4:	67 7c       	andi	r22, 0xC7	; 199

    register_content |= ((size - 1) << 3);
    23e6:	68 2b       	or	r22, r24
    23e8:	69 83       	std	Y+1, r22	; 0x01
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    23ea:	8e e2       	ldi	r24, 0x2E	; 46
    23ec:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    23f0:	0f 90       	pop	r0
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	08 95       	ret

000023fa <libRFM69_GetSyncWordSize>:
///
/// @param None
/// @return uint8_t Size of the sync word, (1-8).
///
uint8_t libRFM69_GetSyncWordSize(void)
{
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	1f 92       	push	r1
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    2404:	be 01       	movw	r22, r28
    2406:	6f 5f       	subi	r22, 0xFF	; 255
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	8e e2       	ldi	r24, 0x2E	; 46
    240c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>

    //From RFM69HW datasheet, table 28: sync word size = RegSyncConfig[5:2] + 1
    return ((register_content >> 3) & 0x07) + 1;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	86 95       	lsr	r24
    2414:	86 95       	lsr	r24
    2416:	86 95       	lsr	r24
    2418:	87 70       	andi	r24, 0x07	; 7
}
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	0f 90       	pop	r0
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <libRFM69_SetSyncWord>:
/// @param sync_world* Pointer to new sync word.
/// @param length Length of the sync word.
/// @return bool true if the new sync word was valid, otherwise false.
///
bool libRFM69_SetSyncWord(const uint8_t *sync_word, uint8_t length)
{
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	16 2f       	mov	r17, r22
    //Validate sync word.
    if (length != libRFM69_GetSyncWordSize())
    2430:	0e 94 fd 11 	call	0x23fa	; 0x23fa <libRFM69_GetSyncWordSize>
    2434:	81 13       	cpse	r24, r17
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <libRFM69_SetSyncWord+0x20>
    }

    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    2438:	88 23       	and	r24, r24
    243a:	e1 f1       	breq	.+120    	; 0x24b4 <libRFM69_SetSyncWord+0x90>
    {
        if (sync_word[index] == 0x00)
    243c:	98 81       	ld	r25, Y
    243e:	91 11       	cpse	r25, r1
    2440:	28 c0       	rjmp	.+80     	; 0x2492 <libRFM69_SetSyncWord+0x6e>
    2442:	17 c0       	rjmp	.+46     	; 0x2472 <libRFM69_SetSyncWord+0x4e>
bool libRFM69_SetSyncWord(const uint8_t *sync_word, uint8_t length)
{
    //Validate sync word.
    if (length != libRFM69_GetSyncWordSize())
    {
        ERROR("Invalid sync word length: %u", length);
    2444:	1f 92       	push	r1
    2446:	1f 93       	push	r17
    2448:	8a e4       	ldi	r24, 0x4A	; 74
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	9f 93       	push	r25
    244e:	8f 93       	push	r24
    2450:	85 e1       	ldi	r24, 0x15	; 21
    2452:	93 e0       	ldi	r25, 0x03	; 3
    2454:	9f 93       	push	r25
    2456:	8f 93       	push	r24
    2458:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        return false;
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <libRFM69_SetSyncWord+0x96>
    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    {
        if (sync_word[index] == 0x00)
    246c:	21 91       	ld	r18, Z+
    246e:	21 11       	cpse	r18, r1
    2470:	13 c0       	rjmp	.+38     	; 0x2498 <libRFM69_SetSyncWord+0x74>
        {
            ERROR("Invalid sync word value: 0x00");
    2472:	8a e4       	ldi	r24, 0x4A	; 74
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	9f 93       	push	r25
    2478:	8f 93       	push	r24
    247a:	88 ee       	ldi	r24, 0xE8	; 232
    247c:	92 e0       	ldi	r25, 0x02	; 2
    247e:	9f 93       	push	r25
    2480:	8f 93       	push	r24
    2482:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            return false;
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <libRFM69_SetSyncWord+0x96>
    2492:	fe 01       	movw	r30, r28
    2494:	31 96       	adiw	r30, 0x01	; 1
    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    {
        if (sync_word[index] == 0x00)
    2496:	90 e0       	ldi	r25, 0x00	; 0
    }

    //From RFM69HW datasheet, note on page 56: sync
    //word values equal to 0x00 is forbidden.
    uint8_t index;
    for (index = 0; index < length; ++index)
    2498:	9f 5f       	subi	r25, 0xFF	; 255
    249a:	98 13       	cpse	r25, r24
    249c:	e7 cf       	rjmp	.-50     	; 0x246c <libRFM69_SetSyncWord+0x48>
    249e:	0f e2       	ldi	r16, 0x2F	; 47
    24a0:	08 0f       	add	r16, r24
    24a2:	1f e2       	ldi	r17, 0x2F	; 47
    }

    //Write new sync word if all checks passed.
    for (index = 0; index < length; ++index)
    {
        libRFM69_WriteRegister(REG_SYNCVALUE1 + index, sync_word[index]);
    24a4:	69 91       	ld	r22, Y+
    24a6:	81 2f       	mov	r24, r17
    24a8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    24ac:	1f 5f       	subi	r17, 0xFF	; 255
            return false;
        }
    }

    //Write new sync word if all checks passed.
    for (index = 0; index < length; ++index)
    24ae:	10 13       	cpse	r17, r16
    24b0:	f9 cf       	rjmp	.-14     	; 0x24a4 <libRFM69_SetSyncWord+0x80>
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <libRFM69_SetSyncWord+0x94>
    {
        libRFM69_WriteRegister(REG_SYNCVALUE1 + index, sync_word[index]);
    }

    return true;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <libRFM69_SetSyncWord+0x96>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
}
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <libRFM69_EnableSyncWordGeneration>:
///
/// @param enabled Enable/disable
/// @return None
///
void libRFM69_EnableSyncWordGeneration(bool enabled)
{
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	1f 92       	push	r1
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    24d2:	be 01       	movw	r22, r28
    24d4:	6f 5f       	subi	r22, 0xFF	; 255
    24d6:	7f 4f       	sbci	r23, 0xFF	; 255
    24d8:	8e e2       	ldi	r24, 0x2E	; 46
    24da:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(7, enabled, &register_content);
    24de:	ae 01       	movw	r20, r28
    24e0:	4f 5f       	subi	r20, 0xFF	; 255
    24e2:	5f 4f       	sbci	r21, 0xFF	; 255
    24e4:	61 2f       	mov	r22, r17
    24e6:	87 e0       	ldi	r24, 0x07	; 7
    24e8:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    24ec:	69 81       	ldd	r22, Y+1	; 0x01
    24ee:	8e e2       	ldi	r24, 0x2E	; 46
    24f0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    24f4:	0f 90       	pop	r0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	08 95       	ret

000024fe <libRFM69_SetFIFOFillCondition>:
/// @param register fill_condition The fill condition, AUTO or MAN.
/// @return None
///
void libRFM69_SetFIFOFillCondition(libRFM69_fifo_fill_condition_type
                                   fill_condition)
{
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_SYNCCONFIG, &register_content);
    250c:	be 01       	movw	r22, r28
    250e:	6f 5f       	subi	r22, 0xFF	; 255
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	8e e2       	ldi	r24, 0x2E	; 46
    2514:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(6, (bool)fill_condition, &register_content);
    2518:	61 e0       	ldi	r22, 0x01	; 1
    251a:	11 11       	cpse	r17, r1
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <libRFM69_SetFIFOFillCondition+0x22>
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	ae 01       	movw	r20, r28
    2522:	4f 5f       	subi	r20, 0xFF	; 255
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	86 e0       	ldi	r24, 0x06	; 6
    2528:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
    libRFM69_WriteRegister(REG_SYNCCONFIG, register_content);
    252c:	69 81       	ldd	r22, Y+1	; 0x01
    252e:	8e e2       	ldi	r24, 0x2E	; 46
    2530:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    2534:	0f 90       	pop	r0
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	08 95       	ret

0000253e <libRFM69_SetClockOutFrequency>:
///
/// @param frequency Frequency to set.
/// @return None
///
void libRFM69_SetClockOutFrequency(libRFM69_clkout_freq_type frequency)
{
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	1f 92       	push	r1
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	18 2f       	mov	r17, r24
    sc_assert(frequency <= RFM_CLKOUT_OFF);
    254c:	88 30       	cpi	r24, 0x08	; 8
    254e:	40 f0       	brcs	.+16     	; 0x2560 <libRFM69_SetClockOutFrequency+0x22>
    2550:	4c ec       	ldi	r20, 0xCC	; 204
    2552:	52 e0       	ldi	r21, 0x02	; 2
    2554:	6c eb       	ldi	r22, 0xBC	; 188
    2556:	74 e0       	ldi	r23, 0x04	; 4
    2558:	8c ea       	ldi	r24, 0xAC	; 172
    255a:	92 e0       	ldi	r25, 0x02	; 2
    255c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_DIOMAPPING2, &register_content);
    2560:	be 01       	movw	r22, r28
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	86 e2       	ldi	r24, 0x26	; 38
    2568:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    libRFM69_WriteRegister(REG_DIOMAPPING2, (register_content & 0xF8) | frequency);
    256c:	69 81       	ldd	r22, Y+1	; 0x01
    256e:	68 7f       	andi	r22, 0xF8	; 248
    2570:	61 2b       	or	r22, r17
    2572:	86 e2       	ldi	r24, 0x26	; 38
    2574:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
}
    2578:	0f 90       	pop	r0
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	08 95       	ret

00002582 <libRFM69_SetLNAGain>:
///
/// @param gain Gain to set.
/// @return None
///
void libRFM69_SetLNAGain(libRFM69_lna_gain_type gain)
{
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	1f 92       	push	r1
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	18 2f       	mov	r17, r24
    sc_assert(gain <= RFM_LNA_GAIN_G6);
    2590:	87 30       	cpi	r24, 0x07	; 7
    2592:	40 f0       	brcs	.+16     	; 0x25a4 <libRFM69_SetLNAGain+0x22>
    2594:	44 e9       	ldi	r20, 0x94	; 148
    2596:	52 e0       	ldi	r21, 0x02	; 2
    2598:	64 ed       	ldi	r22, 0xD4	; 212
    259a:	74 e0       	ldi	r23, 0x04	; 4
    259c:	84 e7       	ldi	r24, 0x74	; 116
    259e:	92 e0       	ldi	r25, 0x02	; 2
    25a0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_LNA, &register_content);
    25a4:	be 01       	movw	r22, r28
    25a6:	6f 5f       	subi	r22, 0xFF	; 255
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	88 e1       	ldi	r24, 0x18	; 24
    25ac:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    libRFM69_WriteRegister(REG_LNA, (register_content & 0xF8) | gain);
    25b0:	69 81       	ldd	r22, Y+1	; 0x01
    25b2:	68 7f       	andi	r22, 0xF8	; 248
    25b4:	61 2b       	or	r22, r17
    25b6:	88 e1       	ldi	r24, 0x18	; 24
    25b8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
}
    25bc:	0f 90       	pop	r0
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	08 95       	ret

000025c6 <libRFM69_SetLNAInputImpedance>:
///
/// @param impedance Impedance to set.
/// @return None
///
void libRFM69_SetLNAInputImpedance(libRFM69_lna_zin_type impedance)
{
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	1f 92       	push	r1
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	18 2f       	mov	r17, r24
    sc_assert(impedance <= RFM_LNA_ZIN_200OHM);
    25d4:	82 30       	cpi	r24, 0x02	; 2
    25d6:	40 f0       	brcs	.+16     	; 0x25e8 <libRFM69_SetLNAInputImpedance+0x22>
    25d8:	44 e5       	ldi	r20, 0x54	; 84
    25da:	52 e0       	ldi	r21, 0x02	; 2
    25dc:	63 ee       	ldi	r22, 0xE3	; 227
    25de:	74 e0       	ldi	r23, 0x04	; 4
    25e0:	84 e3       	ldi	r24, 0x34	; 52
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    uint8_t register_content;
    libRFM69_ReadRegister(REG_LNA, &register_content);
    25e8:	be 01       	movw	r22, r28
    25ea:	6f 5f       	subi	r22, 0xFF	; 255
    25ec:	7f 4f       	sbci	r23, 0xFF	; 255
    25ee:	88 e1       	ldi	r24, 0x18	; 24
    25f0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(7, impedance, &register_content);
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	11 11       	cpse	r17, r1
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <libRFM69_SetLNAInputImpedance+0x36>
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	ae 01       	movw	r20, r28
    25fe:	4f 5f       	subi	r20, 0xFF	; 255
    2600:	5f 4f       	sbci	r21, 0xFF	; 255
    2602:	87 e0       	ldi	r24, 0x07	; 7
    2604:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
    libRFM69_WriteRegister(REG_LNA, register_content);
    2608:	69 81       	ldd	r22, Y+1	; 0x01
    260a:	88 e1       	ldi	r24, 0x18	; 24
    260c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
}
    2610:	0f 90       	pop	r0
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	08 95       	ret

0000261a <libRFM69_EnableAFCLowBeta>:
///
/// @param enabled True or False
/// @return None
///
void libRFM69_EnableAFCLowBeta(bool enabled)
{
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	1f 92       	push	r1
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	18 2f       	mov	r17, r24
    uint8_t register_content;

    libRFM69_ReadRegister(REG_AFCCTRL, &register_content);
    2628:	be 01       	movw	r22, r28
    262a:	6f 5f       	subi	r22, 0xFF	; 255
    262c:	7f 4f       	sbci	r23, 0xFF	; 255
    262e:	8b e0       	ldi	r24, 0x0B	; 11
    2630:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    SetBit(5, enabled, &register_content);
    2634:	ae 01       	movw	r20, r28
    2636:	4f 5f       	subi	r20, 0xFF	; 255
    2638:	5f 4f       	sbci	r21, 0xFF	; 255
    263a:	61 2f       	mov	r22, r17
    263c:	85 e0       	ldi	r24, 0x05	; 5
    263e:	0e 94 cf 0b 	call	0x179e	; 0x179e <SetBit>
    libRFM69_WriteRegister(REG_AFCCTRL, register_content);
    2642:	69 81       	ldd	r22, Y+1	; 0x01
    2644:	8b e0       	ldi	r24, 0x0B	; 11
    2646:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>

    return;
}
    264a:	0f 90       	pop	r0
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	08 95       	ret

00002654 <libRFM69_IsAFCLowBetaEnabled>:
///
/// @param None
/// @return bool True if enabled, otherwise false.
///
bool libRFM69_IsAFCLowBetaEnabled(void)
{
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	1f 92       	push	r1
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    265e:	be 01       	movw	r22, r28
    2660:	6f 5f       	subi	r22, 0xFF	; 255
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	8b e0       	ldi	r24, 0x0B	; 11
    2666:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    266a:	99 81       	ldd	r25, Y+1	; 0x01
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	95 ff       	sbrs	r25, 5
    2670:	80 e0       	ldi	r24, 0x00	; 0
/// @return bool True if enabled, otherwise false.
///
bool libRFM69_IsAFCLowBetaEnabled(void)
{
    return IsBitSetInRegister(REG_AFCCTRL, 5);
}
    2672:	0f 90       	pop	r0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <libRFM69_EnableContinuousDAGC>:
///
void libRFM69_EnableContinuousDAGC(bool enabled)
{
    uint8_t register_content;

    if (enabled)
    267a:	88 23       	and	r24, r24
    267c:	31 f0       	breq	.+12     	; 0x268a <libRFM69_EnableContinuousDAGC+0x10>
    {
        register_content = libRFM69_IsAFCLowBetaEnabled() == true ?
    267e:	0e 94 2a 13 	call	0x2654	; 0x2654 <libRFM69_IsAFCLowBetaEnabled>
    2682:	88 23       	and	r24, r24
    2684:	21 f0       	breq	.+8      	; 0x268e <libRFM69_EnableContinuousDAGC+0x14>
    2686:	60 e2       	ldi	r22, 0x20	; 32
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <libRFM69_EnableContinuousDAGC+0x16>
                           RF_DAGC_IMPROVED_LOWBETA1 : RF_DAGC_IMPROVED_LOWBETA0;
    }
    else
    {
        register_content = RF_DAGC_NORMAL;
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <libRFM69_EnableContinuousDAGC+0x16>
{
    uint8_t register_content;

    if (enabled)
    {
        register_content = libRFM69_IsAFCLowBetaEnabled() == true ?
    268e:	60 e3       	ldi	r22, 0x30	; 48
    else
    {
        register_content = RF_DAGC_NORMAL;
    }

    libRFM69_WriteRegister(REG_TESTDAGC, register_content);
    2690:	8f e6       	ldi	r24, 0x6F	; 111
    2692:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    2696:	08 95       	ret

00002698 <libRFM69_IsTxReady>:
    libRFM69_ReadRegister(REG_IRQFLAGS1, &register_content);
    return (register_content & RF_IRQFLAGS1_RXREADY) == RF_IRQFLAGS1_RXREADY;
}

bool libRFM69_IsTxReady(void)
{
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	1f 92       	push	r1
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    26a2:	be 01       	movw	r22, r28
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	87 e2       	ldi	r24, 0x27	; 39
    26aa:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    26ae:	99 81       	ldd	r25, Y+1	; 0x01
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	95 ff       	sbrs	r25, 5
    26b4:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsTxReady(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS1, 5);
}
    26b6:	0f 90       	pop	r0
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	08 95       	ret

000026be <libRFM69_IsOCPEnabled>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_CRCOK);
}

bool libRFM69_IsOCPEnabled(void)
{
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	1f 92       	push	r1
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    26c8:	be 01       	movw	r22, r28
    26ca:	6f 5f       	subi	r22, 0xFF	; 255
    26cc:	7f 4f       	sbci	r23, 0xFF	; 255
    26ce:	83 e1       	ldi	r24, 0x13	; 19
    26d0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    26d4:	99 81       	ldd	r25, Y+1	; 0x01
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	94 ff       	sbrs	r25, 4
    26da:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsOCPEnabled(void)
{
    return IsBitSetInRegister(REG_OCP, 4);
}
    26dc:	0f 90       	pop	r0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <libRFM69_EnableHighPowerSetting>:
/// @param  enable Enable/disable
/// @return None
///
void libRFM69_EnableHighPowerSetting(bool enable)
{
    if (enable == true)
    26e4:	88 23       	and	r24, r24
    26e6:	d9 f0       	breq	.+54     	; 0x271e <libRFM69_EnableHighPowerSetting+0x3a>
    {

#ifdef DEBUG_ENABLE
        if (libRFM69_IsOCPEnabled() == true)
    26e8:	0e 94 5f 13 	call	0x26be	; 0x26be <libRFM69_IsOCPEnabled>
    26ec:	88 23       	and	r24, r24
    26ee:	71 f0       	breq	.+28     	; 0x270c <libRFM69_EnableHighPowerSetting+0x28>
        {
            WARNING("OCP must be disabled while in high power mode");
    26f0:	8f e5       	ldi	r24, 0x5F	; 95
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	9f 93       	push	r25
    26f6:	8f 93       	push	r24
    26f8:	88 e8       	ldi	r24, 0x88	; 136
    26fa:	93 e0       	ldi	r25, 0x03	; 3
    26fc:	9f 93       	push	r25
    26fe:	8f 93       	push	r24
    2700:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
        }
#endif

        libRFM69_WriteRegister(REG_TESTPA1, 0x5D);
    270c:	6d e5       	ldi	r22, 0x5D	; 93
    270e:	8a e5       	ldi	r24, 0x5A	; 90
    2710:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
        libRFM69_WriteRegister(REG_TESTPA2, 0x7C);
    2714:	6c e7       	ldi	r22, 0x7C	; 124
    2716:	8c e5       	ldi	r24, 0x5C	; 92
    2718:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    271c:	08 95       	ret
    }
    else
    {
        libRFM69_WriteRegister(REG_TESTPA1, 0x55);
    271e:	65 e5       	ldi	r22, 0x55	; 85
    2720:	8a e5       	ldi	r24, 0x5A	; 90
    2722:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
        libRFM69_WriteRegister(REG_TESTPA2, 0x70);
    2726:	60 e7       	ldi	r22, 0x70	; 112
    2728:	8c e5       	ldi	r24, 0x5C	; 92
    272a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <libRFM69_WriteRegister>
    272e:	08 95       	ret

00002730 <libRFM69_IsPayloadReady>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PACKETSENT);
}

bool libRFM69_IsPayloadReady(void)
{
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	1f 92       	push	r1
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    273a:	be 01       	movw	r22, r28
    273c:	6f 5f       	subi	r22, 0xFF	; 255
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	88 e2       	ldi	r24, 0x28	; 40
    2742:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    2746:	99 81       	ldd	r25, Y+1	; 0x01
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	92 ff       	sbrs	r25, 2
    274c:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsPayloadReady(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PAYLOADREADY);
}
    274e:	0f 90       	pop	r0
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <libRFM69_IsPacketSent>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOOVERRUN);
}

bool libRFM69_IsPacketSent(void)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	1f 92       	push	r1
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    2760:	be 01       	movw	r22, r28
    2762:	6f 5f       	subi	r22, 0xFF	; 255
    2764:	7f 4f       	sbci	r23, 0xFF	; 255
    2766:	88 e2       	ldi	r24, 0x28	; 40
    2768:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    276c:	99 81       	ldd	r25, Y+1	; 0x01
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	93 ff       	sbrs	r25, 3
    2772:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsPacketSent(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_PACKETSENT);
}
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	08 95       	ret

0000277c <libRFM69_IsFIFONotEmpty>:
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFOFULL);
}

bool libRFM69_IsFIFONotEmpty(void)
{
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	1f 92       	push	r1
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    sc_assert(bit <= 7);
    sc_assert(address <= REG_TESTPA2);

    uint8_t register_content;

    libRFM69_ReadRegister(address, &register_content);
    2786:	be 01       	movw	r22, r28
    2788:	6f 5f       	subi	r22, 0xFF	; 255
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	88 e2       	ldi	r24, 0x28	; 40
    278e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
    return ((register_content & (1 << bit)) > 0);
    2792:	99 81       	ldd	r25, Y+1	; 0x01
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	96 ff       	sbrs	r25, 6
    2798:	80 e0       	ldi	r24, 0x00	; 0
}

bool libRFM69_IsFIFONotEmpty(void)
{
    return IsBitSetInRegister(REG_IRQFLAGS2, REG_IRQFLAGS2_BIT_FIFONOTEMPTY);
}
    279a:	0f 90       	pop	r0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <libRFM69_ReadFromFIFO>:
/// @param  data Pointer to buffer where the FIFO data will be stored.
/// @param  max_length Max number of bytes to read.
/// @return uint8_t Number of bytes read.
///
uint8_t libRFM69_ReadFromFIFO(uint8_t *data, uint8_t max_length)
{
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	06 2f       	mov	r16, r22
    27ac:	ec 01       	movw	r28, r24
    uint8_t index = 0;
    27ae:	10 e0       	ldi	r17, 0x00	; 0

    while (libRFM69_IsFIFONotEmpty() && index < max_length)
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <libRFM69_ReadFromFIFO+0x1c>
    {
        libRFM69_ReadRegister(REG_FIFO, &data[index]);
    27b2:	be 01       	movw	r22, r28
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <libRFM69_ReadRegister>
        ++index;
    27ba:	1f 5f       	subi	r17, 0xFF	; 255
    27bc:	21 96       	adiw	r28, 0x01	; 1
///
uint8_t libRFM69_ReadFromFIFO(uint8_t *data, uint8_t max_length)
{
    uint8_t index = 0;

    while (libRFM69_IsFIFONotEmpty() && index < max_length)
    27be:	0e 94 be 13 	call	0x277c	; 0x277c <libRFM69_IsFIFONotEmpty>
    27c2:	88 23       	and	r24, r24
    27c4:	11 f0       	breq	.+4      	; 0x27ca <libRFM69_ReadFromFIFO+0x28>
    27c6:	10 13       	cpse	r17, r16
    27c8:	f4 cf       	rjmp	.-24     	; 0x27b2 <libRFM69_ReadFromFIFO+0x10>
        libRFM69_ReadRegister(REG_FIFO, &data[index]);
        ++index;
    }

    return index;
}
    27ca:	81 2f       	mov	r24, r17
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <libSPI_WriteByte>:
/// @param  post_write Pointer to function called after writing
/// @return None
///
void libSPI_WriteByte(uint8_t data_byte, libSPI_callback_type pre_write,
                      libSPI_callback_type post_write)
{
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	18 2f       	mov	r17, r24
    27de:	ea 01       	movw	r28, r20
    if (pre_write != NULL)
    27e0:	61 15       	cp	r22, r1
    27e2:	71 05       	cpc	r23, r1
    27e4:	11 f0       	breq	.+4      	; 0x27ea <libSPI_WriteByte+0x14>
    {
        pre_write();
    27e6:	fb 01       	movw	r30, r22
    27e8:	09 95       	icall
    }

    SPI_Write(data_byte);
    27ea:	1e bd       	out	0x2e, r17	; 46
    27ec:	0d b4       	in	r0, 0x2d	; 45
    27ee:	07 fe       	sbrs	r0, 7
    27f0:	fd cf       	rjmp	.-6      	; 0x27ec <libSPI_WriteByte+0x16>

    if (post_write != NULL)
    27f2:	20 97       	sbiw	r28, 0x00	; 0
    27f4:	11 f0       	breq	.+4      	; 0x27fa <libSPI_WriteByte+0x24>
    {
        post_write();
    27f6:	fe 01       	movw	r30, r28
    27f8:	09 95       	icall
    }
    return;
}
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	08 95       	ret

00002802 <libSPI_ReadByte>:
/// @param  post_read Pointer to function called after reading
/// @return None
///
void libSPI_ReadByte(uint8_t *data_byte, libSPI_callback_type pre_read,
                     libSPI_callback_type post_read)
{
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	8c 01       	movw	r16, r24
    280c:	ea 01       	movw	r28, r20
    if (pre_read != NULL)
    280e:	61 15       	cp	r22, r1
    2810:	71 05       	cpc	r23, r1
    2812:	11 f0       	breq	.+4      	; 0x2818 <libSPI_ReadByte+0x16>
    {
        pre_read();
    2814:	fb 01       	movw	r30, r22
    2816:	09 95       	icall
    }

    SPI_Read(*data_byte);
    2818:	1e bc       	out	0x2e, r1	; 46
    281a:	0d b4       	in	r0, 0x2d	; 45
    281c:	07 fe       	sbrs	r0, 7
    281e:	fd cf       	rjmp	.-6      	; 0x281a <libSPI_ReadByte+0x18>
    2820:	8e b5       	in	r24, 0x2e	; 46
    2822:	f8 01       	movw	r30, r16
    2824:	80 83       	st	Z, r24

    if (post_read != NULL)
    2826:	20 97       	sbiw	r28, 0x00	; 0
    2828:	11 f0       	breq	.+4      	; 0x282e <libSPI_ReadByte+0x2c>
    {
        post_read();
    282a:	fe 01       	movw	r30, r28
    282c:	09 95       	icall
    }
    return;
}
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

00002838 <libSPI_SetMaster>:
/// @param bool true if master, else slave  //TODO: Fix this description
/// @return None
///
void libSPI_SetMaster(bool master_value)
{
    if (master_value == true)
    2838:	88 23       	and	r24, r24
    283a:	21 f0       	breq	.+8      	; 0x2844 <libSPI_SetMaster+0xc>
    {
        SPCR |= (1 << MSTR);
    283c:	8c b5       	in	r24, 0x2c	; 44
    283e:	80 61       	ori	r24, 0x10	; 16
    2840:	8c bd       	out	0x2c, r24	; 44
    2842:	08 95       	ret
    }
    else
    {
        SPCR &= ~(1 << MSTR);
    2844:	8c b5       	in	r24, 0x2c	; 44
    2846:	8f 7e       	andi	r24, 0xEF	; 239
    2848:	8c bd       	out	0x2c, r24	; 44
    284a:	08 95       	ret

0000284c <libSPI_SetMode>:
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    switch (mode)
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	59 f0       	breq	.+22     	; 0x2866 <libSPI_SetMode+0x1a>
    2850:	28 f0       	brcs	.+10     	; 0x285c <libSPI_SetMode+0x10>
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	81 f0       	breq	.+32     	; 0x2876 <libSPI_SetMode+0x2a>
    2856:	83 30       	cpi	r24, 0x03	; 3
    2858:	b1 f0       	breq	.+44     	; 0x2886 <libSPI_SetMode+0x3a>
    285a:	1a c0       	rjmp	.+52     	; 0x2890 <libSPI_SetMode+0x44>
    {
        case 0:
            //Clock low when idle, sample on rising edge
            SPCR &= ~((1 << CPOL) | (1 << CPHA));
    285c:	8c b5       	in	r24, 0x2c	; 44
    285e:	83 7f       	andi	r24, 0xF3	; 243
    2860:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    switch (mode)
    {
        case 0:
            //Clock low when idle, sample on rising edge
            SPCR &= ~((1 << CPOL) | (1 << CPHA));
            break;
    2864:	08 95       	ret
        case 1:
            //Clock low when idle, sample on falling edge
            SPCR &= ~(1 << CPOL);
    2866:	8c b5       	in	r24, 0x2c	; 44
    2868:	87 7f       	andi	r24, 0xF7	; 247
    286a:	8c bd       	out	0x2c, r24	; 44
            SPCR |= (1 << CPHA);
    286c:	8c b5       	in	r24, 0x2c	; 44
    286e:	84 60       	ori	r24, 0x04	; 4
    2870:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    2872:	81 e0       	ldi	r24, 0x01	; 1
            break;
        case 1:
            //Clock low when idle, sample on falling edge
            SPCR &= ~(1 << CPOL);
            SPCR |= (1 << CPHA);
            break;
    2874:	08 95       	ret
        case 2:
            //Clock high when idle, sample on rising edge
            SPCR |= (1 << CPOL);
    2876:	8c b5       	in	r24, 0x2c	; 44
    2878:	88 60       	ori	r24, 0x08	; 8
    287a:	8c bd       	out	0x2c, r24	; 44
            SPCR &= ~(1 << CPHA);
    287c:	8c b5       	in	r24, 0x2c	; 44
    287e:	8b 7f       	andi	r24, 0xFB	; 251
    2880:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    2882:	81 e0       	ldi	r24, 0x01	; 1
            break;
        case 2:
            //Clock high when idle, sample on rising edge
            SPCR |= (1 << CPOL);
            SPCR &= ~(1 << CPHA);
            break;
    2884:	08 95       	ret
        case 3:
            //Clock high when idle, sample on falling edge
            SPCR |= ((1 << CPOL) | (1 << CPHA));
    2886:	8c b5       	in	r24, 0x2c	; 44
    2888:	8c 60       	ori	r24, 0x0C	; 12
    288a:	8c bd       	out	0x2c, r24	; 44
/// @param mode SPI mode, (0-3)
/// @return bool Status of operation
///
bool libSPI_SetMode(uint8_t mode)
{
    bool status = true;
    288c:	81 e0       	ldi	r24, 0x01	; 1
            SPCR &= ~(1 << CPHA);
            break;
        case 3:
            //Clock high when idle, sample on falling edge
            SPCR |= ((1 << CPOL) | (1 << CPHA));
            break;
    288e:	08 95       	ret
        default:
            //Invalid mode
            WARNING("Invalid SPI-mode");
    2890:	81 ec       	ldi	r24, 0xC1	; 193
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	9f 93       	push	r25
    2896:	8f 93       	push	r24
    2898:	86 e4       	ldi	r24, 0x46	; 70
    289a:	96 e0       	ldi	r25, 0x06	; 6
    289c:	9f 93       	push	r25
    289e:	8f 93       	push	r24
    28a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            status = false;
            break;
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
            SPCR |= ((1 << CPOL) | (1 << CPHA));
            break;
        default:
            //Invalid mode
            WARNING("Invalid SPI-mode");
            status = false;
    28ac:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return status;
}
    28ae:	08 95       	ret

000028b0 <libSPI_Init>:
///
/// @param  None
/// @return None
///
void libSPI_Init(uint8_t spi_mode)
{
    28b0:	cf 93       	push	r28
    28b2:	c8 2f       	mov	r28, r24
    //Always set SS as output even if not used, otherwise the device can't
    //act as master.
    DDRB |= ((1 << MOSI) | (1 << SCK) | (1 << SS));
    28b4:	84 b1       	in	r24, 0x04	; 4
    28b6:	8c 62       	ori	r24, 0x2C	; 44
    28b8:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~(1 << MISO);
    28ba:	24 98       	cbi	0x04, 4	; 4

    SPCR = (1 << SPR0);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	8c bd       	out	0x2c, r24	; 44

    libSPI_SetMaster(true);
    28c0:	0e 94 1c 14 	call	0x2838	; 0x2838 <libSPI_SetMaster>

    if (libSPI_SetMode(spi_mode) == true)
    28c4:	8c 2f       	mov	r24, r28
    28c6:	0e 94 26 14 	call	0x284c	; 0x284c <libSPI_SetMode>
    28ca:	88 23       	and	r24, r24
    28cc:	a1 f0       	breq	.+40     	; 0x28f6 <libSPI_Init+0x46>
    {
        SPCR |= (1 << SPE);
    28ce:	8c b5       	in	r24, 0x2c	; 44
    28d0:	80 64       	ori	r24, 0x40	; 64
    28d2:	8c bd       	out	0x2c, r24	; 44
        spi_status = IDLE;
    28d4:	10 92 5b 03 	sts	0x035B, r1

        INFO("Init done");
    28d8:	80 ed       	ldi	r24, 0xD0	; 208
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	9f 93       	push	r25
    28de:	8f 93       	push	r24
    28e0:	8c e9       	ldi	r24, 0x9C	; 156
    28e2:	96 e0       	ldi	r25, 0x06	; 6
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	12 c0       	rjmp	.+36     	; 0x291a <libSPI_Init+0x6a>
    }
    else
    {
        ERROR("Failed to init SPI, invalid mode: %u", spi_mode);
    28f6:	1f 92       	push	r1
    28f8:	cf 93       	push	r28
    28fa:	80 ed       	ldi	r24, 0xD0	; 208
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	9f 93       	push	r25
    2900:	8f 93       	push	r24
    2902:	88 e6       	ldi	r24, 0x68	; 104
    2904:	96 e0       	ldi	r25, 0x06	; 6
    2906:	9f 93       	push	r25
    2908:	8f 93       	push	r24
    290a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    }

    slave_active = false;
    291a:	10 92 5a 03 	sts	0x035A, r1
    return;
}
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <__vector_14>:
//////////////////////////////////////////////////////////////////////////
//INTERUPT SERVICE ROUTINES
//////////////////////////////////////////////////////////////////////////

ISR(TIMER0_COMPA_vect)
{
    2922:	1f 92       	push	r1
    2924:	0f 92       	push	r0
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	0f 92       	push	r0
    292a:	11 24       	eor	r1, r1
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    ++system_timer;
    2934:	80 91 46 07 	lds	r24, 0x0746
    2938:	90 91 47 07 	lds	r25, 0x0747
    293c:	a0 91 48 07 	lds	r26, 0x0748
    2940:	b0 91 49 07 	lds	r27, 0x0749
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	a1 1d       	adc	r26, r1
    2948:	b1 1d       	adc	r27, r1
    294a:	80 93 46 07 	sts	0x0746, r24
    294e:	90 93 47 07 	sts	0x0747, r25
    2952:	a0 93 48 07 	sts	0x0748, r26
    2956:	b0 93 49 07 	sts	0x0749, r27
}
    295a:	bf 91       	pop	r27
    295c:	af 91       	pop	r26
    295e:	9f 91       	pop	r25
    2960:	8f 91       	pop	r24
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0f 90       	pop	r0
    2968:	1f 90       	pop	r1
    296a:	18 95       	reti

0000296c <libTimer_Init>:
/// @param  None
/// @return None
///
void libTimer_Init()
{
    system_timer = 0;
    296c:	10 92 46 07 	sts	0x0746, r1
    2970:	10 92 47 07 	sts	0x0747, r1
    2974:	10 92 48 07 	sts	0x0748, r1
    2978:	10 92 49 07 	sts	0x0749, r1

    //Set CTC-mode
    TCCR0A |= (1 << WGM01);
    297c:	84 b5       	in	r24, 0x24	; 36
    297e:	82 60       	ori	r24, 0x02	; 2
    2980:	84 bd       	out	0x24, r24	; 36

#if F_CPU == 8000000
    //Set prescaler to 64
    TCCR0B |= (1 << CS00 | 1 << CS01);
    2982:	85 b5       	in	r24, 0x25	; 37
    2984:	83 60       	ori	r24, 0x03	; 3
    2986:	85 bd       	out	0x25, r24	; 37

    //Set compare value
    OCR0A = 125;
    2988:	8d e7       	ldi	r24, 0x7D	; 125
    298a:	87 bd       	out	0x27, r24	; 39
#else
#error "Unsupported frequency"
#endif

    //Enabled interrupt on compare match A
    TIMSK0 |= (1 << OCIE0A);
    298c:	ee e6       	ldi	r30, 0x6E	; 110
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	82 60       	ori	r24, 0x02	; 2
    2994:	80 83       	st	Z, r24

    //TODO: Can this global interrupt enable cause problems?
    sei();
    2996:	78 94       	sei
    2998:	08 95       	ret

0000299a <libTimer_GetMilliseconds>:
///
uint32_t libTimer_GetMilliseconds()
{
    uint32_t current_timer;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    299a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    299c:	f8 94       	cli
    {
        current_timer = system_timer;
    299e:	60 91 46 07 	lds	r22, 0x0746
    29a2:	70 91 47 07 	lds	r23, 0x0747
    29a6:	80 91 48 07 	lds	r24, 0x0748
    29aa:	90 91 49 07 	lds	r25, 0x0749
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29ae:	2f bf       	out	0x3f, r18	; 63
    }

    return current_timer;
}
    29b0:	08 95       	ret

000029b2 <__vector_18>:
//////////////////////////////////////////////////////////////////////////
//INTERUPT SERVICE ROUTINES
//////////////////////////////////////////////////////////////////////////

ISR(USART_RX_vect)
{
    29b2:	1f 92       	push	r1
    29b4:	0f 92       	push	r0
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	0f 92       	push	r0
    29ba:	11 24       	eor	r1, r1
    29bc:	2f 93       	push	r18
    29be:	3f 93       	push	r19
    29c0:	4f 93       	push	r20
    29c2:	5f 93       	push	r21
    29c4:	6f 93       	push	r22
    29c6:	7f 93       	push	r23
    29c8:	8f 93       	push	r24
    29ca:	9f 93       	push	r25
    29cc:	af 93       	push	r26
    29ce:	bf 93       	push	r27
    29d0:	ef 93       	push	r30
    29d2:	ff 93       	push	r31
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	1f 92       	push	r1
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = UDR0;
    29de:	80 91 c6 00 	lds	r24, 0x00C6
    29e2:	89 83       	std	Y+1, r24	; 0x01
    if (rx_handler != NULL)
    29e4:	e0 91 5e 03 	lds	r30, 0x035E
    29e8:	f0 91 5f 03 	lds	r31, 0x035F
    29ec:	30 97       	sbiw	r30, 0x00	; 0
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <__vector_18+0x44>
    {
        rx_handler(&data);
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	09 95       	icall
    }
}
    29f6:	0f 90       	pop	r0
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	ff 91       	pop	r31
    29fe:	ef 91       	pop	r30
    2a00:	bf 91       	pop	r27
    2a02:	af 91       	pop	r26
    2a04:	9f 91       	pop	r25
    2a06:	8f 91       	pop	r24
    2a08:	7f 91       	pop	r23
    2a0a:	6f 91       	pop	r22
    2a0c:	5f 91       	pop	r21
    2a0e:	4f 91       	pop	r20
    2a10:	3f 91       	pop	r19
    2a12:	2f 91       	pop	r18
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	0f 90       	pop	r0
    2a1a:	1f 90       	pop	r1
    2a1c:	18 95       	reti

00002a1e <__vector_19>:

ISR(USART_UDRE_vect)
{
    2a1e:	1f 92       	push	r1
    2a20:	0f 92       	push	r0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	0f 92       	push	r0
    2a26:	11 24       	eor	r1, r1
    2a28:	2f 93       	push	r18
    2a2a:	3f 93       	push	r19
    2a2c:	4f 93       	push	r20
    2a2e:	5f 93       	push	r21
    2a30:	6f 93       	push	r22
    2a32:	7f 93       	push	r23
    2a34:	8f 93       	push	r24
    2a36:	9f 93       	push	r25
    2a38:	af 93       	push	r26
    2a3a:	bf 93       	push	r27
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	1f 92       	push	r1
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;

    if (tx_handler != NULL && tx_handler(&data))
    2a4a:	e0 91 5c 03 	lds	r30, 0x035C
    2a4e:	f0 91 5d 03 	lds	r31, 0x035D
    2a52:	30 97       	sbiw	r30, 0x00	; 0
    2a54:	49 f0       	breq	.+18     	; 0x2a68 <__vector_19+0x4a>
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	09 95       	icall
    2a5c:	88 23       	and	r24, r24
    2a5e:	21 f0       	breq	.+8      	; 0x2a68 <__vector_19+0x4a>
    {
        UDR0 = data;
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	80 93 c6 00 	sts	0x00C6, r24
    2a66:	05 c0       	rjmp	.+10     	; 0x2a72 <__vector_19+0x54>
    }
    else
    {
        UCSR0B &= ~(1<<UDRIE0);
    2a68:	e1 ec       	ldi	r30, 0xC1	; 193
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8f 7d       	andi	r24, 0xDF	; 223
    2a70:	80 83       	st	Z, r24
    }
}
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	ff 91       	pop	r31
    2a7a:	ef 91       	pop	r30
    2a7c:	bf 91       	pop	r27
    2a7e:	af 91       	pop	r26
    2a80:	9f 91       	pop	r25
    2a82:	8f 91       	pop	r24
    2a84:	7f 91       	pop	r23
    2a86:	6f 91       	pop	r22
    2a88:	5f 91       	pop	r21
    2a8a:	4f 91       	pop	r20
    2a8c:	3f 91       	pop	r19
    2a8e:	2f 91       	pop	r18
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	0f 90       	pop	r0
    2a96:	1f 90       	pop	r1
    2a98:	18 95       	reti

00002a9a <libUART_Init>:
/// @return None
///
void libUART_Init(void)
{
    //Set frame format: 1 stop bit 8 data
    UCSR0C =  (3 << UCSZ00);
    2a9a:	86 e0       	ldi	r24, 0x06	; 6
    2a9c:	80 93 c2 00 	sts	0x00C2, r24
    2aa0:	08 95       	ret

00002aa2 <libUART_SetCallbacks>:
/// @return None
///
void libUART_SetCallbacks(libUART_isr_callback rx_callback,
                          libUART_isr_callback tx_callback)
{
    rx_handler = rx_callback;
    2aa2:	90 93 5f 03 	sts	0x035F, r25
    2aa6:	80 93 5e 03 	sts	0x035E, r24
    tx_handler = tx_callback;
    2aaa:	70 93 5d 03 	sts	0x035D, r23
    2aae:	60 93 5c 03 	sts	0x035C, r22
    2ab2:	08 95       	ret

00002ab4 <libUART_Enable>:
/// @param  enable True to enable, otherwise false.
/// @return None
///
void libUART_Enable(bool enable)
{
    if (enable == true)
    2ab4:	88 23       	and	r24, r24
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <libUART_Enable+0x10>
    {
        //PRR &= ~(1 << PRUSART0);
        UCSR0B |= ((1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0));
    2ab8:	e1 ec       	ldi	r30, 0xC1	; 193
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	88 69       	ori	r24, 0x98	; 152
    2ac0:	80 83       	st	Z, r24
    2ac2:	08 95       	ret
    }
    else
    {
        UCSR0B &= ~((1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0));
    2ac4:	e1 ec       	ldi	r30, 0xC1	; 193
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	87 76       	andi	r24, 0x67	; 103
    2acc:	80 83       	st	Z, r24
    2ace:	08 95       	ret

00002ad0 <libUART_StartTx>:
/// @param  None
/// @return None
///
void libUART_StartTx(void)
{
    UCSR0B |= (1<<UDRIE0);
    2ad0:	e1 ec       	ldi	r30, 0xC1	; 193
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 62       	ori	r24, 0x20	; 32
    2ad8:	80 83       	st	Z, r24
    2ada:	08 95       	ret

00002adc <libUART_SetBaudRate>:
///
/// @param  baud Baud rate to set.
/// @return bool True if baud rate is valid, otherwise false.
///
bool libUART_SetBaudRate(uint32_t baud)
{
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    bool status = false;
    uint32_t tmp = DIV_MUL * baud;
    2ae0:	8b 01       	movw	r16, r22
    2ae2:	9c 01       	movw	r18, r24
    2ae4:	00 0f       	add	r16, r16
    2ae6:	11 1f       	adc	r17, r17
    2ae8:	22 1f       	adc	r18, r18
    2aea:	33 1f       	adc	r19, r19
    2aec:	00 0f       	add	r16, r16
    2aee:	11 1f       	adc	r17, r17
    2af0:	22 1f       	adc	r18, r18
    2af2:	33 1f       	adc	r19, r19
    2af4:	a9 01       	movw	r20, r18
    2af6:	98 01       	movw	r18, r16
    2af8:	22 0f       	add	r18, r18
    2afa:	33 1f       	adc	r19, r19
    2afc:	44 1f       	adc	r20, r20
    2afe:	55 1f       	adc	r21, r21
    2b00:	22 0f       	add	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	44 1f       	adc	r20, r20
    2b06:	55 1f       	adc	r21, r21

    //Check for overflow and invalid baud rate
    if (tmp <= F_CPU && tmp > baud)
    2b08:	21 30       	cpi	r18, 0x01	; 1
    2b0a:	e2 e1       	ldi	r30, 0x12	; 18
    2b0c:	3e 07       	cpc	r19, r30
    2b0e:	ea e7       	ldi	r30, 0x7A	; 122
    2b10:	4e 07       	cpc	r20, r30
    2b12:	51 05       	cpc	r21, r1
    2b14:	f8 f4       	brcc	.+62     	; 0x2b54 <libUART_SetBaudRate+0x78>
    2b16:	62 17       	cp	r22, r18
    2b18:	73 07       	cpc	r23, r19
    2b1a:	84 07       	cpc	r24, r20
    2b1c:	95 07       	cpc	r25, r21
    2b1e:	e0 f4       	brcc	.+56     	; 0x2b58 <libUART_SetBaudRate+0x7c>
    {
        uint16_t UBRRn = CalculateUBRRn(baud);
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	74 eb       	ldi	r23, 0xB4	; 180
    2b24:	84 ec       	ldi	r24, 0xC4	; 196
    2b26:	94 e0       	ldi	r25, 0x04	; 4
    2b28:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	b9 01       	movw	r22, r18
    2b30:	65 50       	subi	r22, 0x05	; 5
    2b32:	71 09       	sbc	r23, r1
    2b34:	81 09       	sbc	r24, r1
    2b36:	91 09       	sbc	r25, r1
    2b38:	2a e0       	ldi	r18, 0x0A	; 10
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
        UBRR0H = (uint8_t)(UBRRn >> 8);
    2b44:	83 2f       	mov	r24, r19
    2b46:	99 27       	eor	r25, r25
    2b48:	80 93 c5 00 	sts	0x00C5, r24
        UBRR0L = (uint8_t)UBRRn;
    2b4c:	20 93 c4 00 	sts	0x00C4, r18
        status = true;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <libUART_SetBaudRate+0x7e>
/// @param  baud Baud rate to set.
/// @return bool True if baud rate is valid, otherwise false.
///
bool libUART_SetBaudRate(uint32_t baud)
{
    bool status = false;
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <libUART_SetBaudRate+0x7e>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
        UBRR0L = (uint8_t)UBRRn;
        status = true;
    }

    return status;
}
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	08 95       	ret

00002b60 <RTC_GetCurrentTime>:
///
/// @param  *time Pointer to struct where the result will be stored
/// @return bool true, if current time was successfully read, otherwise false.
///
bool RTC_GetCurrentTime(rtc_time_type *time)
{
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	ec 01       	movw	r28, r24
    sc_assert(time != NULL);
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	41 f4       	brne	.+16     	; 0x2b7a <RTC_GetCurrentTime+0x1a>
    2b6a:	41 e6       	ldi	r20, 0x61	; 97
    2b6c:	58 e0       	ldi	r21, 0x08	; 8
    2b6e:	62 e8       	ldi	r22, 0x82	; 130
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	86 e4       	ldi	r24, 0x46	; 70
    2b74:	98 e0       	ldi	r25, 0x08	; 8
    2b76:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    RTC_GetYear(&time->year);
    2b7a:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <libDS3234_GetYear>
    RTC_GetMonth(&time->month);
    2b7e:	ce 01       	movw	r24, r28
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	0e 94 22 26 	call	0x4c44	; 0x4c44 <libDS3234_GetMonth>
    RTC_GetDate(&time->date);
    2b86:	ce 01       	movw	r24, r28
    2b88:	02 96       	adiw	r24, 0x02	; 2
    2b8a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <libDS3234_GetDate>
    RTC_GetHour(&time->hour);
    2b8e:	ce 01       	movw	r24, r28
    2b90:	03 96       	adiw	r24, 0x03	; 3
    2b92:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <libDS3234_GetHour>
    RTC_GetMinutes(&time->minute);
    2b96:	ce 01       	movw	r24, r28
    2b98:	04 96       	adiw	r24, 0x04	; 4
    2b9a:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <libDS3234_GetMinutes>
    RTC_GetSeconds(&time->second);
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	05 96       	adiw	r24, 0x05	; 5
    2ba2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <libDS3234_GetSeconds>
    return true;
}
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	08 95       	ret

00002bae <RTC_IsDaylightSavingActive>:
/// @param  week_day Index of current week day, starting at Monday=1.
/// @return bool true if DST is active, otherwise false.
///
bool RTC_IsDaylightSavingActive(const rtc_time_type *time, uint8_t week_day)
{
    sc_assert(time != NULL);
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	41 f4       	brne	.+16     	; 0x2bc2 <RTC_IsDaylightSavingActive+0x14>
    2bb2:	49 e3       	ldi	r20, 0x39	; 57
    2bb4:	58 e0       	ldi	r21, 0x08	; 8
    2bb6:	6c eb       	ldi	r22, 0xBC	; 188
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	8e e1       	ldi	r24, 0x1E	; 30
    2bbc:	98 e0       	ldi	r25, 0x08	; 8
    2bbe:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    sc_assert(week_day <= 7);
    2bc2:	68 30       	cpi	r22, 0x08	; 8
    2bc4:	40 f0       	brcs	.+16     	; 0x2bd6 <RTC_IsDaylightSavingActive+0x28>
    2bc6:	40 e1       	ldi	r20, 0x10	; 16
    2bc8:	58 e0       	ldi	r21, 0x08	; 8
    2bca:	6d eb       	ldi	r22, 0xBD	; 189
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	85 ef       	ldi	r24, 0xF5	; 245
    2bd0:	97 e0       	ldi	r25, 0x07	; 7
    2bd2:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    bool dst_active;
    uint8_t next_sunday;

    if (time->month > MARCH && time->month < OCTOBER)
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	31 81       	ldd	r19, Z+1	; 0x01
    2bda:	2c ef       	ldi	r18, 0xFC	; 252
    2bdc:	23 0f       	add	r18, r19
    2bde:	26 30       	cpi	r18, 0x06	; 6
    2be0:	50 f1       	brcs	.+84     	; 0x2c36 <RTC_IsDaylightSavingActive+0x88>
    {
        dst_active = true;
    }
    else if (time->month < MARCH || time->month > OCTOBER)
    2be2:	2d ef       	ldi	r18, 0xFD	; 253
    2be4:	23 0f       	add	r18, r19
    2be6:	28 30       	cpi	r18, 0x08	; 8
    2be8:	40 f5       	brcc	.+80     	; 0x2c3a <RTC_IsDaylightSavingActive+0x8c>
    {
        dst_active = false;
    }
    else
    {
        next_sunday = time->date + (DAYS_IN_WEEK - week_day);
    2bea:	52 81       	ldd	r21, Z+2	; 0x02
    2bec:	25 2f       	mov	r18, r21
    2bee:	26 1b       	sub	r18, r22
    2bf0:	47 e0       	ldi	r20, 0x07	; 7
    2bf2:	42 0f       	add	r20, r18

        if (next_sunday < DAYS_IN_MARCH_OCTOBER)
    2bf4:	4f 31       	cpi	r20, 0x1F	; 31
    2bf6:	70 f4       	brcc	.+28     	; 0x2c14 <RTC_IsDaylightSavingActive+0x66>
        {
            while (next_sunday + DAYS_IN_WEEK < DAYS_IN_MARCH_OCTOBER)
    2bf8:	84 2f       	mov	r24, r20
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	07 96       	adiw	r24, 0x07	; 7
    2bfe:	4f 97       	sbiw	r24, 0x1f	; 31
    2c00:	44 f4       	brge	.+16     	; 0x2c12 <RTC_IsDaylightSavingActive+0x64>
    2c02:	24 2f       	mov	r18, r20
            {
                next_sunday += DAYS_IN_WEEK;
    2c04:	29 5f       	subi	r18, 0xF9	; 249
    {
        next_sunday = time->date + (DAYS_IN_WEEK - week_day);

        if (next_sunday < DAYS_IN_MARCH_OCTOBER)
        {
            while (next_sunday + DAYS_IN_WEEK < DAYS_IN_MARCH_OCTOBER)
    2c06:	82 2f       	mov	r24, r18
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	07 96       	adiw	r24, 0x07	; 7
    2c0c:	4f 97       	sbiw	r24, 0x1f	; 31
    2c0e:	d4 f3       	brlt	.-12     	; 0x2c04 <RTC_IsDaylightSavingActive+0x56>
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <RTC_IsDaylightSavingActive+0x66>
    2c12:	24 2f       	mov	r18, r20
        {
            next_sunday -= DAYS_IN_WEEK;
        }

        //TODO: Fix edge cases!
        dst_active = ((time->month == MARCH && time->date > next_sunday) ||
    2c14:	33 30       	cpi	r19, 0x03	; 3
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <RTC_IsDaylightSavingActive+0x74>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	25 17       	cp	r18, r21
    2c1c:	50 f0       	brcs	.+20     	; 0x2c32 <RTC_IsDaylightSavingActive+0x84>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	08 c0       	rjmp	.+16     	; 0x2c32 <RTC_IsDaylightSavingActive+0x84>
    2c22:	3a 30       	cpi	r19, 0x0A	; 10
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <RTC_IsDaylightSavingActive+0x82>
                      (time->month == OCTOBER && time->date < next_sunday));
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	52 17       	cp	r21, r18
    2c2a:	18 f0       	brcs	.+6      	; 0x2c32 <RTC_IsDaylightSavingActive+0x84>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <RTC_IsDaylightSavingActive+0x84>
        {
            next_sunday -= DAYS_IN_WEEK;
        }

        //TODO: Fix edge cases!
        dst_active = ((time->month == MARCH && time->date > next_sunday) ||
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	81 70       	andi	r24, 0x01	; 1
    2c34:	08 95       	ret
    bool dst_active;
    uint8_t next_sunday;

    if (time->month > MARCH && time->month < OCTOBER)
    {
        dst_active = true;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	08 95       	ret
    }
    else if (time->month < MARCH || time->month > OCTOBER)
    {
        dst_active = false;
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
        //TODO: Fix edge cases!
        dst_active = ((time->month == MARCH && time->date > next_sunday) ||
                      (time->month == OCTOBER && time->date < next_sunday));
    }
    return dst_active;
}
    2c3c:	08 95       	ret

00002c3e <RTC_IsLeapYear>:
///
/// @param  year Year to check.
/// @return bool true if leap year, otherwise false.
///
bool RTC_IsLeapYear(uint16_t year)
{
    2c3e:	ac 01       	movw	r20, r24
    bool is_leap_year = false;

    //All leap years are divisible by 4
    if (year % 4 == 0)
    2c40:	83 70       	andi	r24, 0x03	; 3
    2c42:	99 27       	eor	r25, r25
    2c44:	89 2b       	or	r24, r25
    2c46:	71 f5       	brne	.+92     	; 0x2ca4 <RTC_IsLeapYear+0x66>
    {
        if (year % 100 != 0 || year % 400 == 0)
    2c48:	9a 01       	movw	r18, r20
    2c4a:	36 95       	lsr	r19
    2c4c:	27 95       	ror	r18
    2c4e:	36 95       	lsr	r19
    2c50:	27 95       	ror	r18
    2c52:	ab e7       	ldi	r26, 0x7B	; 123
    2c54:	b4 e1       	ldi	r27, 0x14	; 20
    2c56:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    2c5a:	96 95       	lsr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	64 e6       	ldi	r22, 0x64	; 100
    2c60:	68 9f       	mul	r22, r24
    2c62:	90 01       	movw	r18, r0
    2c64:	69 9f       	mul	r22, r25
    2c66:	30 0d       	add	r19, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	42 17       	cp	r20, r18
    2c6c:	53 07       	cpc	r21, r19
    2c6e:	e1 f4       	brne	.+56     	; 0x2ca8 <RTC_IsLeapYear+0x6a>
    2c70:	9a 01       	movw	r18, r20
    2c72:	32 95       	swap	r19
    2c74:	22 95       	swap	r18
    2c76:	2f 70       	andi	r18, 0x0F	; 15
    2c78:	23 27       	eor	r18, r19
    2c7a:	3f 70       	andi	r19, 0x0F	; 15
    2c7c:	23 27       	eor	r18, r19
    2c7e:	ae e3       	ldi	r26, 0x3E	; 62
    2c80:	ba e0       	ldi	r27, 0x0A	; 10
    2c82:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    2c86:	20 e9       	ldi	r18, 0x90	; 144
    2c88:	31 e0       	ldi	r19, 0x01	; 1
    2c8a:	82 9f       	mul	r24, r18
    2c8c:	b0 01       	movw	r22, r0
    2c8e:	83 9f       	mul	r24, r19
    2c90:	70 0d       	add	r23, r0
    2c92:	92 9f       	mul	r25, r18
    2c94:	70 0d       	add	r23, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	46 17       	cp	r20, r22
    2c9c:	57 07       	cpc	r21, r23
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <RTC_IsLeapYear+0x6c>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	08 95       	ret
/// @param  year Year to check.
/// @return bool true if leap year, otherwise false.
///
bool RTC_IsLeapYear(uint16_t year)
{
    bool is_leap_year = false;
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	08 95       	ret
    //All leap years are divisible by 4
    if (year % 4 == 0)
    {
        if (year % 100 != 0 || year % 400 == 0)
        {
            is_leap_year = true;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return is_leap_year;
}
    2caa:	08 95       	ret

00002cac <RTC_AddYears>:
/// @param  years Number of years to add.
/// @return None
///
void RTC_AddYears(rtc_time_type *time, uint8_t years)
{
    sc_assert(time != NULL);
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	41 f4       	brne	.+16     	; 0x2cc0 <RTC_AddYears+0x14>
    2cb0:	43 e2       	ldi	r20, 0x23	; 35
    2cb2:	57 e0       	ldi	r21, 0x07	; 7
    2cb4:	68 e7       	ldi	r22, 0x78	; 120
    2cb6:	71 e0       	ldi	r23, 0x01	; 1
    2cb8:	88 e0       	ldi	r24, 0x08	; 8
    2cba:	97 e0       	ldi	r25, 0x07	; 7
    2cbc:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    time->year += years;
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	20 81       	ld	r18, Z
    2cc4:	62 0f       	add	r22, r18
    2cc6:	60 83       	st	Z, r22

    sc_assert(time->year < 100);
    2cc8:	64 36       	cpi	r22, 0x64	; 100
    2cca:	40 f0       	brcs	.+16     	; 0x2cdc <RTC_AddYears+0x30>
    2ccc:	47 ef       	ldi	r20, 0xF7	; 247
    2cce:	56 e0       	ldi	r21, 0x06	; 6
    2cd0:	6b e7       	ldi	r22, 0x7B	; 123
    2cd2:	71 e0       	ldi	r23, 0x01	; 1
    2cd4:	8c ed       	ldi	r24, 0xDC	; 220
    2cd6:	96 e0       	ldi	r25, 0x06	; 6
    2cd8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    2cdc:	08 95       	ret

00002cde <RTC_AddMonths>:
/// @param  *time Pointer to struct with time.
/// @param  months Number of months to add.
/// @return None
///
void RTC_AddMonths(rtc_time_type *time, uint8_t months)
{
    2cde:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	41 f4       	brne	.+16     	; 0x2cf4 <RTC_AddMonths+0x16>
    2ce4:	4b e4       	ldi	r20, 0x4B	; 75
    2ce6:	57 e0       	ldi	r21, 0x07	; 7
    2ce8:	62 e6       	ldi	r22, 0x62	; 98
    2cea:	71 e0       	ldi	r23, 0x01	; 1
    2cec:	80 e3       	ldi	r24, 0x30	; 48
    2cee:	97 e0       	ldi	r25, 0x07	; 7
    2cf0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry =  (time->month + months) / 12;
    2cf4:	21 81       	ldd	r18, Z+1	; 0x01
    2cf6:	86 2f       	mov	r24, r22
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	82 0f       	add	r24, r18
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	6c e0       	ldi	r22, 0x0C	; 12
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	0e 94 6d 2b 	call	0x56da	; 0x56da <__divmodhi4>
    time->month = (time->month + months) % 12;
    2d06:	81 83       	std	Z+1, r24	; 0x01

    if (carry > 0)
    2d08:	61 15       	cp	r22, r1
    2d0a:	71 05       	cpc	r23, r1
    2d0c:	19 f0       	breq	.+6      	; 0x2d14 <RTC_AddMonths+0x36>
    {
        RTC_AddYears(time, carry);
    2d0e:	cf 01       	movw	r24, r30
    2d10:	0e 94 56 16 	call	0x2cac	; 0x2cac <RTC_AddYears>
    2d14:	08 95       	ret

00002d16 <RTC_AddDays>:
/// @param  *time Pointer to struct with time.
/// @param  days Number of days to add.
/// @return None
///
void RTC_AddDays(rtc_time_type *time, uint8_t days)
{
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	ec 01       	movw	r28, r24
    2d20:	06 2f       	mov	r16, r22
    sc_assert(time != NULL);
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	41 f4       	brne	.+16     	; 0x2d36 <RTC_AddDays+0x20>
    2d26:	48 e9       	ldi	r20, 0x98	; 152
    2d28:	57 e0       	ldi	r21, 0x07	; 7
    2d2a:	62 e4       	ldi	r22, 0x42	; 66
    2d2c:	71 e0       	ldi	r23, 0x01	; 1
    2d2e:	8d e7       	ldi	r24, 0x7D	; 125
    2d30:	97 e0       	ldi	r25, 0x07	; 7
    2d32:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint16_t carry;
    uint8_t days_in_month;

    days_in_month = days_in_months[time->month - 1];
    2d36:	99 81       	ldd	r25, Y+1	; 0x01
    2d38:	e9 2f       	mov	r30, r25
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	e5 52       	subi	r30, 0x25	; 37
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	10 81       	ld	r17, Z
    if (time->month == FEBRUARY && RTC_IsLeapYear(2000 + (uint16_t)time->year))
    2d42:	92 30       	cpi	r25, 0x02	; 2
    2d44:	41 f4       	brne	.+16     	; 0x2d56 <RTC_AddDays+0x40>
    2d46:	88 81       	ld	r24, Y
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	80 53       	subi	r24, 0x30	; 48
    2d4c:	98 4f       	sbci	r25, 0xF8	; 248
    2d4e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <RTC_IsLeapYear>
    2d52:	81 11       	cpse	r24, r1
    {
        ++days_in_month;
    2d54:	1f 5f       	subi	r17, 0xFF	; 255
    }

    carry = (time->date + days) / days_in_month;
    2d56:	2a 81       	ldd	r18, Y+2	; 0x02
    2d58:	80 2f       	mov	r24, r16
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	82 0f       	add	r24, r18
    2d5e:	91 1d       	adc	r25, r1
    2d60:	61 2f       	mov	r22, r17
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	0e 94 6d 2b 	call	0x56da	; 0x56da <__divmodhi4>
    2d68:	26 2f       	mov	r18, r22
    2d6a:	37 2f       	mov	r19, r23
    time->date = (time->date + days) % days_in_month;
    2d6c:	8a 83       	std	Y+2, r24	; 0x02

    //TODO: Fix cases when carry > 1
    sc_assert(carry < 2);
    2d6e:	22 30       	cpi	r18, 0x02	; 2
    2d70:	31 05       	cpc	r19, r1
    2d72:	40 f0       	brcs	.+16     	; 0x2d84 <RTC_AddDays+0x6e>
    2d74:	43 e7       	ldi	r20, 0x73	; 115
    2d76:	57 e0       	ldi	r21, 0x07	; 7
    2d78:	60 e5       	ldi	r22, 0x50	; 80
    2d7a:	71 e0       	ldi	r23, 0x01	; 1
    2d7c:	88 e5       	ldi	r24, 0x58	; 88
    2d7e:	97 e0       	ldi	r25, 0x07	; 7
    2d80:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    if (carry > 0)
    2d84:	23 2b       	or	r18, r19
    2d86:	19 f0       	breq	.+6      	; 0x2d8e <RTC_AddDays+0x78>
    {
        RTC_AddMonths(time, carry);
    2d88:	ce 01       	movw	r24, r28
    2d8a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <RTC_AddMonths>
    }
    return;
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	08 95       	ret

00002d98 <RTC_AddHours>:
/// @param  *time Pointer to struct with time.
/// @param  hours Number of hours to add.
/// @return None
///
void RTC_AddHours(rtc_time_type *time, uint8_t hours)
{
    2d98:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	41 f4       	brne	.+16     	; 0x2dae <RTC_AddHours+0x16>
    2d9e:	40 ec       	ldi	r20, 0xC0	; 192
    2da0:	57 e0       	ldi	r21, 0x07	; 7
    2da2:	6c e2       	ldi	r22, 0x2C	; 44
    2da4:	71 e0       	ldi	r23, 0x01	; 1
    2da6:	85 ea       	ldi	r24, 0xA5	; 165
    2da8:	97 e0       	ldi	r25, 0x07	; 7
    2daa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry =  (time->hour + hours) / 24;
    2dae:	23 81       	ldd	r18, Z+3	; 0x03
    2db0:	86 2f       	mov	r24, r22
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	82 0f       	add	r24, r18
    2db6:	91 1d       	adc	r25, r1
    2db8:	68 e1       	ldi	r22, 0x18	; 24
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	0e 94 6d 2b 	call	0x56da	; 0x56da <__divmodhi4>
    time->hour = (time->hour + hours) % 24;
    2dc0:	83 83       	std	Z+3, r24	; 0x03

    if (carry > 0)
    2dc2:	61 15       	cp	r22, r1
    2dc4:	71 05       	cpc	r23, r1
    2dc6:	19 f0       	breq	.+6      	; 0x2dce <RTC_AddHours+0x36>
    {
        RTC_AddDays(time, carry);
    2dc8:	cf 01       	movw	r24, r30
    2dca:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <RTC_AddDays>
    2dce:	08 95       	ret

00002dd0 <RTC_AddMinutes>:
/// @param  *time Pointer to struct with time.
/// @param  minutes Number of minutes to add.
/// @return None
///
void RTC_AddMinutes(rtc_time_type *time, uint8_t minutes)
{
    2dd0:	fc 01       	movw	r30, r24
    sc_assert(time != NULL);
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	41 f4       	brne	.+16     	; 0x2de6 <RTC_AddMinutes+0x16>
    2dd6:	48 ee       	ldi	r20, 0xE8	; 232
    2dd8:	57 e0       	ldi	r21, 0x07	; 7
    2dda:	66 e1       	ldi	r22, 0x16	; 22
    2ddc:	71 e0       	ldi	r23, 0x01	; 1
    2dde:	8d ec       	ldi	r24, 0xCD	; 205
    2de0:	97 e0       	ldi	r25, 0x07	; 7
    2de2:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint16_t carry;

    carry = (time->minute + minutes) / 60;
    2de6:	24 81       	ldd	r18, Z+4	; 0x04
    2de8:	86 2f       	mov	r24, r22
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	82 0f       	add	r24, r18
    2dee:	91 1d       	adc	r25, r1
    2df0:	6c e3       	ldi	r22, 0x3C	; 60
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	0e 94 6d 2b 	call	0x56da	; 0x56da <__divmodhi4>
    time->minute = (time->minute + minutes) % 60;
    2df8:	84 83       	std	Z+4, r24	; 0x04

    if (carry > 0)
    2dfa:	61 15       	cp	r22, r1
    2dfc:	71 05       	cpc	r23, r1
    2dfe:	19 f0       	breq	.+6      	; 0x2e06 <RTC_AddMinutes+0x36>
    {
        RTC_AddHours(time, carry);
    2e00:	cf 01       	movw	r24, r30
    2e02:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <RTC_AddHours>
    2e06:	08 95       	ret

00002e08 <RTC_ConvertToTimestamp>:
///
/// @param  *time Pointer to time struct
/// @return uint32_t Timestamp in seconds
///
uint32_t RTC_ConvertToTimestamp(const rtc_time_type *time)
{
    2e08:	8f 92       	push	r8
    2e0a:	9f 92       	push	r9
    2e0c:	af 92       	push	r10
    2e0e:	bf 92       	push	r11
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	ec 01       	movw	r28, r24
    sc_assert(time != NULL);
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	41 f4       	brne	.+16     	; 0x2e36 <RTC_ConvertToTimestamp+0x2e>
    2e26:	4f ec       	ldi	r20, 0xCF	; 207
    2e28:	56 e0       	ldi	r21, 0x06	; 6
    2e2a:	6b e8       	ldi	r22, 0x8B	; 139
    2e2c:	71 e0       	ldi	r23, 0x01	; 1
    2e2e:	84 eb       	ldi	r24, 0xB4	; 180
    2e30:	96 e0       	ldi	r25, 0x06	; 6
    2e32:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint32_t tmp;
    int n, d, leaps;

    //Determine elapsed whole days since the epoch to the beginning of this year. Since our epoch is
    //at a conjunction of the leap cycles, we can do this rather quickly.
    n = time->year;
    2e36:	18 81       	ld	r17, Y
    2e38:	81 2f       	mov	r24, r17
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    leaps = 0;
    if (n)
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	e9 f0       	breq	.+58     	; 0x2e7a <RTC_ConvertToTimestamp+0x72>
    {
        uint32_t m;
        m = n - 1;
    2e40:	bc 01       	movw	r22, r24
    2e42:	61 50       	subi	r22, 0x01	; 1
    2e44:	71 09       	sbc	r23, r1
    2e46:	88 27       	eor	r24, r24
    2e48:	77 fd       	sbrc	r23, 7
    2e4a:	80 95       	com	r24
    2e4c:	98 2f       	mov	r25, r24
        leaps = m / 4;
    2e4e:	4b 01       	movw	r8, r22
    2e50:	5c 01       	movw	r10, r24
    2e52:	b6 94       	lsr	r11
    2e54:	a7 94       	ror	r10
    2e56:	97 94       	ror	r9
    2e58:	87 94       	ror	r8
    2e5a:	b6 94       	lsr	r11
    2e5c:	a7 94       	ror	r10
    2e5e:	97 94       	ror	r9
    2e60:	87 94       	ror	r8
        leaps -= m / 100;
    2e62:	24 e6       	ldi	r18, 0x64	; 100
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	50 e0       	ldi	r21, 0x00	; 0
    2e6a:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
    2e6e:	82 1a       	sub	r8, r18
    2e70:	93 0a       	sbc	r9, r19
        leaps++;
    2e72:	2f ef       	ldi	r18, 0xFF	; 255
    2e74:	82 1a       	sub	r8, r18
    2e76:	92 0a       	sbc	r9, r18
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <RTC_ConvertToTimestamp+0x76>
    int n, d, leaps;

    //Determine elapsed whole days since the epoch to the beginning of this year. Since our epoch is
    //at a conjunction of the leap cycles, we can do this rather quickly.
    n = time->year;
    leaps = 0;
    2e7a:	81 2c       	mov	r8, r1
    2e7c:	91 2c       	mov	r9, r1
        m = n - 1;
        leaps = m / 4;
        leaps -= m / 100;
        leaps++;
    }
    tmp = 365UL * n + leaps;
    2e7e:	aa 24       	eor	r10, r10
    2e80:	97 fc       	sbrc	r9, 7
    2e82:	a0 94       	com	r10
    2e84:	ba 2c       	mov	r11, r10
    2e86:	21 2f       	mov	r18, r17
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	ad e6       	ldi	r26, 0x6D	; 109
    2e8c:	b1 e0       	ldi	r27, 0x01	; 1
    2e8e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    2e92:	75 01       	movw	r14, r10
    2e94:	64 01       	movw	r12, r8
    2e96:	c6 0e       	add	r12, r22
    2e98:	d7 1e       	adc	r13, r23
    2e9a:	e8 1e       	adc	r14, r24
    2e9c:	f9 1e       	adc	r15, r25

    //Derive the day of year from month and day of month. We use the pattern of 31 day months
    //followed by 30 day months to our advantage, but we must 'special case' Jan/Feb, and
    //account for a 'phase change' between July and August (153 days after March 1).

    d = time->date - 1; //Date is one based
    2e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	59 01       	movw	r10, r18
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	a8 1a       	sub	r10, r24
    2ea8:	b1 08       	sbc	r11, r1

    //Handle Jan/Feb as a special case
    if (time->month < 2)
    2eaa:	09 81       	ldd	r16, Y+1	; 0x01
    2eac:	02 30       	cpi	r16, 0x02	; 2
    2eae:	38 f4       	brcc	.+14     	; 0x2ebe <RTC_ConvertToTimestamp+0xb6>
    {
        if (time->month)
    2eb0:	00 23       	and	r16, r16
    2eb2:	81 f1       	breq	.+96     	; 0x2f14 <RTC_ConvertToTimestamp+0x10c>
        {
            d += 31;
    2eb4:	59 01       	movw	r10, r18
    2eb6:	8e e1       	ldi	r24, 0x1E	; 30
    2eb8:	a8 0e       	add	r10, r24
    2eba:	b1 1c       	adc	r11, r1
    2ebc:	2b c0       	rjmp	.+86     	; 0x2f14 <RTC_ConvertToTimestamp+0x10c>
        }
    }
    else
    {
        uint32_t m;
        n = 59 + RTC_IsLeapYear((uint16_t)time->year + 2000);
    2ebe:	81 2f       	mov	r24, r17
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	80 53       	subi	r24, 0x30	; 48
    2ec4:	98 4f       	sbci	r25, 0xF8	; 248
    2ec6:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <RTC_IsLeapYear>
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	25 5c       	subi	r18, 0xC5	; 197
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
        d += n;
    2ed2:	a2 0e       	add	r10, r18
    2ed4:	b3 1e       	adc	r11, r19
        n = time->month - MARCH;
    2ed6:	80 2f       	mov	r24, r16
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	03 97       	sbiw	r24, 0x03	; 3

        //Account for phase change
        if (n > (JULY - MARCH))
    2edc:	85 30       	cpi	r24, 0x05	; 5
    2ede:	91 05       	cpc	r25, r1
    2ee0:	1c f0       	brlt	.+6      	; 0x2ee8 <RTC_ConvertToTimestamp+0xe0>
        {
            d += 153;
    2ee2:	29 e9       	ldi	r18, 0x99	; 153
    2ee4:	a2 0e       	add	r10, r18
    2ee6:	b1 1c       	adc	r11, r1
        }
        n %= 5;
    2ee8:	65 e0       	ldi	r22, 0x05	; 5
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	0e 94 6d 2b 	call	0x56da	; 0x56da <__divmodhi4>
    2ef0:	ac 01       	movw	r20, r24

        //n is now an index into a group of alternating 31 and 30
        //day months... 61 day pairs.
        m = n / 2;
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	99 23       	and	r25, r25
    2ef6:	0c f4       	brge	.+2      	; 0x2efa <RTC_ConvertToTimestamp+0xf2>
    2ef8:	11 96       	adiw	r26, 0x01	; 1
    2efa:	b5 95       	asr	r27
    2efc:	a7 95       	ror	r26
        m *= 61;
    2efe:	2d e3       	ldi	r18, 0x3D	; 61
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	0e 94 b2 2b 	call	0x5764	; 0x5764 <__usmulhisi3>
        d += m;
    2f06:	a6 0e       	add	r10, r22
    2f08:	b7 1e       	adc	r11, r23

        //if n is odd, we are in the second half of the month pair
        if (n & 1)
    2f0a:	40 ff       	sbrs	r20, 0
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <RTC_ConvertToTimestamp+0x10c>
        {
            d += 31;
    2f0e:	8f e1       	ldi	r24, 0x1F	; 31
    2f10:	a8 0e       	add	r10, r24
    2f12:	b1 1c       	adc	r11, r1
    }

    uint32_t return_value;

    //Add day of year to elapsed days, and convert to seconds
    tmp += d;
    2f14:	c5 01       	movw	r24, r10
    2f16:	aa 27       	eor	r26, r26
    2f18:	97 fd       	sbrc	r25, 7
    2f1a:	a0 95       	com	r26
    2f1c:	ba 2f       	mov	r27, r26
    2f1e:	a7 01       	movw	r20, r14
    2f20:	96 01       	movw	r18, r12
    2f22:	28 0f       	add	r18, r24
    2f24:	39 1f       	adc	r19, r25
    2f26:	4a 1f       	adc	r20, r26
    2f28:	5b 1f       	adc	r21, r27
    tmp *= ONE_DAY_S;
    2f2a:	60 e8       	ldi	r22, 0x80	; 128
    2f2c:	71 e5       	ldi	r23, 0x51	; 81
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 49 2b 	call	0x5692	; 0x5692 <__mulsi3>
    2f36:	6b 01       	movw	r12, r22
    2f38:	7c 01       	movw	r14, r24
    return_value = tmp;

    //Compute 'fractional' day
    tmp = time->hour;
    2f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    tmp *= ONE_HOUR_S;
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	a0 e1       	ldi	r26, 0x10	; 16
    2f40:	be e0       	ldi	r27, 0x0E	; 14
    2f42:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    2f46:	4b 01       	movw	r8, r22
    2f48:	5c 01       	movw	r10, r24
    tmp += time->minute * 60UL;
    2f4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	ac e3       	ldi	r26, 0x3C	; 60
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	88 0d       	add	r24, r8
    2f5c:	99 1d       	adc	r25, r9
    2f5e:	aa 1d       	adc	r26, r10
    2f60:	bb 1d       	adc	r27, r11
    tmp += time->second;
    2f62:	2d 81       	ldd	r18, Y+5	; 0x05
    2f64:	82 0f       	add	r24, r18
    2f66:	91 1d       	adc	r25, r1
    2f68:	a1 1d       	adc	r26, r1
    2f6a:	b1 1d       	adc	r27, r1

    return return_value += tmp;
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	6c 0d       	add	r22, r12
    2f72:	7d 1d       	adc	r23, r13
    2f74:	8e 1d       	adc	r24, r14
    2f76:	9f 1d       	adc	r25, r15
}
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	df 90       	pop	r13
    2f86:	cf 90       	pop	r12
    2f88:	bf 90       	pop	r11
    2f8a:	af 90       	pop	r10
    2f8c:	9f 90       	pop	r9
    2f8e:	8f 90       	pop	r8
    2f90:	08 95       	ret

00002f92 <RTC_GetTimeStamp>:
///
/// @param  *timestamp Pointer to timestamp where the result will be stored
/// @return bool true, if current time was successfully read, otherwise false.
///
bool RTC_GetTimeStamp(uint32_t *timestamp)
{
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <RTC_GetTimeStamp+0xc>
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <RTC_GetTimeStamp+0xe>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <RTC_GetTimeStamp+0x10>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	8c 01       	movw	r16, r24
    sc_assert(timestamp != NULL);
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	41 f4       	brne	.+16     	; 0x2fbc <RTC_GetTimeStamp+0x2a>
    2fac:	49 e8       	ldi	r20, 0x89	; 137
    2fae:	58 e0       	ldi	r21, 0x08	; 8
    2fb0:	6f e6       	ldi	r22, 0x6F	; 111
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	8e e6       	ldi	r24, 0x6E	; 110
    2fb6:	98 e0       	ldi	r25, 0x08	; 8
    2fb8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    rtc_time_type time;

    if (RTC_GetCurrentTime(&time) == true)
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <RTC_GetCurrentTime>
    2fc4:	f8 2e       	mov	r15, r24
    2fc6:	88 23       	and	r24, r24
    2fc8:	49 f0       	breq	.+18     	; 0x2fdc <RTC_GetTimeStamp+0x4a>
    {
        *timestamp = RTC_ConvertToTimestamp(&time);
    2fca:	ce 01       	movw	r24, r28
    2fcc:	01 96       	adiw	r24, 0x01	; 1
    2fce:	0e 94 04 17 	call	0x2e08	; 0x2e08 <RTC_ConvertToTimestamp>
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	60 83       	st	Z, r22
    2fd6:	71 83       	std	Z+1, r23	; 0x01
    2fd8:	82 83       	std	Z+2, r24	; 0x02
    2fda:	93 83       	std	Z+3, r25	; 0x03
        return true;
    }
    return false;
}
    2fdc:	8f 2d       	mov	r24, r15
    2fde:	26 96       	adiw	r28, 0x06	; 6
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	08 95       	ret

00002ff6 <Timer_TimeDifference>:
///
/// @param  time_ms Timestamp in ms to compare with system timer
/// @return uint32_t The difference in ms beetween timestamp and system timer
///
uint32_t Timer_TimeDifference(uint32_t time_ms)
{
    2ff6:	cf 92       	push	r12
    2ff8:	df 92       	push	r13
    2ffa:	ef 92       	push	r14
    2ffc:	ff 92       	push	r15
    2ffe:	6b 01       	movw	r12, r22
    3000:	7c 01       	movw	r14, r24
    uint32_t time_difference;
    uint32_t current_time = Timer_GetMilliseconds();
    3002:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>

    //Check for timer overflow
    if (time_ms > current_time)
    3006:	6c 15       	cp	r22, r12
    3008:	7d 05       	cpc	r23, r13
    300a:	8e 05       	cpc	r24, r14
    300c:	9f 05       	cpc	r25, r15
    300e:	68 f4       	brcc	.+26     	; 0x302a <Timer_TimeDifference+0x34>
    {
        time_difference = (TIMERMAX - time_ms) + current_time;
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	8c 19       	sub	r24, r12
    3016:	9d 09       	sbc	r25, r13
    3018:	ae 09       	sbc	r26, r14
    301a:	bf 09       	sbc	r27, r15
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	61 50       	subi	r22, 0x01	; 1
    3022:	71 09       	sbc	r23, r1
    3024:	81 09       	sbc	r24, r1
    3026:	91 09       	sbc	r25, r1
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <Timer_TimeDifference+0x3c>
    }
    else
    {
        time_difference = current_time - time_ms;
    302a:	6c 19       	sub	r22, r12
    302c:	7d 09       	sbc	r23, r13
    302e:	8e 09       	sbc	r24, r14
    3030:	9f 09       	sbc	r25, r15
    }
    return time_difference;
}
    3032:	ff 90       	pop	r15
    3034:	ef 90       	pop	r14
    3036:	df 90       	pop	r13
    3038:	cf 90       	pop	r12
    303a:	08 95       	ret

0000303c <DumpPacket>:
    return next_state;
}

#ifdef DEBUG_ENABLE
static void DumpPacket(packet_frame_type *packet)
{
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	ec 01       	movw	r28, r24
    DEBUG("<PCK>");
    3042:	83 ed       	ldi	r24, 0xD3	; 211
    3044:	99 e0       	ldi	r25, 0x09	; 9
    3046:	9f 93       	push	r25
    3048:	8f 93       	push	r24
    304a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%u,", packet->header.target);
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	1f 92       	push	r1
    3052:	8f 93       	push	r24
    3054:	8f ec       	ldi	r24, 0xCF	; 207
    3056:	99 e0       	ldi	r25, 0x09	; 9
    3058:	9f 93       	push	r25
    305a:	8f 93       	push	r24
    305c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%u,", packet->header.source);
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	1f 92       	push	r1
    3064:	8f 93       	push	r24
    3066:	8b ec       	ldi	r24, 0xCB	; 203
    3068:	99 e0       	ldi	r25, 0x09	; 9
    306a:	9f 93       	push	r25
    306c:	8f 93       	push	r24
    306e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%u,", packet->header.ack);
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	1f 92       	push	r1
    3076:	8f 93       	push	r24
    3078:	87 ec       	ldi	r24, 0xC7	; 199
    307a:	99 e0       	ldi	r25, 0x09	; 9
    307c:	9f 93       	push	r25
    307e:	8f 93       	push	r24
    3080:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%d,", packet->header.rssi);
    3084:	2c 81       	ldd	r18, Y+4	; 0x04
    3086:	82 2f       	mov	r24, r18
    3088:	99 27       	eor	r25, r25
    308a:	87 fd       	sbrc	r24, 7
    308c:	90 95       	com	r25
    308e:	9f 93       	push	r25
    3090:	2f 93       	push	r18
    3092:	83 ec       	ldi	r24, 0xC3	; 195
    3094:	99 e0       	ldi	r25, 0x09	; 9
    3096:	9f 93       	push	r25
    3098:	8f 93       	push	r24
    309a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%u,", packet->header.total_size);
    309e:	88 81       	ld	r24, Y
    30a0:	1f 92       	push	r1
    30a2:	8f 93       	push	r24
    30a4:	8f eb       	ldi	r24, 0xBF	; 191
    30a6:	99 e0       	ldi	r25, 0x09	; 9
    30a8:	9f 93       	push	r25
    30aa:	8f 93       	push	r24
    30ac:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("20%02u-%02u-%02u %02u:%02u:%02u,",
    30b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b2:	1f 92       	push	r1
    30b4:	8f 93       	push	r24
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	1f 92       	push	r1
    30ba:	8f 93       	push	r24
    30bc:	88 85       	ldd	r24, Y+8	; 0x08
    30be:	1f 92       	push	r1
    30c0:	8f 93       	push	r24
    30c2:	8f 81       	ldd	r24, Y+7	; 0x07
    30c4:	1f 92       	push	r1
    30c6:	8f 93       	push	r24
    30c8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ca:	1f 92       	push	r1
    30cc:	8f 93       	push	r24
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	1f 92       	push	r1
    30d2:	8f 93       	push	r24
    30d4:	8e e9       	ldi	r24, 0x9E	; 158
    30d6:	99 e0       	ldi	r25, 0x09	; 9
    30d8:	9f 93       	push	r25
    30da:	8f 93       	push	r24
    30dc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
          packet->content.timestamp.month,
          packet->content.timestamp.date,
          packet->content.timestamp.hour,
          packet->content.timestamp.minute,
          packet->content.timestamp.second);
    DEBUG("%u,", packet->content.type);
    30e0:	8d b7       	in	r24, 0x3d	; 61
    30e2:	9e b7       	in	r25, 0x3e	; 62
    30e4:	84 96       	adiw	r24, 0x24	; 36
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	9e bf       	out	0x3e, r25	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	8d bf       	out	0x3d, r24	; 61
    30f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    30f2:	1f 92       	push	r1
    30f4:	8f 93       	push	r24
    30f6:	8a e9       	ldi	r24, 0x9A	; 154
    30f8:	99 e0       	ldi	r25, 0x09	; 9
    30fa:	9f 93       	push	r25
    30fc:	8f 93       	push	r24
    30fe:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("%u\r\n", packet->content.size);
    3102:	8c 85       	ldd	r24, Y+12	; 0x0c
    3104:	1f 92       	push	r1
    3106:	8f 93       	push	r24
    3108:	85 e9       	ldi	r24, 0x95	; 149
    310a:	99 e0       	ldi	r25, 0x09	; 9
    310c:	9f 93       	push	r25
    310e:	8f 93       	push	r24
    3110:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    3114:	8d b7       	in	r24, 0x3d	; 61
    3116:	9e b7       	in	r25, 0x3e	; 62
    3118:	08 96       	adiw	r24, 0x08	; 8
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	9e bf       	out	0x3e, r25	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	8d bf       	out	0x3d, r24	; 61
}
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	08 95       	ret

0000312a <HandlePayload>:
{
    return (packet_frame.header.target > 0);
}

static bool HandlePayload(void)
{
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	c1 54       	subi	r28, 0x41	; 65
    3134:	d1 09       	sbc	r29, r1
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    uint8_t length;
    uint8_t data_buffer[RFM_FIFO_SIZE - 1];

    libRFM69_ReadFromFIFO(data_buffer, 1);
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <libRFM69_ReadFromFIFO>
    length = data_buffer[0];
    314a:	69 81       	ldd	r22, Y+1	; 0x01

    if (length > RFM_FIFO_SIZE - 1)
    314c:	62 34       	cpi	r22, 0x42	; 66
    314e:	80 f0       	brcs	.+32     	; 0x3170 <HandlePayload+0x46>
    {
        ERROR("Size of data packet is larger then the FIFO");
    3150:	88 ee       	ldi	r24, 0xE8	; 232
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	9f 93       	push	r25
    3156:	8f 93       	push	r24
    3158:	8c e0       	ldi	r24, 0x0C	; 12
    315a:	9a e0       	ldi	r25, 0x0A	; 10
    315c:	9f 93       	push	r25
    315e:	8f 93       	push	r24
    3160:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        return false;
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	3b c0       	rjmp	.+118    	; 0x31e6 <HandlePayload+0xbc>
    }

    libRFM69_ReadFromFIFO(&data_buffer[1], length);
    3170:	ce 01       	movw	r24, r28
    3172:	02 96       	adiw	r24, 0x02	; 2
    3174:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <libRFM69_ReadFromFIFO>
    memcpy(&packet_frame.header, data_buffer, sizeof(packet_header_type));
    3178:	85 e0       	ldi	r24, 0x05	; 5
    317a:	fe 01       	movw	r30, r28
    317c:	31 96       	adiw	r30, 0x01	; 1
    317e:	aa e6       	ldi	r26, 0x6A	; 106
    3180:	b3 e0       	ldi	r27, 0x03	; 3
    3182:	01 90       	ld	r0, Z+
    3184:	0d 92       	st	X+, r0
    3186:	8a 95       	dec	r24
    3188:	e1 f7       	brne	.-8      	; 0x3182 <HandlePayload+0x58>
    memcpy(&packet_frame.content, &data_buffer[sizeof(packet_header_type)],
    318a:	8c e1       	ldi	r24, 0x1C	; 28
    318c:	fe 01       	movw	r30, r28
    318e:	36 96       	adiw	r30, 0x06	; 6
    3190:	af e6       	ldi	r26, 0x6F	; 111
    3192:	b3 e0       	ldi	r27, 0x03	; 3
    3194:	01 90       	ld	r0, Z+
    3196:	0d 92       	st	X+, r0
    3198:	8a 95       	dec	r24
    319a:	e1 f7       	brne	.-8      	; 0x3194 <HandlePayload+0x6a>

    //TODO: Fix this!
    //packet_frame.header.rssi = libRFM69_GetRSSI();

#ifdef DEBUG_ENABLE
    DumpPacket(&packet_frame);
    319c:	8a e6       	ldi	r24, 0x6A	; 106
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	0e 94 1e 18 	call	0x303c	; 0x303c <DumpPacket>
#endif

    if (IsPacketTypeValid(packet_frame.content.type) &&
    31a4:	e0 91 75 03 	lds	r30, 0x0375
    31a8:	e4 30       	cpi	r30, 0x04	; 4
    31aa:	70 f4       	brcc	.+28     	; 0x31c8 <HandlePayload+0x9e>
            packet_handlers[packet_frame.content.type] != NULL)
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	ee 59       	subi	r30, 0x9E	; 158
    31b4:	fc 4f       	sbci	r31, 0xFC	; 252
    31b6:	01 90       	ld	r0, Z+
    31b8:	f0 81       	ld	r31, Z
    31ba:	e0 2d       	mov	r30, r0

#ifdef DEBUG_ENABLE
    DumpPacket(&packet_frame);
#endif

    if (IsPacketTypeValid(packet_frame.content.type) &&
    31bc:	30 97       	sbiw	r30, 0x00	; 0
    31be:	21 f0       	breq	.+8      	; 0x31c8 <HandlePayload+0x9e>
            packet_handlers[packet_frame.content.type] != NULL)
    {
        return packet_handlers[packet_frame.content.type](&packet_frame);
    31c0:	8a e6       	ldi	r24, 0x6A	; 106
    31c2:	93 e0       	ldi	r25, 0x03	; 3
    31c4:	09 95       	icall
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <HandlePayload+0xbc>
    }
    else
    {
        INFO("No packet handler for packet type %u");
    31c8:	88 ee       	ldi	r24, 0xE8	; 232
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	9f 93       	push	r25
    31ce:	8f 93       	push	r24
    31d0:	89 ed       	ldi	r24, 0xD9	; 217
    31d2:	99 e0       	ldi	r25, 0x09	; 9
    31d4:	9f 93       	push	r25
    31d6:	8f 93       	push	r24
    31d8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        return false;
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    31e6:	cf 5b       	subi	r28, 0xBF	; 191
    31e8:	df 4f       	sbci	r29, 0xFF	; 255
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <Transceiver_Init>:
/// @param  None
/// @return None
///
void Transceiver_Init(void)
{
    libRFM69_Init();
    31fa:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <libRFM69_Init>
    //IMPORTANT: Only disable encryption during development!
    libRFM69_EnableEncryption(false);
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	0e 94 2e 10 	call	0x205c	; 0x205c <libRFM69_EnableEncryption>
    libRFM69_EnableSequencer(true);
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	0e 94 14 10 	call	0x2028	; 0x2028 <libRFM69_EnableSequencer>
    libRFM69_EnableListenMode(false);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <libRFM69_EnableListenMode>
    libRFM69_SetPacketRxDelay(3);
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	0e 94 a0 10 	call	0x2140	; 0x2140 <libRFM69_SetPacketRxDelay>
    libRFM69_SetMode(RFM_STANDBY);
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
    libRFM69_WaitForModeReady();
    321c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <libRFM69_WaitForModeReady>
    libRFM69_SetPreambleLength(14);
    3220:	8e e0       	ldi	r24, 0x0E	; 14
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <libRFM69_SetPreambleLength>
    libRFM69_SetLNAGain(RFM_LNA_GAIN_AUTO);
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	0e 94 c1 12 	call	0x2582	; 0x2582 <libRFM69_SetLNAGain>
    libRFM69_SetLNAInputImpedance(RFM_LNA_ZIN_200OHM);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <libRFM69_SetLNAInputImpedance>
    libRFM69_EnableAFCLowBeta(false);
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	0e 94 0d 13 	call	0x261a	; 0x261a <libRFM69_EnableAFCLowBeta>
    libRFM69_EnableContinuousDAGC(false);
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	0e 94 3d 13 	call	0x267a	; 0x267a <libRFM69_EnableContinuousDAGC>
    libRFM69_SetBitRate(4800);
    3240:	60 ec       	ldi	r22, 0xC0	; 192
    3242:	72 e1       	ldi	r23, 0x12	; 18
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <libRFM69_SetBitRate>
    libRFM69_SetDataMode(RFM_PACKET_DATA);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <libRFM69_SetDataMode>
    libRFM69_SetModulationType(RFM_FSK);
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	0e 94 fe 10 	call	0x21fc	; 0x21fc <libRFM69_SetModulationType>
    libRFM69_SetModulationShaping(0x00);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 24 11 	call	0x2248	; 0x2248 <libRFM69_SetModulationShaping>
    libRFM69_SetFrequencyDeviation(5000);
    325e:	88 e8       	ldi	r24, 0x88	; 136
    3260:	93 e1       	ldi	r25, 0x13	; 19
    3262:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <libRFM69_SetFrequencyDeviation>
    libRFM69_SetCarrierFrequency(868000000);
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	71 ea       	ldi	r23, 0xA1	; 161
    326a:	8c eb       	ldi	r24, 0xBC	; 188
    326c:	93 e3       	ldi	r25, 0x33	; 51
    326e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <libRFM69_SetCarrierFrequency>
    libRFM69_EnableSyncWordGeneration(true);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	0e 94 62 12 	call	0x24c4	; 0x24c4 <libRFM69_EnableSyncWordGeneration>
    libRFM69_SetFIFOFillCondition(RFM_FIFO_FILL_AUTO);
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <libRFM69_SetFIFOFillCondition>
    libRFM69_SetRSSIThreshold(-90);
    327e:	86 ea       	ldi	r24, 0xA6	; 166
    3280:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <libRFM69_SetRSSIThreshold>
    libRFM69_SetSyncWordSize(6);
    3284:	86 e0       	ldi	r24, 0x06	; 6
    3286:	0e 94 cf 11 	call	0x239e	; 0x239e <libRFM69_SetSyncWordSize>
    libRFM69_SetSyncWord(Config_GetNetworkId(), 6);
    328a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <Config_GetNetworkId>
    328e:	66 e0       	ldi	r22, 0x06	; 6
    3290:	0e 94 12 12 	call	0x2424	; 0x2424 <libRFM69_SetSyncWord>
    libRFM69_SetTXStartCondition(RFM_TX_START_NOT_EMPTY);
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <libRFM69_SetTXStartCondition>
    libRFM69_SetNodeAddress(Config_GetNodeId());
    329a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <Config_GetNodeId>
    329e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <libRFM69_SetNodeAddress>
    libRFM69_SetBroadcastAddress(BROADCAST_ADDRESS);
    32a2:	8f ef       	ldi	r24, 0xFF	; 255
    32a4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <libRFM69_SetBroadcastAddress>
    libRFM69_SetAddressFiltering(RFM_ADDRESS_FILTER_ADDRESS_BROADCAST);
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	0e 94 bd 10 	call	0x217a	; 0x217a <libRFM69_SetAddressFiltering>
    libRFM69_ClearFIFO();
    32ae:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <libRFM69_ClearFIFO>
    libRFM69_SetPacketFormat(RFM_PACKET_VARIABLE_LEN);
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	0e 94 4b 10 	call	0x2096	; 0x2096 <libRFM69_SetPacketFormat>
    libRFM69_EnableCRC(true);
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <libRFM69_EnableCRC>
    libRFM69_EnableCRCAutoClear(true);
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <libRFM69_EnableCRCAutoClear>
    libRFM69_SetClockOutFrequency(RFM_CLKOUT_OFF);
    32c4:	87 e0       	ldi	r24, 0x07	; 7
    32c6:	0e 94 9f 12 	call	0x253e	; 0x253e <libRFM69_SetClockOutFrequency>
    libRFM69_EnableOCP(false);
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	0e 94 b2 11 	call	0x2364	; 0x2364 <libRFM69_EnableOCP>
    libRFM69_SetPowerAmplifierMode(RFM_PWR_3_4);
    32d0:	83 e0       	ldi	r24, 0x03	; 3
    32d2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <libRFM69_SetPowerAmplifierMode>
    libRFM69_SetPowerLevel(28);
    32d6:	8c e1       	ldi	r24, 0x1C	; 28
    32d8:	0e 94 8f 11 	call	0x231e	; 0x231e <libRFM69_SetPowerLevel>
    libRFM69_EnableHighPowerSetting(false);
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	0e 94 72 13 	call	0x26e4	; 0x26e4 <libRFM69_EnableHighPowerSetting>
    libRFM69_SetMode(RFM_STANDBY);
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
    libRFM69_WaitForModeReady();
    32e8:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <libRFM69_WaitForModeReady>

    memset(&packet_frame, 0, sizeof(packet_frame));
    32ec:	83 e2       	ldi	r24, 0x23	; 35
    32ee:	ea e6       	ldi	r30, 0x6A	; 106
    32f0:	f3 e0       	ldi	r31, 0x03	; 3
    32f2:	df 01       	movw	r26, r30
    32f4:	1d 92       	st	X+, r1
    32f6:	8a 95       	dec	r24
    32f8:	e9 f7       	brne	.-6      	; 0x32f4 <Transceiver_Init+0xfa>
    transceiver_state = TR_STATE_LISTENING;
    32fa:	82 e0       	ldi	r24, 0x02	; 2
    32fc:	80 93 8d 03 	sts	0x038D, r24

    INFO("Transceiver initiated");
    3300:	8a e1       	ldi	r24, 0x1A	; 26
    3302:	92 e0       	ldi	r25, 0x02	; 2
    3304:	9f 93       	push	r25
    3306:	8f 93       	push	r24
    3308:	8c e2       	ldi	r24, 0x2C	; 44
    330a:	9b e0       	ldi	r25, 0x0B	; 11
    330c:	9f 93       	push	r25
    330e:	8f 93       	push	r24
    3310:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	08 95       	ret

0000331e <Transceiver_Update>:
/// @param  None
/// @return None
///
void Transceiver_Update(void)
{
    switch (transceiver_state)
    331e:	80 91 8d 03 	lds	r24, 0x038D
    3322:	82 30       	cpi	r24, 0x02	; 2
    3324:	b1 f1       	breq	.+108    	; 0x3392 <Transceiver_Update+0x74>
    3326:	28 f4       	brcc	.+10     	; 0x3332 <Transceiver_Update+0x14>
    3328:	88 23       	and	r24, r24
    332a:	51 f0       	breq	.+20     	; 0x3340 <Transceiver_Update+0x22>
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	c9 f0       	breq	.+50     	; 0x3362 <Transceiver_Update+0x44>
    3330:	54 c1       	rjmp	.+680    	; 0x35da <Transceiver_Update+0x2bc>
    3332:	83 30       	cpi	r24, 0x03	; 3
    3334:	09 f4       	brne	.+2      	; 0x3338 <Transceiver_Update+0x1a>
    3336:	7b c0       	rjmp	.+246    	; 0x342e <Transceiver_Update+0x110>
    3338:	84 30       	cpi	r24, 0x04	; 4
    333a:	09 f4       	brne	.+2      	; 0x333e <Transceiver_Update+0x20>
    333c:	42 c1       	rjmp	.+644    	; 0x35c2 <Transceiver_Update+0x2a4>
    333e:	4d c1       	rjmp	.+666    	; 0x35da <Transceiver_Update+0x2bc>
    {
        case TR_STATE_NO_INIT:
            WARNING("Transceiver not initialized");
    3340:	87 e0       	ldi	r24, 0x07	; 7
    3342:	92 e0       	ldi	r25, 0x02	; 2
    3344:	9f 93       	push	r25
    3346:	8f 93       	push	r24
    3348:	8f ef       	ldi	r24, 0xFF	; 255
    334a:	9a e0       	ldi	r25, 0x0A	; 10
    334c:	9f 93       	push	r25
    334e:	8f 93       	push	r24
    3350:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            Transceiver_Init();
    3354:	0e 94 fd 18 	call	0x31fa	; 0x31fa <Transceiver_Init>
            break;
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	08 95       	ret

static transceiver_state_type IdleStateMachine(void)
{
    transceiver_state_type next_state = TR_STATE_IDLE;

    if (PacketToSend())
    3362:	80 91 6b 03 	lds	r24, 0x036B
    3366:	88 23       	and	r24, r24
    3368:	81 f0       	breq	.+32     	; 0x338a <Transceiver_Update+0x6c>
    {
        INFO("Sending packet from buffer");
    336a:	86 ef       	ldi	r24, 0xF6	; 246
    336c:	91 e0       	ldi	r25, 0x01	; 1
    336e:	9f 93       	push	r25
    3370:	8f 93       	push	r24
    3372:	84 ea       	ldi	r24, 0xA4	; 164
    3374:	9a e0       	ldi	r25, 0x0A	; 10
    3376:	9f 93       	push	r25
    3378:	8f 93       	push	r24
    337a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
        next_state = TR_STATE_SENDING;
    3386:	83 e0       	ldi	r24, 0x03	; 3
    3388:	01 c0       	rjmp	.+2      	; 0x338c <Transceiver_Update+0x6e>
    }
}

static transceiver_state_type IdleStateMachine(void)
{
    transceiver_state_type next_state = TR_STATE_IDLE;
    338a:	81 e0       	ldi	r24, 0x01	; 1
            WARNING("Transceiver not initialized");
            Transceiver_Init();
            break;

        case TR_STATE_IDLE:
            transceiver_state = IdleStateMachine();
    338c:	80 93 8d 03 	sts	0x038D, r24
            break;
    3390:	08 95       	ret

static transceiver_state_type ListeningStateMachine(void)
{
    static transceiver_listening_state_type state = TR_STATE_LISTENING_INIT;

    switch (state)
    3392:	80 91 61 03 	lds	r24, 0x0361
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	f1 f0       	breq	.+60     	; 0x33d6 <Transceiver_Update+0xb8>
    339a:	18 f0       	brcs	.+6      	; 0x33a2 <Transceiver_Update+0x84>
    339c:	83 30       	cpi	r24, 0x03	; 3
    339e:	61 f1       	breq	.+88     	; 0x33f8 <Transceiver_Update+0xda>
    33a0:	3a c0       	rjmp	.+116    	; 0x3416 <Transceiver_Update+0xf8>
    {
        case TR_STATE_LISTENING_INIT:
            if (libRFM69_IsPayloadReady())
    33a2:	0e 94 98 13 	call	0x2730	; 0x2730 <libRFM69_IsPayloadReady>
    33a6:	88 23       	and	r24, r24
    33a8:	51 f0       	breq	.+20     	; 0x33be <Transceiver_Update+0xa0>
            {
                DEBUG("Init listen: restart RX\r\n");
    33aa:	8a e8       	ldi	r24, 0x8A	; 138
    33ac:	9a e0       	ldi	r25, 0x0A	; 10
    33ae:	9f 93       	push	r25
    33b0:	8f 93       	push	r24
    33b2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                libRFM69_RestartRx();
    33b6:	0e 94 8b 10 	call	0x2116	; 0x2116 <libRFM69_RestartRx>
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
            }

            libRFM69_EnableHighPowerSetting(false);
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <libRFM69_EnableHighPowerSetting>
            libRFM69_SetMode(RFM_RECEIVER);
    33c4:	84 e0       	ldi	r24, 0x04	; 4
    33c6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
            libRFM69_WaitForModeReady();
    33ca:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <libRFM69_WaitForModeReady>
            state = TR_STATE_LISTENING_WAITING;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	80 93 61 03 	sts	0x0361, r24
    33d4:	28 c0       	rjmp	.+80     	; 0x3426 <Transceiver_Update+0x108>
            break;

        case TR_STATE_LISTENING_WAITING:
            if (libRFM69_IsPayloadReady())
    33d6:	0e 94 98 13 	call	0x2730	; 0x2730 <libRFM69_IsPayloadReady>
    33da:	88 23       	and	r24, r24
    33dc:	21 f1       	breq	.+72     	; 0x3426 <Transceiver_Update+0x108>
            {
                libRFM69_SetMode(RFM_STANDBY);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
                libRFM69_WaitForModeReady();
    33e4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <libRFM69_WaitForModeReady>

                HandlePayload();
    33e8:	0e 94 95 18 	call	0x312a	; 0x312a <HandlePayload>
                libRFM69_SetMode(RFM_RECEIVER);
    33ec:	84 e0       	ldi	r24, 0x04	; 4
    33ee:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
                libRFM69_WaitForModeReady();
    33f2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <libRFM69_WaitForModeReady>
    33f6:	17 c0       	rjmp	.+46     	; 0x3426 <Transceiver_Update+0x108>

            }
            break;

        case TR_STATE_LISTENING_SEND_ACK:
            if (libRFM69_IsModeReady())
    33f8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <libRFM69_IsModeReady>
    33fc:	88 23       	and	r24, r24
    33fe:	99 f0       	breq	.+38     	; 0x3426 <Transceiver_Update+0x108>
            {
                DEBUG("ACK mode ready\r\n");
    3400:	89 e7       	ldi	r24, 0x79	; 121
    3402:	9a e0       	ldi	r25, 0x0A	; 10
    3404:	9f 93       	push	r25
    3406:	8f 93       	push	r24
    3408:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                //Transceiver_SendPacket() //Send ACK-packet, async?
                state = TR_STATE_LISTENING_INIT;
    340c:	10 92 61 03 	sts	0x0361, r1
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	08 c0       	rjmp	.+16     	; 0x3426 <Transceiver_Update+0x108>
            }
            break;

        default:
            sc_assert_fail();
    3416:	4a e6       	ldi	r20, 0x6A	; 106
    3418:	5a e0       	ldi	r21, 0x0A	; 10
    341a:	63 eb       	ldi	r22, 0xB3	; 179
    341c:	71 e0       	ldi	r23, 0x01	; 1
    341e:	87 e4       	ldi	r24, 0x47	; 71
    3420:	9a e0       	ldi	r25, 0x0A	; 10
    3422:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
        case TR_STATE_IDLE:
            transceiver_state = IdleStateMachine();
            break;

        case TR_STATE_LISTENING:
            transceiver_state = ListeningStateMachine();
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	80 93 8d 03 	sts	0x038D, r24
            break;
    342c:	08 95       	ret
static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;

    switch (state)
    342e:	80 91 60 03 	lds	r24, 0x0360
    3432:	82 30       	cpi	r24, 0x02	; 2
    3434:	09 f4       	brne	.+2      	; 0x3438 <Transceiver_Update+0x11a>
    3436:	61 c0       	rjmp	.+194    	; 0x34fa <Transceiver_Update+0x1dc>
    3438:	28 f4       	brcc	.+10     	; 0x3444 <Transceiver_Update+0x126>
    343a:	88 23       	and	r24, r24
    343c:	51 f0       	breq	.+20     	; 0x3452 <Transceiver_Update+0x134>
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	f1 f0       	breq	.+60     	; 0x347e <Transceiver_Update+0x160>
    3442:	ad c0       	rjmp	.+346    	; 0x359e <Transceiver_Update+0x280>
    3444:	83 30       	cpi	r24, 0x03	; 3
    3446:	09 f4       	brne	.+2      	; 0x344a <Transceiver_Update+0x12c>
    3448:	96 c0       	rjmp	.+300    	; 0x3576 <Transceiver_Update+0x258>
    344a:	84 30       	cpi	r24, 0x04	; 4
    344c:	09 f4       	brne	.+2      	; 0x3450 <Transceiver_Update+0x132>
    344e:	af c0       	rjmp	.+350    	; 0x35ae <Transceiver_Update+0x290>
    3450:	a6 c0       	rjmp	.+332    	; 0x359e <Transceiver_Update+0x280>
    {
        case TR_STATE_SENDING_INIT:
            DEBUG("FIFO not empty 0: %u\r\n", libRFM69_IsFIFONotEmpty());
    3452:	0e 94 be 13 	call	0x277c	; 0x277c <libRFM69_IsFIFONotEmpty>
    3456:	1f 92       	push	r1
    3458:	8f 93       	push	r24
    345a:	8e e7       	ldi	r24, 0x7E	; 126
    345c:	99 e0       	ldi	r25, 0x09	; 9
    345e:	9f 93       	push	r25
    3460:	8f 93       	push	r24
    3462:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            libRFM69_SetMode(RFM_STANDBY);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
            state = TR_STATE_SENDING_WRITING;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	80 93 60 03 	sts	0x0360, r24
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	9f c0       	rjmp	.+318    	; 0x35bc <Transceiver_Update+0x29e>
            libRFM69_SetMode(RFM_STANDBY);
            state = TR_STATE_SENDING_WRITING;
            break;

        case TR_STATE_SENDING_WRITING:
            if (libRFM69_IsModeReady())
    347e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <libRFM69_IsModeReady>
    3482:	88 23       	and	r24, r24
    3484:	09 f4       	brne	.+2      	; 0x3488 <Transceiver_Update+0x16a>
    3486:	95 c0       	rjmp	.+298    	; 0x35b2 <Transceiver_Update+0x294>
            {
                DEBUG("Write packet to FIFO\r\n");
    3488:	87 e6       	ldi	r24, 0x67	; 103
    348a:	99 e0       	ldi	r25, 0x09	; 9
    348c:	9f 93       	push	r25
    348e:	8f 93       	push	r24
    3490:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                libRFM69_WriteToFIFO((uint8_t *)&packet_frame.header,
    3494:	65 e0       	ldi	r22, 0x05	; 5
    3496:	8a e6       	ldi	r24, 0x6A	; 106
    3498:	93 e0       	ldi	r25, 0x03	; 3
    349a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <libRFM69_WriteToFIFO>
                                     sizeof(packet_header_type));
                libRFM69_WriteToFIFO((uint8_t *)&packet_frame.content,
    349e:	60 91 76 03 	lds	r22, 0x0376
    34a2:	68 5f       	subi	r22, 0xF8	; 248
    34a4:	8f e6       	ldi	r24, 0x6F	; 111
    34a6:	93 e0       	ldi	r25, 0x03	; 3
    34a8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <libRFM69_WriteToFIFO>
                                     packet_frame.content.size + 8);
                libRFM69_SetMode(RFM_TRANSMITTER);
    34ac:	83 e0       	ldi	r24, 0x03	; 3
    34ae:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
                libRFM69_EnableHighPowerSetting(true);
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <libRFM69_EnableHighPowerSetting>

                DEBUG("TX ready: %u\r\n", libRFM69_IsTxReady());
    34b8:	0e 94 4c 13 	call	0x2698	; 0x2698 <libRFM69_IsTxReady>
    34bc:	1f 92       	push	r1
    34be:	8f 93       	push	r24
    34c0:	88 e5       	ldi	r24, 0x58	; 88
    34c2:	99 e0       	ldi	r25, 0x09	; 9
    34c4:	9f 93       	push	r25
    34c6:	8f 93       	push	r24
    34c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                DEBUG("FIFO not empty 1: %u\r\n", libRFM69_IsFIFONotEmpty());
    34cc:	0e 94 be 13 	call	0x277c	; 0x277c <libRFM69_IsFIFONotEmpty>
    34d0:	1f 92       	push	r1
    34d2:	8f 93       	push	r24
    34d4:	81 e4       	ldi	r24, 0x41	; 65
    34d6:	99 e0       	ldi	r25, 0x09	; 9
    34d8:	9f 93       	push	r25
    34da:	8f 93       	push	r24
    34dc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                state = TR_STATE_SENDING_TRANSMITTING;
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	80 93 60 03 	sts	0x0360, r24
    34e6:	8d b7       	in	r24, 0x3d	; 61
    34e8:	9e b7       	in	r25, 0x3e	; 62
    34ea:	0a 96       	adiw	r24, 0x0a	; 10
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	9e bf       	out	0x3e, r25	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	8d bf       	out	0x3d, r24	; 61
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	61 c0       	rjmp	.+194    	; 0x35bc <Transceiver_Update+0x29e>
                state = TR_STATE_SENDING_TRANSMITTING;
            }
            break;

        case TR_STATE_SENDING_TRANSMITTING:
            if (libRFM69_IsPacketSent())
    34fa:	0e 94 ab 13 	call	0x2756	; 0x2756 <libRFM69_IsPacketSent>
    34fe:	88 23       	and	r24, r24
    3500:	09 f4       	brne	.+2      	; 0x3504 <Transceiver_Update+0x1e6>
    3502:	59 c0       	rjmp	.+178    	; 0x35b6 <Transceiver_Update+0x298>
            {
                DEBUG("Packet sent\r\n");
    3504:	83 e3       	ldi	r24, 0x33	; 51
    3506:	99 e0       	ldi	r25, 0x09	; 9
    3508:	9f 93       	push	r25
    350a:	8f 93       	push	r24
    350c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                if (packet_frame.header.ack)
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	80 91 6d 03 	lds	r24, 0x036D
    3518:	88 23       	and	r24, r24
    351a:	91 f0       	breq	.+36     	; 0x3540 <Transceiver_Update+0x222>
                {
                    DEBUG("Waiting for ACK\r\n");
    351c:	81 e2       	ldi	r24, 0x21	; 33
    351e:	99 e0       	ldi	r25, 0x09	; 9
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                    libRFM69_SetMode(RFM_RECEIVER);
    3528:	84 e0       	ldi	r24, 0x04	; 4
    352a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
                    libRFM69_EnableHighPowerSetting(false);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	0e 94 72 13 	call	0x26e4	; 0x26e4 <libRFM69_EnableHighPowerSetting>
                    state = TR_STATE_SENDING_WAIT_FOR_ACK;
    3534:	83 e0       	ldi	r24, 0x03	; 3
    3536:	80 93 60 03 	sts	0x0360, r24
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	3e c0       	rjmp	.+124    	; 0x35bc <Transceiver_Update+0x29e>
                }
                else
                {
                    DEBUG("No ACK needed\r\n");
    3540:	81 e1       	ldi	r24, 0x11	; 17
    3542:	99 e0       	ldi	r25, 0x09	; 9
    3544:	9f 93       	push	r25
    3546:	8f 93       	push	r24
    3548:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

                    if (packet_frame.callback != NULL)
    354c:	e0 91 8b 03 	lds	r30, 0x038B
    3550:	f0 91 8c 03 	lds	r31, 0x038C
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	30 97       	sbiw	r30, 0x00	; 0
    355a:	11 f0       	breq	.+4      	; 0x3560 <Transceiver_Update+0x242>
                    {
                        packet_frame.callback(true);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	09 95       	icall
                    }
                    memset(&packet_frame, 0, sizeof(packet_frame_type));
    3560:	83 e2       	ldi	r24, 0x23	; 35
    3562:	ea e6       	ldi	r30, 0x6A	; 106
    3564:	f3 e0       	ldi	r31, 0x03	; 3
    3566:	df 01       	movw	r26, r30
    3568:	1d 92       	st	X+, r1
    356a:	8a 95       	dec	r24
    356c:	e9 f7       	brne	.-6      	; 0x3568 <Transceiver_Update+0x24a>

                    state = TR_STATE_SENDING_INIT;
    356e:	10 92 60 03 	sts	0x0360, r1
                    next_state = TR_STATE_IDLE;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	23 c0       	rjmp	.+70     	; 0x35bc <Transceiver_Update+0x29e>
                }
            }
            break;

        case TR_STATE_SENDING_WAIT_FOR_ACK:
            if (libRFM69_IsPayloadReady())
    3576:	0e 94 98 13 	call	0x2730	; 0x2730 <libRFM69_IsPayloadReady>
    357a:	88 23       	and	r24, r24
    357c:	f1 f0       	breq	.+60     	; 0x35ba <Transceiver_Update+0x29c>
            {
                if (HandlePayload())
    357e:	0e 94 95 18 	call	0x312a	; 0x312a <HandlePayload>
                {
                    //TODO: Implement this
                }
                libRFM69_SetMode(RFM_STANDBY);
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
                memset(&packet_frame, 0, sizeof(packet_frame_type));
    3588:	83 e2       	ldi	r24, 0x23	; 35
    358a:	ea e6       	ldi	r30, 0x6A	; 106
    358c:	f3 e0       	ldi	r31, 0x03	; 3
    358e:	df 01       	movw	r26, r30
    3590:	1d 92       	st	X+, r1
    3592:	8a 95       	dec	r24
    3594:	e9 f7       	brne	.-6      	; 0x3590 <Transceiver_Update+0x272>
                state = TR_STATE_SENDING_INIT;
    3596:	10 92 60 03 	sts	0x0360, r1
                next_state = TR_STATE_IDLE;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0f c0       	rjmp	.+30     	; 0x35bc <Transceiver_Update+0x29e>

        case TR_STATE_SENDING_DONE:
            break;

        default:
            sc_assert_fail();
    359e:	42 e0       	ldi	r20, 0x02	; 2
    35a0:	59 e0       	ldi	r21, 0x09	; 9
    35a2:	64 e0       	ldi	r22, 0x04	; 4
    35a4:	72 e0       	ldi	r23, 0x02	; 2
    35a6:	8f ed       	ldi	r24, 0xDF	; 223
    35a8:	98 e0       	ldi	r25, 0x08	; 8
    35aa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
}

static transceiver_state_type SendingStateMachine(void)
{
    static transceiver_sending_state_type state = TR_STATE_SENDING_INIT;
    transceiver_state_type next_state = TR_STATE_SENDING;
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	05 c0       	rjmp	.+10     	; 0x35bc <Transceiver_Update+0x29e>
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	03 c0       	rjmp	.+6      	; 0x35bc <Transceiver_Update+0x29e>
    35b6:	83 e0       	ldi	r24, 0x03	; 3
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <Transceiver_Update+0x29e>
    35ba:	83 e0       	ldi	r24, 0x03	; 3
        case TR_STATE_LISTENING:
            transceiver_state = ListeningStateMachine();
            break;

        case TR_STATE_SENDING:
            transceiver_state = SendingStateMachine();
    35bc:	80 93 8d 03 	sts	0x038D, r24
            break;
    35c0:	08 95       	ret

        case TR_STATE_SLEEPING:
            if (!IsActive() && libRFM69_IsModeReady() && libRFM69_GetMode() != RFM_SLEEP)
    35c2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <libRFM69_IsModeReady>
    35c6:	88 23       	and	r24, r24
    35c8:	81 f0       	breq	.+32     	; 0x35ea <Transceiver_Update+0x2cc>
    35ca:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <libRFM69_GetMode>
    35ce:	88 23       	and	r24, r24
    35d0:	61 f0       	breq	.+24     	; 0x35ea <Transceiver_Update+0x2cc>
            {
                libRFM69_SetMode(RFM_SLEEP);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <libRFM69_SetMode>
    35d8:	08 95       	ret
            }
            break;

        default:
            sc_assert_fail();
    35da:	40 ef       	ldi	r20, 0xF0	; 240
    35dc:	5a e0       	ldi	r21, 0x0A	; 10
    35de:	68 ec       	ldi	r22, 0xC8	; 200
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	8d ec       	ldi	r24, 0xCD	; 205
    35e4:	9a e0       	ldi	r25, 0x0A	; 10
    35e6:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    35ea:	08 95       	ret

000035ec <Transceiver_SetPacketHandler>:
///
void Transceiver_SetPacketHandler(transceiver_packet_handler_type
                                  packet_handler,
                                  packet_type_type packet_type)
{
    sc_assert(packet_type < TR_PACKET_NR_TYPES);
    35ec:	64 30       	cpi	r22, 0x04	; 4
    35ee:	40 f0       	brcs	.+16     	; 0x3600 <Transceiver_SetPacketHandler+0x14>
    35f0:	4e eb       	ldi	r20, 0xBE	; 190
    35f2:	58 e0       	ldi	r21, 0x08	; 8
    35f4:	60 e1       	ldi	r22, 0x10	; 16
    35f6:	71 e0       	ldi	r23, 0x01	; 1
    35f8:	8b e9       	ldi	r24, 0x9B	; 155
    35fa:	98 e0       	ldi	r25, 0x08	; 8
    35fc:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    packet_handlers[packet_type] = packet_handler;
    3600:	e6 2f       	mov	r30, r22
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	ee 59       	subi	r30, 0x9E	; 158
    360a:	fc 4f       	sbci	r31, 0xFC	; 252
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	80 83       	st	Z, r24
    3610:	08 95       	ret

00003612 <AddToRXBuffer>:

bool AddToRXBuffer(uint8_t *data)
{
    bool status = true;

    if(FIFO_Push(&uart_rx_fifo, data) == false)
    3612:	bc 01       	movw	r22, r24
    3614:	8e e8       	ldi	r24, 0x8E	; 142
    3616:	93 e0       	ldi	r25, 0x03	; 3
    3618:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <FIFO_Push>
    {
        //TODO: place warning here
        status = false;
    }
    return status;
}
    361c:	08 95       	ret

0000361e <GetFromTXBuffer>:

bool GetFromTXBuffer(uint8_t *data)
{
    bool status = true;

    if(FIFO_Pop(&uart_tx_fifo, data) == false)
    361e:	bc 01       	movw	r22, r24
    3620:	84 e9       	ldi	r24, 0x94	; 148
    3622:	93 e0       	ldi	r25, 0x03	; 3
    3624:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <FIFO_Pop>
    {
        //TODO: place warning here
        status = false;
    }
    return status;
    3628:	08 95       	ret

0000362a <UART_Init>:
/// @param  None
/// @return None
///
void UART_Init(void)
{
    InitTXBuffer();
    362a:	86 e0       	ldi	r24, 0x06	; 6
    362c:	ea e0       	ldi	r30, 0x0A	; 10
    362e:	f1 e0       	ldi	r31, 0x01	; 1
    3630:	a4 e9       	ldi	r26, 0x94	; 148
    3632:	b3 e0       	ldi	r27, 0x03	; 3
    3634:	01 90       	ld	r0, Z+
    3636:	0d 92       	st	X+, r0
    3638:	8a 95       	dec	r24
    363a:	e1 f7       	brne	.-8      	; 0x3634 <UART_Init+0xa>
    InitRXBuffer();
    363c:	86 e0       	ldi	r24, 0x06	; 6
    363e:	e0 e1       	ldi	r30, 0x10	; 16
    3640:	f1 e0       	ldi	r31, 0x01	; 1
    3642:	ae e8       	ldi	r26, 0x8E	; 142
    3644:	b3 e0       	ldi	r27, 0x03	; 3
    3646:	01 90       	ld	r0, Z+
    3648:	0d 92       	st	X+, r0
    364a:	8a 95       	dec	r24
    364c:	e1 f7       	brne	.-8      	; 0x3646 <UART_Init+0x1c>

    libUART_Init();
    364e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <libUART_Init>
    libUART_SetBaudRate(BAUDRATE);
    3652:	60 e9       	ldi	r22, 0x90	; 144
    3654:	70 ed       	ldi	r23, 0xD0	; 208
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <libUART_SetBaudRate>
    libUART_SetCallbacks(AddToRXBuffer, GetFromTXBuffer);
    365e:	6f e0       	ldi	r22, 0x0F	; 15
    3660:	7b e1       	ldi	r23, 0x1B	; 27
    3662:	89 e0       	ldi	r24, 0x09	; 9
    3664:	9b e1       	ldi	r25, 0x1B	; 27
    3666:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <libUART_SetCallbacks>
    366a:	08 95       	ret

0000366c <UART_Enable>:
/// @param  enable True to enable, otherwise false.
/// @return None
///
void UART_Enable(bool enable)
{
    libUART_Enable(enable);
    366c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <libUART_Enable>
    3670:	08 95       	ret

00003672 <UART_Write>:
/// @param  length Number of bytes to write.
/// @return Actual number of bytes written, a smaller number then length means
///         that the tx buffer is full.
///
size_t UART_Write(const void *data, size_t length)
{
    3672:	ef 92       	push	r14
    3674:	ff 92       	push	r15
    3676:	0f 93       	push	r16
    3678:	1f 93       	push	r17
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	7c 01       	movw	r14, r24
    3680:	8b 01       	movw	r16, r22
    size_t cnt = 0;
    uint8_t *data_ptr = (uint8_t *)data;

    while (cnt < length)
    3682:	61 15       	cp	r22, r1
    3684:	71 05       	cpc	r23, r1
    3686:	a1 f0       	breq	.+40     	; 0x36b0 <UART_Write+0x3e>
/// @return Actual number of bytes written, a smaller number then length means
///         that the tx buffer is full.
///
size_t UART_Write(const void *data, size_t length)
{
    size_t cnt = 0;
    3688:	c0 e0       	ldi	r28, 0x00	; 0
    368a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t *data_ptr = (uint8_t *)data;

    while (cnt < length)
    {
        cli();
    368c:	f8 94       	cli
    368e:	b7 01       	movw	r22, r14
    3690:	6c 0f       	add	r22, r28
    3692:	7d 1f       	adc	r23, r29
        if (AddToTXBuffer(data_ptr++) == false)
    3694:	84 e9       	ldi	r24, 0x94	; 148
    3696:	93 e0       	ldi	r25, 0x03	; 3
    3698:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <FIFO_Push>
    369c:	81 11       	cpse	r24, r1
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <UART_Write+0x32>
        {
            sei();
    36a0:	78 94       	sei
            break;
    36a2:	08 c0       	rjmp	.+16     	; 0x36b4 <UART_Write+0x42>
        }
        sei();
    36a4:	78 94       	sei

        ++cnt;
    36a6:	21 96       	adiw	r28, 0x01	; 1
size_t UART_Write(const void *data, size_t length)
{
    size_t cnt = 0;
    uint8_t *data_ptr = (uint8_t *)data;

    while (cnt < length)
    36a8:	c0 17       	cp	r28, r16
    36aa:	d1 07       	cpc	r29, r17
    36ac:	79 f7       	brne	.-34     	; 0x368c <UART_Write+0x1a>
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <UART_Write+0x42>
/// @return Actual number of bytes written, a smaller number then length means
///         that the tx buffer is full.
///
size_t UART_Write(const void *data, size_t length)
{
    size_t cnt = 0;
    36b0:	c0 e0       	ldi	r28, 0x00	; 0
    36b2:	d0 e0       	ldi	r29, 0x00	; 0
        sei();

        ++cnt;
    }

    libUART_StartTx();
    36b4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <libUART_StartTx>
    return cnt;
}
    36b8:	ce 01       	movw	r24, r28
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	08 95       	ret

000036c8 <ErrorHandler_PointOfNoReturn>:
/// @param  None
/// @return None, does not return since an manual reboot is needed.
///
void ErrorHandler_PointOfNoReturn(void)
{
    CRITICAL("Entering fail state, manual reboot is needed.");
    36c8:	8b e2       	ldi	r24, 0x2B	; 43
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	9f 93       	push	r25
    36ce:	8f 93       	push	r24
    36d0:	8e e7       	ldi	r24, 0x7E	; 126
    36d2:	9b e0       	ldi	r25, 0x0B	; 11
    36d4:	9f 93       	push	r25
    36d6:	8f 93       	push	r24
    36d8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    wdt_disable();
    36dc:	88 e1       	ldi	r24, 0x18	; 24
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	80 93 60 00 	sts	0x0060, r24
    36e6:	10 92 60 00 	sts	0x0060, r1
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	ff cf       	rjmp	.-2      	; 0x36f4 <ErrorHandler_PointOfNoReturn+0x2c>

000036f6 <ErrorHandler_AssertFail>:
///                returned false.
/// @return None, does not return since an manual reboot is needed.
///
void ErrorHandler_AssertFail(const char *__file, int __lineno,
                             const char *__exp)
{
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	c0 54       	subi	r28, 0x40	; 64
    3700:	d1 09       	sbc	r29, r1
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	d6 2e       	mov	r13, r22
    370e:	c7 2e       	mov	r12, r23
    3710:	7a 01       	movw	r14, r20
    char expression[40];
    char file[24];

    //TODO: Use libDebug_PrintP, skip these buffers!

    strncpy_P(file, __file, sizeof(file));
    3712:	8e 01       	movw	r16, r28
    3714:	07 5d       	subi	r16, 0xD7	; 215
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	48 e1       	ldi	r20, 0x18	; 24
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	bc 01       	movw	r22, r24
    371e:	c8 01       	movw	r24, r16
    3720:	0e 94 cc 2b 	call	0x5798	; 0x5798 <strncpy_P>
    file[sizeof(file) / sizeof(*file) - 1] = '\0';
    3724:	21 96       	adiw	r28, 0x01	; 1
    3726:	1f ae       	std	Y+63, r1	; 0x3f
    3728:	21 97       	sbiw	r28, 0x01	; 1

    strncpy_P(expression, __exp, sizeof(expression));
    372a:	48 e2       	ldi	r20, 0x28	; 40
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	b7 01       	movw	r22, r14
    3730:	ce 01       	movw	r24, r28
    3732:	01 96       	adiw	r24, 0x01	; 1
    3734:	7c 01       	movw	r14, r24
    3736:	0e 94 cc 2b 	call	0x5798	; 0x5798 <strncpy_P>
    expression[sizeof(expression) / sizeof(*expression) - 1] = '\0';
    373a:	18 a6       	std	Y+40, r1	; 0x28

    DEBUG("<ERROR> Failed assert: %s:%u (%s)\r\n", file, __lineno, expression);
    373c:	ff 92       	push	r15
    373e:	ef 92       	push	r14
    3740:	cf 92       	push	r12
    3742:	df 92       	push	r13
    3744:	1f 93       	push	r17
    3746:	0f 93       	push	r16
    3748:	8e eb       	ldi	r24, 0xBE	; 190
    374a:	9b e0       	ldi	r25, 0x0B	; 11
    374c:	9f 93       	push	r25
    374e:	8f 93       	push	r24
    3750:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    ErrorHandler_PointOfNoReturn();
    3754:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <ErrorHandler_PointOfNoReturn>

00003758 <ErrorHandler_Init>:
///
/// @param  None
/// @return None
///
void ErrorHandler_Init(void)
{
    3758:	7f 92       	push	r7
    375a:	8f 92       	push	r8
    375c:	9f 92       	push	r9
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	00 d0       	rcall	.+0      	; 0x3774 <ErrorHandler_Init+0x1c>
    3774:	00 d0       	rcall	.+0      	; 0x3776 <ErrorHandler_Init+0x1e>
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	0f 2e       	mov	r0, r31
    377c:	ff e1       	ldi	r31, 0x1F	; 31
    377e:	ef 2e       	mov	r14, r31
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	ff 2e       	mov	r15, r31
    3784:	f0 2d       	mov	r31, r0
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));

        if (id <= prev_id)
    3786:	00 e0       	ldi	r16, 0x00	; 0
    3788:	10 e0       	ldi	r17, 0x00	; 0
///
void ErrorHandler_Init(void)
{
    sc_assert(ERROR_LOG_SIZE < 256);

    uint32_t prev_id = 0;
    378a:	81 2c       	mov	r8, r1
    378c:	91 2c       	mov	r9, r1
    378e:	54 01       	movw	r10, r8
    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    {
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));
    3790:	44 e0       	ldi	r20, 0x04	; 4
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	b7 01       	movw	r22, r14
    3796:	ce 01       	movw	r24, r28
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <__eerd_block_m328p>

        if (id <= prev_id)
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	9a 81       	ldd	r25, Y+2	; 0x02
    37a2:	ab 81       	ldd	r26, Y+3	; 0x03
    37a4:	bc 81       	ldd	r27, Y+4	; 0x04
    37a6:	88 16       	cp	r8, r24
    37a8:	99 06       	cpc	r9, r25
    37aa:	aa 06       	cpc	r10, r26
    37ac:	bb 06       	cpc	r11, r27
    37ae:	b0 f0       	brcs	.+44     	; 0x37dc <ErrorHandler_Init+0x84>
        {
            current_index = index;
    37b0:	00 93 23 04 	sts	0x0423, r16
            current_id = ++prev_id;
    37b4:	2f ef       	ldi	r18, 0xFF	; 255
    37b6:	82 1a       	sub	r8, r18
    37b8:	92 0a       	sbc	r9, r18
    37ba:	a2 0a       	sbc	r10, r18
    37bc:	b2 0a       	sbc	r11, r18
    37be:	80 92 22 04 	sts	0x0422, r8
            DEBUG("Current error log index: %u\r\n", index);
    37c2:	1f 93       	push	r17
    37c4:	0f 93       	push	r16
    37c6:	8b e4       	ldi	r24, 0x4B	; 75
    37c8:	9c e0       	ldi	r25, 0x0C	; 12
    37ca:	9f 93       	push	r25
    37cc:	8f 93       	push	r24
    37ce:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            return;
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	12 c0       	rjmp	.+36     	; 0x3800 <ErrorHandler_Init+0xa8>
    37dc:	0f 5f       	subi	r16, 0xFF	; 255
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	2a e0       	ldi	r18, 0x0A	; 10
    37e2:	e2 0e       	add	r14, r18
    37e4:	f1 1c       	adc	r15, r1
    sc_assert(ERROR_LOG_SIZE < 256);

    uint32_t prev_id = 0;
    uint8_t index;

    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    37e6:	00 35       	cpi	r16, 0x50	; 80
    37e8:	11 05       	cpc	r17, r1
    37ea:	19 f0       	breq	.+6      	; 0x37f2 <ErrorHandler_Init+0x9a>
        sc_assert(index < ERROR_LOG_SIZE);

        uint32_t id;
        eeprom_read_block(&id, &error_log[index].id, sizeof(id));

        if (id <= prev_id)
    37ec:	4c 01       	movw	r8, r24
    37ee:	5d 01       	movw	r10, r26
    37f0:	cf cf       	rjmp	.-98     	; 0x3790 <ErrorHandler_Init+0x38>
        }
        prev_id = id;
    }

    //If we come here the log is full and we wrap around to the start.
    current_index = 0;
    37f2:	10 92 23 04 	sts	0x0423, r1
    current_id = ++prev_id;
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	a1 1d       	adc	r26, r1
    37fa:	b1 1d       	adc	r27, r1
    37fc:	80 93 22 04 	sts	0x0422, r24
    return;
}
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	ff 90       	pop	r15
    3812:	ef 90       	pop	r14
    3814:	df 90       	pop	r13
    3816:	cf 90       	pop	r12
    3818:	bf 90       	pop	r11
    381a:	af 90       	pop	r10
    381c:	9f 90       	pop	r9
    381e:	8f 90       	pop	r8
    3820:	7f 90       	pop	r7
    3822:	08 95       	ret

00003824 <ErrorHandler_LogError>:
/// @param  code Error code to save
/// @param  information Additional information to save
/// @return None
///
void ErrorHandler_LogError(uint8_t code, uint8_t information)
{
    3824:	0f 93       	push	r16
    3826:	1f 93       	push	r17
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	2a 97       	sbiw	r28, 0x0a	; 10
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	08 2f       	mov	r16, r24
    383e:	16 2f       	mov	r17, r22
    sc_assert(current_index < ERROR_LOG_SIZE);
    3840:	90 91 23 04 	lds	r25, 0x0423
    3844:	90 35       	cpi	r25, 0x50	; 80
    3846:	40 f0       	brcs	.+16     	; 0x3858 <ErrorHandler_LogError+0x34>
    3848:	4c e2       	ldi	r20, 0x2C	; 44
    384a:	5c e0       	ldi	r21, 0x0C	; 12
    384c:	6f e7       	ldi	r22, 0x7F	; 127
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	8f e0       	ldi	r24, 0x0F	; 15
    3852:	9c e0       	ldi	r25, 0x0C	; 12
    3854:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    sc_assert(current_id  != 0);
    3858:	80 91 22 04 	lds	r24, 0x0422
    385c:	81 11       	cpse	r24, r1
    385e:	08 c0       	rjmp	.+16     	; 0x3870 <ErrorHandler_LogError+0x4c>
    3860:	4f ef       	ldi	r20, 0xFF	; 255
    3862:	5b e0       	ldi	r21, 0x0B	; 11
    3864:	60 e8       	ldi	r22, 0x80	; 128
    3866:	70 e0       	ldi	r23, 0x00	; 0
    3868:	82 ee       	ldi	r24, 0xE2	; 226
    386a:	9b e0       	ldi	r25, 0x0B	; 11
    386c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    error_message_type log_entry;

    //NOTE: Save log entry even if we fail to get a timestamp. It's better then
    //      nothing and it makes no sense to make an error log entry about a failed
    //      error log entry.
    RTC_GetTimeStamp(&log_entry.timestamp);
    3870:	ce 01       	movw	r24, r28
    3872:	05 96       	adiw	r24, 0x05	; 5
    3874:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <RTC_GetTimeStamp>
    log_entry.id = current_id;
    3878:	40 91 22 04 	lds	r20, 0x0422
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	49 83       	std	Y+1, r20	; 0x01
    3884:	5a 83       	std	Y+2, r21	; 0x02
    3886:	6b 83       	std	Y+3, r22	; 0x03
    3888:	7c 83       	std	Y+4, r23	; 0x04
    log_entry.code = code;
    388a:	09 87       	std	Y+9, r16	; 0x09
    log_entry.information = information;
    388c:	1a 87       	std	Y+10, r17	; 0x0a

    eeprom_write_block(&log_entry, &error_log[current_index], sizeof(*error_log));
    388e:	80 91 23 04 	lds	r24, 0x0423
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	bc 01       	movw	r22, r24
    3896:	66 0f       	add	r22, r22
    3898:	77 1f       	adc	r23, r23
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	68 0f       	add	r22, r24
    38a8:	79 1f       	adc	r23, r25
    38aa:	61 5e       	subi	r22, 0xE1	; 225
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255
    38ae:	4a e0       	ldi	r20, 0x0A	; 10
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	ce 01       	movw	r24, r28
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__eewr_block_m328p>

    //Increment log index and wrap around if the end is reached.
    current_index = (current_index + 1) % sizeof(error_log) / sizeof(*error_log);
    38ba:	20 91 23 04 	lds	r18, 0x0423
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	2f 5f       	subi	r18, 0xFF	; 255
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	ad ec       	ldi	r26, 0xCD	; 205
    38c6:	bc ec       	ldi	r27, 0xCC	; 204
    38c8:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    38cc:	96 95       	lsr	r25
    38ce:	87 95       	ror	r24
    38d0:	96 95       	lsr	r25
    38d2:	87 95       	ror	r24
    38d4:	96 95       	lsr	r25
    38d6:	87 95       	ror	r24
    38d8:	80 93 23 04 	sts	0x0423, r24

    //No need for wrap around here, if uint32 is used the id will never overflow
    //during normal operation. (One log entry per second for 100 years and this still works!)
    ++current_id;
    38dc:	80 91 22 04 	lds	r24, 0x0422
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	80 93 22 04 	sts	0x0422, r24
    return;
}
    38e6:	2a 96       	adiw	r28, 0x0a	; 10
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	1f 91       	pop	r17
    38f8:	0f 91       	pop	r16
    38fa:	08 95       	ret

000038fc <ErrorHandler_DumpLog>:
///
/// @param  None
/// @return None
///
void ErrorHandler_DumpLog(void)
{
    38fc:	af 92       	push	r10
    38fe:	bf 92       	push	r11
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	2a 97       	sbiw	r28, 0x0a	; 10
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    uint8_t index;

    DEBUG("<LOG>\r\n");
    3920:	86 e7       	ldi	r24, 0x76	; 118
    3922:	9b e0       	ldi	r25, 0x0B	; 11
    3924:	9f 93       	push	r25
    3926:	8f 93       	push	r24
    3928:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    392c:	0f 2e       	mov	r0, r31
    392e:	ff e1       	ldi	r31, 0x1F	; 31
    3930:	ef 2e       	mov	r14, r31
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	ff 2e       	mov	r15, r31
    3936:	f0 2d       	mov	r31, r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	00 e0       	ldi	r16, 0x00	; 0
    393e:	10 e0       	ldi	r17, 0x00	; 0
        {
            DEBUG("</LOG>\r\n");
            return;
        }

        DEBUG("%u,%lu,%u,", index, entry.id, entry.code);
    3940:	0f 2e       	mov	r0, r31
    3942:	f2 e6       	ldi	r31, 0x62	; 98
    3944:	af 2e       	mov	r10, r31
    3946:	fb e0       	ldi	r31, 0x0B	; 11
    3948:	bf 2e       	mov	r11, r31
    394a:	f0 2d       	mov	r31, r0
        DEBUG("%u,%lu\r\n", entry.information, entry.timestamp);
    394c:	0f 2e       	mov	r0, r31
    394e:	f9 e5       	ldi	r31, 0x59	; 89
    3950:	cf 2e       	mov	r12, r31
    3952:	fb e0       	ldi	r31, 0x0B	; 11
    3954:	df 2e       	mov	r13, r31
    3956:	f0 2d       	mov	r31, r0

    DEBUG("<LOG>\r\n");
    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    {
        error_message_type entry;
        eeprom_read_block(&entry, &error_log[index], sizeof(entry));
    3958:	4a e0       	ldi	r20, 0x0A	; 10
    395a:	50 e0       	ldi	r21, 0x00	; 0
    395c:	b7 01       	movw	r22, r14
    395e:	ce 01       	movw	r24, r28
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <__eerd_block_m328p>

        if (entry.id == 0)
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	9a 81       	ldd	r25, Y+2	; 0x02
    396a:	ab 81       	ldd	r26, Y+3	; 0x03
    396c:	bc 81       	ldd	r27, Y+4	; 0x04
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	a1 05       	cpc	r26, r1
    3972:	b1 05       	cpc	r27, r1
    3974:	49 f4       	brne	.+18     	; 0x3988 <ErrorHandler_DumpLog+0x8c>
        {
            DEBUG("</LOG>\r\n");
    3976:	8d e6       	ldi	r24, 0x6D	; 109
    3978:	9b e0       	ldi	r25, 0x0B	; 11
    397a:	9f 93       	push	r25
    397c:	8f 93       	push	r24
    397e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            return;
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	32 c0       	rjmp	.+100    	; 0x39ec <ErrorHandler_DumpLog+0xf0>
        }

        DEBUG("%u,%lu,%u,", index, entry.id, entry.code);
    3988:	29 85       	ldd	r18, Y+9	; 0x09
    398a:	1f 92       	push	r1
    398c:	2f 93       	push	r18
    398e:	bf 93       	push	r27
    3990:	af 93       	push	r26
    3992:	9f 93       	push	r25
    3994:	8f 93       	push	r24
    3996:	1f 93       	push	r17
    3998:	0f 93       	push	r16
    399a:	bf 92       	push	r11
    399c:	af 92       	push	r10
    399e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        DEBUG("%u,%lu\r\n", entry.information, entry.timestamp);
    39a2:	88 85       	ldd	r24, Y+8	; 0x08
    39a4:	8f 93       	push	r24
    39a6:	8f 81       	ldd	r24, Y+7	; 0x07
    39a8:	8f 93       	push	r24
    39aa:	8e 81       	ldd	r24, Y+6	; 0x06
    39ac:	8f 93       	push	r24
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	8f 93       	push	r24
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	1f 92       	push	r1
    39b6:	8f 93       	push	r24
    39b8:	df 92       	push	r13
    39ba:	cf 92       	push	r12
    39bc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    39c0:	0f 5f       	subi	r16, 0xFF	; 255
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
    39c4:	8a e0       	ldi	r24, 0x0A	; 10
    39c6:	e8 0e       	add	r14, r24
    39c8:	f1 1c       	adc	r15, r1
void ErrorHandler_DumpLog(void)
{
    uint8_t index;

    DEBUG("<LOG>\r\n");
    for (index = 0; index < sizeof(error_log) / sizeof(*error_log); ++index)
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	00 35       	cpi	r16, 0x50	; 80
    39d6:	11 05       	cpc	r17, r1
    39d8:	09 f0       	breq	.+2      	; 0x39dc <ErrorHandler_DumpLog+0xe0>
    39da:	be cf       	rjmp	.-132    	; 0x3958 <ErrorHandler_DumpLog+0x5c>

        DEBUG("%u,%lu,%u,", index, entry.id, entry.code);
        DEBUG("%u,%lu\r\n", entry.information, entry.timestamp);

    }
    DEBUG("</LOG>\r\n");
    39dc:	80 e5       	ldi	r24, 0x50	; 80
    39de:	9b e0       	ldi	r25, 0x0B	; 11
    39e0:	9f 93       	push	r25
    39e2:	8f 93       	push	r24
    39e4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    return;
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
}
    39ec:	2a 96       	adiw	r28, 0x0a	; 10
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	df 90       	pop	r13
    3a06:	cf 90       	pop	r12
    3a08:	bf 90       	pop	r11
    3a0a:	af 90       	pop	r10
    3a0c:	08 95       	ret

00003a0e <FIFO_Pop>:
/// @param  *fifo Pointer to FIFO.
/// @param  *item Pointer to item where the new item will be stored.
/// @return Status of pop. false if FIFO is empty, otherwise true
///
bool FIFO_Pop(fifo_type *fifo, void *item)
{
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	fc 01       	movw	r30, r24
    3a14:	eb 01       	movw	r28, r22
/// @param  *fifo Pointer to FIFO.
/// @return true if FIFO is empty, otherwise false.
///
bool FIFO_IsEmpty(fifo_type *fifo)
{
    return fifo->head == fifo->tail;
    3a16:	83 81       	ldd	r24, Z+3	; 0x03
///
bool FIFO_Pop(fifo_type *fifo, void *item)
{
    uint8_t *ptr;

    if (FIFO_IsEmpty(fifo) == true)
    3a18:	92 81       	ldd	r25, Z+2	; 0x02
    3a1a:	98 17       	cp	r25, r24
    3a1c:	c9 f0       	breq	.+50     	; 0x3a50 <FIFO_Pop+0x42>
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3a1e:	25 81       	ldd	r18, Z+5	; 0x05
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	a9 01       	movw	r20, r18
    3a24:	48 0f       	add	r20, r24
    3a26:	51 1d       	adc	r21, r1
    3a28:	ca 01       	movw	r24, r20
                     (uint16_t)(fifo->size * fifo->item_size));
    3a2a:	44 81       	ldd	r20, Z+4	; 0x04
    3a2c:	42 9f       	mul	r20, r18
    3a2e:	b0 01       	movw	r22, r0
    3a30:	43 9f       	mul	r20, r19
    3a32:	70 0d       	add	r23, r0
    3a34:	11 24       	eor	r1, r1
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3a36:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__udivmodhi4>
    3a3a:	83 83       	std	Z+3, r24	; 0x03
        return false;
    }

    //Move tail one item forward
    fifo->tail = NextPosition(fifo, fifo->tail);
    ptr = fifo->data + fifo->tail;
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	68 0f       	add	r22, r24
    3a42:	71 1d       	adc	r23, r1

    memcpy(item, ptr, fifo->item_size);
    3a44:	a9 01       	movw	r20, r18
    3a46:	ce 01       	movw	r24, r28
    3a48:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <memcpy>
    return true;
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <FIFO_Pop+0x44>
{
    uint8_t *ptr;

    if (FIFO_IsEmpty(fifo) == true)
    {
        return false;
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    fifo->tail = NextPosition(fifo, fifo->tail);
    ptr = fifo->data + fifo->tail;

    memcpy(item, ptr, fifo->item_size);
    return true;
}
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	08 95       	ret

00003a58 <FIFO_IsFull>:
///
/// @param  *fifo Pointer to FIFO.
/// @return true if FIFO is full, otherwise false.
///
bool FIFO_IsFull(fifo_type *fifo)
{
    3a58:	fc 01       	movw	r30, r24
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3a5a:	25 81       	ldd	r18, Z+5	; 0x05
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	82 81       	ldd	r24, Z+2	; 0x02
    3a60:	a9 01       	movw	r20, r18
    3a62:	48 0f       	add	r20, r24
    3a64:	51 1d       	adc	r21, r1
    3a66:	ca 01       	movw	r24, r20
                     (uint16_t)(fifo->size * fifo->item_size));
    3a68:	44 81       	ldd	r20, Z+4	; 0x04
    3a6a:	42 9f       	mul	r20, r18
    3a6c:	b0 01       	movw	r22, r0
    3a6e:	43 9f       	mul	r20, r19
    3a70:	70 0d       	add	r23, r0
    3a72:	11 24       	eor	r1, r1
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3a74:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__udivmodhi4>
    3a78:	98 2f       	mov	r25, r24
/// @param  *fifo Pointer to FIFO.
/// @return true if FIFO is full, otherwise false.
///
bool FIFO_IsFull(fifo_type *fifo)
{
    return NextPosition(fifo, fifo->head) == fifo->tail;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	23 81       	ldd	r18, Z+3	; 0x03
    3a7e:	29 13       	cpse	r18, r25
    3a80:	80 e0       	ldi	r24, 0x00	; 0
}
    3a82:	08 95       	ret

00003a84 <FIFO_Push>:
/// @param  *fifo Pointer to FIFO.
/// @param  *item Pointer to item to push.
/// @return Status of push. false if FIFO is full, otherwise true.
///
bool FIFO_Push(fifo_type *fifo, void *item)
{
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	ec 01       	movw	r28, r24
    3a8e:	8b 01       	movw	r16, r22
    uint8_t *ptr;

    if (FIFO_IsFull(fifo) == true)
    3a90:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <FIFO_IsFull>
    3a94:	81 11       	cpse	r24, r1
    3a96:	1c c0       	rjmp	.+56     	; 0x3ad0 <FIFO_Push+0x4c>
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3a98:	2d 81       	ldd	r18, Y+5	; 0x05
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	48 0f       	add	r20, r24
    3aa2:	51 1d       	adc	r21, r1
    3aa4:	ca 01       	movw	r24, r20
                     (uint16_t)(fifo->size * fifo->item_size));
    3aa6:	4c 81       	ldd	r20, Y+4	; 0x04
    3aa8:	42 9f       	mul	r20, r18
    3aaa:	b0 01       	movw	r22, r0
    3aac:	43 9f       	mul	r20, r19
    3aae:	70 0d       	add	r23, r0
    3ab0:	11 24       	eor	r1, r1
//////////////////////////////////////////////////////////////////////////

//TODO: Check typecasts, overflow?
uint8_t NextPosition(fifo_type *fifo, uint8_t current_position)
{
    return (uint8_t)((uint16_t)(current_position + fifo->item_size) %
    3ab2:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__udivmodhi4>
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
        return false;
    }

    //Move head one item forward
    fifo->head = NextPosition(fifo, fifo->head);
    ptr = fifo->data + fifo->head;
    3ab8:	e8 81       	ld	r30, Y
    3aba:	f9 81       	ldd	r31, Y+1	; 0x01

    memcpy(ptr, item, fifo->item_size);
    3abc:	a9 01       	movw	r20, r18
    3abe:	b8 01       	movw	r22, r16
    3ac0:	9f 01       	movw	r18, r30
    3ac2:	28 0f       	add	r18, r24
    3ac4:	31 1d       	adc	r19, r1
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <memcpy>
    return true;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	01 c0       	rjmp	.+2      	; 0x3ad2 <FIFO_Push+0x4e>
{
    uint8_t *ptr;

    if (FIFO_IsFull(fifo) == true)
    {
        return false;
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    fifo->head = NextPosition(fifo, fifo->head);
    ptr = fifo->data + fifo->head;

    memcpy(ptr, item, fifo->item_size);
    return true;
}
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	08 95       	ret

00003adc <guiInterface_DrawViewIndicator>:
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void guiInterface_DrawViewIndicator(indicator_position_type position)
{
    switch (position)
    3adc:	88 23       	and	r24, r24
    3ade:	19 f0       	breq	.+6      	; 0x3ae6 <guiInterface_DrawViewIndicator+0xa>
    3ae0:	81 30       	cpi	r24, 0x01	; 1
    3ae2:	41 f0       	breq	.+16     	; 0x3af4 <guiInterface_DrawViewIndicator+0x18>
    3ae4:	0e c0       	rjmp	.+28     	; 0x3b02 <guiInterface_DrawViewIndicator+0x26>
    {
        case INDICATOR_POS_RIGHT:
            libUI_DrawLine(DISPLAY_WIDTH - 1, 0, DISPLAY_WIDTH - 1,
    3ae6:	2f e1       	ldi	r18, 0x1F	; 31
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	8f e7       	ldi	r24, 0x7F	; 127
    3aee:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
                           DISPLAY_HEIGHT - 1);
            break;
    3af2:	08 95       	ret

        case INDICATOR_POS_LEFT:
            libUI_DrawLine(0, 0, 0, DISPLAY_HEIGHT - 1);
    3af4:	2f e1       	ldi	r18, 0x1F	; 31
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
            break;
    3b00:	08 95       	ret

        case INDICATOR_POS_TOP:
        case INDICATOR_POS_BOTTOM:
        default:
            WARNING("Invalid indicator position: %u", (uint8_t)position);
    3b02:	1f 92       	push	r1
    3b04:	8f 93       	push	r24
    3b06:	88 e4       	ldi	r24, 0x48	; 72
    3b08:	92 e0       	ldi	r25, 0x02	; 2
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	89 e6       	ldi	r24, 0x69	; 105
    3b10:	9c e0       	ldi	r25, 0x0C	; 12
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
            break;
    3b1a:	0f 90       	pop	r0
    3b1c:	0f 90       	pop	r0
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	08 95       	ret

00003b28 <DrawDetailedNodeView>:
    }
    return;
}

static void DrawDetailedNodeView(uint16_t context)
{
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	18 2f       	mov	r17, r24
    3b32:	09 2f       	mov	r16, r25
    packet_frame_type *packet;
    packet = Nodes_GetLatestData(context);
    3b34:	0e 94 f6 24 	call	0x49ec	; 0x49ec <Nodes_GetLatestData>
    3b38:	ec 01       	movw	r28, r24

    if (packet != NULL)
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	31 f1       	breq	.+76     	; 0x3b8a <DrawDetailedNodeView+0x62>
    {
        libUI_Print("RSSI: %d", 4, 2, packet->header.rssi);
    3b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b40:	82 2f       	mov	r24, r18
    3b42:	99 27       	eor	r25, r25
    3b44:	87 fd       	sbrc	r24, 7
    3b46:	90 95       	com	r25
    3b48:	9f 93       	push	r25
    3b4a:	2f 93       	push	r18
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	8f 93       	push	r24
    3b50:	14 e0       	ldi	r17, 0x04	; 4
    3b52:	1f 93       	push	r17
    3b54:	82 e5       	ldi	r24, 0x52	; 82
    3b56:	9d e0       	ldi	r25, 0x0D	; 13
    3b58:	9f 93       	push	r25
    3b5a:	8f 93       	push	r24
    3b5c:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
        libUI_Print("Source: 0x%02X", 4, 16, packet->header.source);
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	1f 92       	push	r1
    3b64:	8f 93       	push	r24
    3b66:	80 e1       	ldi	r24, 0x10	; 16
    3b68:	8f 93       	push	r24
    3b6a:	1f 93       	push	r17
    3b6c:	83 e4       	ldi	r24, 0x43	; 67
    3b6e:	9d e0       	ldi	r25, 0x0D	; 13
    3b70:	9f 93       	push	r25
    3b72:	8f 93       	push	r24
    3b74:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    3b78:	8d b7       	in	r24, 0x3d	; 61
    3b7a:	9e b7       	in	r25, 0x3e	; 62
    3b7c:	0c 96       	adiw	r24, 0x0c	; 12
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	9e bf       	out	0x3e, r25	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	8d bf       	out	0x3d, r24	; 61
    3b88:	26 c0       	rjmp	.+76     	; 0x3bd6 <DrawDetailedNodeView+0xae>
    }
    else
    {
        libUI_Print("RSSI: -", 16, 2);
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	8f 93       	push	r24
    3b8e:	c0 e1       	ldi	r28, 0x10	; 16
    3b90:	cf 93       	push	r28
    3b92:	2b e3       	ldi	r18, 0x3B	; 59
    3b94:	3d e0       	ldi	r19, 0x0D	; 13
    3b96:	3f 93       	push	r19
    3b98:	2f 93       	push	r18
    3b9a:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
        libUI_Print("Source: -", 16, 16);
    3b9e:	cf 93       	push	r28
    3ba0:	cf 93       	push	r28
    3ba2:	21 e3       	ldi	r18, 0x31	; 49
    3ba4:	3d e0       	ldi	r19, 0x0D	; 13
    3ba6:	3f 93       	push	r19
    3ba8:	2f 93       	push	r18
    3baa:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
        INFO("No valid data, context: %u", context);
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	84 e7       	ldi	r24, 0x74	; 116
    3bb4:	92 e0       	ldi	r25, 0x02	; 2
    3bb6:	9f 93       	push	r25
    3bb8:	8f 93       	push	r24
    3bba:	88 e0       	ldi	r24, 0x08	; 8
    3bbc:	9d e0       	ldi	r25, 0x0D	; 13
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    3bc6:	8d b7       	in	r24, 0x3d	; 61
    3bc8:	9e b7       	in	r25, 0x3e	; 62
    3bca:	0e 96       	adiw	r24, 0x0e	; 14
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	9e bf       	out	0x3e, r25	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	8d bf       	out	0x3d, r24	; 61
    }
    return;
}
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <DrawNodeView>:
//////////////////////////////////////////////////////////////////////////
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void DrawNodeView(uint16_t context)
{
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	00 d0       	rcall	.+0      	; 0x3bee <DrawNodeView+0xe>
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <DrawNodeView+0x10>
    3bf0:	1f 92       	push	r1
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	7c 01       	movw	r14, r24
    packet_frame_type *packet;
    static bool batt = true;

    //Add one to node index(context) since end users are more familiar
    //with indexing starting at 1.
    libUI_Print("%u", 1, 0, context + 1);
    3bf8:	01 96       	adiw	r24, 0x01	; 1
    3bfa:	9f 93       	push	r25
    3bfc:	8f 93       	push	r24
    3bfe:	1f 92       	push	r1
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	8f 93       	push	r24
    3c04:	85 e0       	ldi	r24, 0x05	; 5
    3c06:	9d e0       	ldi	r25, 0x0D	; 13
    3c08:	9f 93       	push	r25
    3c0a:	8f 93       	push	r24
    3c0c:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>

    packet = Nodes_GetLatestData(context);
    3c10:	8e 2d       	mov	r24, r14
    3c12:	0e 94 f6 24 	call	0x49ec	; 0x49ec <Nodes_GetLatestData>
    3c16:	8c 01       	movw	r16, r24
}

static void DrawBatteryIndicator(void)
{

    libUI_DrawRectangle(BATT_INDICATOR_X, BATT_INDICATOR_Y, 6, 3);
    3c18:	23 e0       	ldi	r18, 0x03	; 3
    3c1a:	46 e0       	ldi	r20, 0x06	; 6
    3c1c:	6a e1       	ldi	r22, 0x1A	; 26
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <libUI_DrawRectangle>

    libUI_DrawLine(BATT_INDICATOR_X + 7, BATT_INDICATOR_Y + 1, BATT_INDICATOR_X + 7,
    3c24:	2c e1       	ldi	r18, 0x1C	; 28
    3c26:	48 e0       	ldi	r20, 0x08	; 8
    3c28:	6b e1       	ldi	r22, 0x1B	; 27
    3c2a:	88 e0       	ldi	r24, 0x08	; 8
    3c2c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
    }

    //batt = !batt;


    if (packet != NULL)
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	01 15       	cp	r16, r1
    3c3e:	11 05       	cpc	r17, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <DrawNodeView+0x64>
    3c42:	45 c0       	rjmp	.+138    	; 0x3cce <DrawNodeView+0xee>
    {
        float_parts_type parts;

        parts = FloatToParts(((dht22_data_type *)packet->content.data)->temperature);
    3c44:	f8 01       	movw	r30, r16
    3c46:	61 89       	ldd	r22, Z+17	; 0x11
    3c48:	72 89       	ldd	r23, Z+18	; 0x12
    3c4a:	83 89       	ldd	r24, Z+19	; 0x13
    3c4c:	94 89       	ldd	r25, Z+20	; 0x14
    3c4e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <FloatToParts>
    3c52:	29 83       	std	Y+1, r18	; 0x01
    3c54:	3a 83       	std	Y+2, r19	; 0x02
    3c56:	4b 83       	std	Y+3, r20	; 0x03
    3c58:	5c 83       	std	Y+4, r21	; 0x04
    3c5a:	6d 83       	std	Y+5, r22	; 0x05
        libUI_Print("Temperature: %li.%uC", 8, 2, parts.integer, parts.fractional);
    3c5c:	1f 92       	push	r1
    3c5e:	6f 93       	push	r22
    3c60:	8c 81       	ldd	r24, Y+4	; 0x04
    3c62:	8f 93       	push	r24
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	8f 93       	push	r24
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	8f 93       	push	r24
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	8f 93       	push	r24
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	8f 93       	push	r24
    3c74:	88 e0       	ldi	r24, 0x08	; 8
    3c76:	8f 93       	push	r24
    3c78:	80 ef       	ldi	r24, 0xF0	; 240
    3c7a:	9c e0       	ldi	r25, 0x0C	; 12
    3c7c:	9f 93       	push	r25
    3c7e:	8f 93       	push	r24
    3c80:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>

        parts = FloatToParts(((dht22_data_type *)packet->content.data)->humidity);
    3c84:	f8 01       	movw	r30, r16
    3c86:	65 85       	ldd	r22, Z+13	; 0x0d
    3c88:	76 85       	ldd	r23, Z+14	; 0x0e
    3c8a:	87 85       	ldd	r24, Z+15	; 0x0f
    3c8c:	90 89       	ldd	r25, Z+16	; 0x10
    3c8e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <FloatToParts>
    3c92:	29 83       	std	Y+1, r18	; 0x01
    3c94:	3a 83       	std	Y+2, r19	; 0x02
    3c96:	4b 83       	std	Y+3, r20	; 0x03
    3c98:	5c 83       	std	Y+4, r21	; 0x04
        libUI_Print("Humidity: %li.%u%%", 18, 16, parts.integer, parts.fractional);
    3c9a:	1f 92       	push	r1
    3c9c:	6f 93       	push	r22
    3c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca0:	8f 93       	push	r24
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	8f 93       	push	r24
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	8f 93       	push	r24
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	8f 93       	push	r24
    3cae:	80 e1       	ldi	r24, 0x10	; 16
    3cb0:	8f 93       	push	r24
    3cb2:	82 e1       	ldi	r24, 0x12	; 18
    3cb4:	8f 93       	push	r24
    3cb6:	8d ed       	ldi	r24, 0xDD	; 221
    3cb8:	9c e0       	ldi	r25, 0x0C	; 12
    3cba:	9f 93       	push	r25
    3cbc:	8f 93       	push	r24
    3cbe:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	25 c0       	rjmp	.+74     	; 0x3d18 <DrawNodeView+0x138>
    }
    else
    {
        libUI_Print("Temperature: -", 8, 2);
    3cce:	82 e0       	ldi	r24, 0x02	; 2
    3cd0:	8f 93       	push	r24
    3cd2:	88 e0       	ldi	r24, 0x08	; 8
    3cd4:	8f 93       	push	r24
    3cd6:	8e ec       	ldi	r24, 0xCE	; 206
    3cd8:	9c e0       	ldi	r25, 0x0C	; 12
    3cda:	9f 93       	push	r25
    3cdc:	8f 93       	push	r24
    3cde:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
        libUI_Print("Humidity: -", 18, 16);
    3ce2:	80 e1       	ldi	r24, 0x10	; 16
    3ce4:	8f 93       	push	r24
    3ce6:	82 e1       	ldi	r24, 0x12	; 18
    3ce8:	8f 93       	push	r24
    3cea:	82 ec       	ldi	r24, 0xC2	; 194
    3cec:	9c e0       	ldi	r25, 0x0C	; 12
    3cee:	9f 93       	push	r25
    3cf0:	8f 93       	push	r24
    3cf2:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
        INFO("No valid data, context: %u", context);
    3cf6:	ff 92       	push	r15
    3cf8:	ef 92       	push	r14
    3cfa:	87 e6       	ldi	r24, 0x67	; 103
    3cfc:	92 e0       	ldi	r25, 0x02	; 2
    3cfe:	9f 93       	push	r25
    3d00:	8f 93       	push	r24
    3d02:	89 e9       	ldi	r24, 0x99	; 153
    3d04:	9c e0       	ldi	r25, 0x0C	; 12
    3d06:	9f 93       	push	r25
    3d08:	8f 93       	push	r24
    3d0a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    }
    return;
}
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	08 95       	ret

00003d30 <guiNodes_Init>:
//////////////////////////////////////////////////////////////////////////
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void guiNodes_Init(void)
{
    3d30:	af 92       	push	r10
    3d32:	bf 92       	push	r11
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ef 92       	push	r14
    3d3a:	ff 92       	push	r15
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    uint8_t view_index;

    for (view_index = 0; view_index < MAX_NR_NODE_VIEWS; ++view_index)
    {
        node_views[view_index].draw_function = DrawNodeView;
    3d44:	80 ef       	ldi	r24, 0xF0	; 240
    3d46:	9d e1       	ldi	r25, 0x1D	; 29
    3d48:	90 93 25 04 	sts	0x0425, r25
    3d4c:	80 93 24 04 	sts	0x0424, r24
        node_views[view_index].context = view_index;
    3d50:	10 92 27 04 	sts	0x0427, r1
    3d54:	10 92 26 04 	sts	0x0426, r1
        node_views[view_index].child = NULL;
    3d58:	10 92 2b 04 	sts	0x042B, r1
    3d5c:	10 92 2a 04 	sts	0x042A, r1
        node_views[view_index].prev = NULL;
    3d60:	10 92 2f 04 	sts	0x042F, r1
    3d64:	10 92 2e 04 	sts	0x042E, r1
        node_views[view_index].next = NULL;
    3d68:	10 92 2d 04 	sts	0x042D, r1
    3d6c:	10 92 2c 04 	sts	0x042C, r1
        node_views[view_index].parent = NULL;
    3d70:	10 92 29 04 	sts	0x0429, r1
    3d74:	10 92 28 04 	sts	0x0428, r1
        Interface_AddView(&node_views[view_index]);
    3d78:	84 e2       	ldi	r24, 0x24	; 36
    3d7a:	94 e0       	ldi	r25, 0x04	; 4
    3d7c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <Interface_AddView>
    3d80:	c0 e3       	ldi	r28, 0x30	; 48
    3d82:	d4 e0       	ldi	r29, 0x04	; 4
    3d84:	cc 24       	eor	r12, r12
    3d86:	c3 94       	inc	r12
    3d88:	d1 2c       	mov	r13, r1

        sc_assert(view_index + MAX_NR_NODE_VIEWS < MAX_NR_NODE_VIEWS * 2);
    3d8a:	23 e0       	ldi	r18, 0x03	; 3
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
        node_views[view_index].context = view_index;
        node_views[view_index].child = NULL;
        node_views[view_index].prev = NULL;
        node_views[view_index].next = NULL;
        node_views[view_index].parent = NULL;
        Interface_AddView(&node_views[view_index]);
    3d8e:	84 e2       	ldi	r24, 0x24	; 36
    3d90:	94 e0       	ldi	r25, 0x04	; 4
    uint8_t view_index;

    for (view_index = 0; view_index < MAX_NR_NODE_VIEWS; ++view_index)
    {
        node_views[view_index].draw_function = DrawNodeView;
        node_views[view_index].context = view_index;
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	60 e0       	ldi	r22, 0x00	; 0
        node_views[view_index].parent = NULL;
        Interface_AddView(&node_views[view_index]);

        sc_assert(view_index + MAX_NR_NODE_VIEWS < MAX_NR_NODE_VIEWS * 2);

        node_views[view_index + MAX_NR_NODE_VIEWS].draw_function =
    3d96:	04 e9       	ldi	r16, 0x94	; 148
    3d98:	1d e1       	ldi	r17, 0x1D	; 29
{
    uint8_t view_index;

    for (view_index = 0; view_index < MAX_NR_NODE_VIEWS; ++view_index)
    {
        node_views[view_index].draw_function = DrawNodeView;
    3d9a:	0f 2e       	mov	r0, r31
    3d9c:	f0 ef       	ldi	r31, 0xF0	; 240
    3d9e:	ef 2e       	mov	r14, r31
    3da0:	fd e1       	ldi	r31, 0x1D	; 29
    3da2:	ff 2e       	mov	r15, r31
    3da4:	f0 2d       	mov	r31, r0
    3da6:	27 c0       	rjmp	.+78     	; 0x3df6 <guiNodes_Init+0xc6>
    3da8:	ac 2e       	mov	r10, r28
    3daa:	bd 2e       	mov	r11, r29
    3dac:	f9 82       	std	Y+1, r15	; 0x01
    3dae:	e8 82       	st	Y, r14
        node_views[view_index].context = view_index;
    3db0:	db 82       	std	Y+3, r13	; 0x03
    3db2:	ca 82       	std	Y+2, r12	; 0x02
        node_views[view_index].child = NULL;
    3db4:	1f 82       	std	Y+7, r1	; 0x07
    3db6:	1e 82       	std	Y+6, r1	; 0x06
        node_views[view_index].prev = NULL;
    3db8:	1b 86       	std	Y+11, r1	; 0x0b
    3dba:	1a 86       	std	Y+10, r1	; 0x0a
        node_views[view_index].next = NULL;
    3dbc:	19 86       	std	Y+9, r1	; 0x09
    3dbe:	18 86       	std	Y+8, r1	; 0x08
        node_views[view_index].parent = NULL;
    3dc0:	1d 82       	std	Y+5, r1	; 0x05
    3dc2:	1c 82       	std	Y+4, r1	; 0x04
        Interface_AddView(&node_views[view_index]);
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <Interface_AddView>
    3dca:	96 01       	movw	r18, r12
    3dcc:	2d 5f       	subi	r18, 0xFD	; 253
    3dce:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd0:	c6 01       	movw	r24, r12
    3dd2:	01 96       	adiw	r24, 0x01	; 1
    3dd4:	2c 96       	adiw	r28, 0x0c	; 12

        sc_assert(view_index + MAX_NR_NODE_VIEWS < MAX_NR_NODE_VIEWS * 2);
    3dd6:	84 30       	cpi	r24, 0x04	; 4
    3dd8:	91 05       	cpc	r25, r1
    3dda:	41 f4       	brne	.+16     	; 0x3dec <guiNodes_Init+0xbc>
    3ddc:	4d e6       	ldi	r20, 0x6D	; 109
    3dde:	5d e0       	ldi	r21, 0x0D	; 13
    3de0:	62 e6       	ldi	r22, 0x62	; 98
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	8b e5       	ldi	r24, 0x5B	; 91
    3de6:	9d e0       	ldi	r25, 0x0D	; 13
    3de8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    uint8_t view_index;

    for (view_index = 0; view_index < MAX_NR_NODE_VIEWS; ++view_index)
    {
        node_views[view_index].draw_function = DrawNodeView;
        node_views[view_index].context = view_index;
    3dec:	7c 2d       	mov	r23, r12
    3dee:	6d 2d       	mov	r22, r13
    3df0:	6c 01       	movw	r12, r24
        node_views[view_index].child = NULL;
        node_views[view_index].prev = NULL;
        node_views[view_index].next = NULL;
        node_views[view_index].parent = NULL;
        Interface_AddView(&node_views[view_index]);
    3df2:	8a 2d       	mov	r24, r10
    3df4:	9b 2d       	mov	r25, r11

        sc_assert(view_index + MAX_NR_NODE_VIEWS < MAX_NR_NODE_VIEWS * 2);

        node_views[view_index + MAX_NR_NODE_VIEWS].draw_function =
    3df6:	a9 01       	movw	r20, r18
    3df8:	44 0f       	add	r20, r20
    3dfa:	55 1f       	adc	r21, r21
    3dfc:	fa 01       	movw	r30, r20
    3dfe:	e2 0f       	add	r30, r18
    3e00:	f3 1f       	adc	r31, r19
    3e02:	ee 0f       	add	r30, r30
    3e04:	ff 1f       	adc	r31, r31
    3e06:	ee 0f       	add	r30, r30
    3e08:	ff 1f       	adc	r31, r31
    3e0a:	ec 5d       	subi	r30, 0xDC	; 220
    3e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e0e:	11 83       	std	Z+1, r17	; 0x01
    3e10:	00 83       	st	Z, r16
            DrawDetailedNodeView;
        node_views[view_index + MAX_NR_NODE_VIEWS].context = view_index;
    3e12:	72 83       	std	Z+2, r23	; 0x02
    3e14:	63 83       	std	Z+3, r22	; 0x03
        node_views[view_index + MAX_NR_NODE_VIEWS].child = NULL;
    3e16:	17 82       	std	Z+7, r1	; 0x07
    3e18:	16 82       	std	Z+6, r1	; 0x06
        node_views[view_index + MAX_NR_NODE_VIEWS].prev = NULL;
    3e1a:	13 86       	std	Z+11, r1	; 0x0b
    3e1c:	12 86       	std	Z+10, r1	; 0x0a
        node_views[view_index + MAX_NR_NODE_VIEWS].next = NULL;
    3e1e:	11 86       	std	Z+9, r1	; 0x09
    3e20:	10 86       	std	Z+8, r1	; 0x08
        node_views[view_index + MAX_NR_NODE_VIEWS].parent = NULL;
    3e22:	15 82       	std	Z+5, r1	; 0x05
    3e24:	14 82       	std	Z+4, r1	; 0x04
        Interface_AddChild(&node_views[view_index],
    3e26:	bf 01       	movw	r22, r30
    3e28:	0e 94 32 22 	call	0x4464	; 0x4464 <Interface_AddChild>

void guiNodes_Init(void)
{
    uint8_t view_index;

    for (view_index = 0; view_index < MAX_NR_NODE_VIEWS; ++view_index)
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	c8 16       	cp	r12, r24
    3e30:	d1 04       	cpc	r13, r1
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <guiNodes_Init+0x106>
    3e34:	b9 cf       	rjmp	.-142    	; 0x3da8 <guiNodes_Init+0x78>
        node_views[view_index + MAX_NR_NODE_VIEWS].parent = NULL;
        Interface_AddChild(&node_views[view_index],
                           &node_views[view_index + MAX_NR_NODE_VIEWS]);
    }
    return;
}
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	ff 90       	pop	r15
    3e40:	ef 90       	pop	r14
    3e42:	df 90       	pop	r13
    3e44:	cf 90       	pop	r12
    3e46:	bf 90       	pop	r11
    3e48:	af 90       	pop	r10
    3e4a:	08 95       	ret

00003e4c <AdjustTimeForView>:
    libUI_Print("%02u:%02u:%02u", 40, 16, time.hour, time.minute, time.second);
    return;
}

static void AdjustTimeForView(rtc_time_type *time)
{
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	1f 92       	push	r1
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
    3e5a:	8c 01       	movw	r16, r24
    RTC_AddMinutes(time, UTC_OFFSET_MIN);
    3e5c:	6c e3       	ldi	r22, 0x3C	; 60
    3e5e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <RTC_AddMinutes>

    uint8_t day;
    RTC_GetDay(&day);
    3e62:	ce 01       	movw	r24, r28
    3e64:	01 96       	adiw	r24, 0x01	; 1
    3e66:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <libDS3234_GetDay>

    if (RTC_IsDaylightSavingActive(time, day))
    3e6a:	69 81       	ldd	r22, Y+1	; 0x01
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <RTC_IsDaylightSavingActive>
    3e72:	88 23       	and	r24, r24
    3e74:	21 f0       	breq	.+8      	; 0x3e7e <AdjustTimeForView+0x32>
    {
        RTC_AddMinutes(time, DST_OFFSET_MIN);
    3e76:	6c e3       	ldi	r22, 0x3C	; 60
    3e78:	c8 01       	movw	r24, r16
    3e7a:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <RTC_AddMinutes>
    }
    return;
    3e7e:	0f 90       	pop	r0
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	1f 91       	pop	r17
    3e86:	0f 91       	pop	r16
    3e88:	08 95       	ret

00003e8a <DrawDetailedTimeView>:
    libUI_Print("%02u:%02u", 49, 11, time.hour, time.minute);
    return;
}

static void DrawDetailedTimeView(uint16_t context __attribute__ ((unused)))
{
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	00 d0       	rcall	.+0      	; 0x3e90 <DrawDetailedTimeView+0x6>
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <DrawDetailedTimeView+0x8>
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <DrawDetailedTimeView+0xa>
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    rtc_time_type time;
    RTC_GetCurrentTime(&time);
    3e98:	ce 01       	movw	r24, r28
    3e9a:	01 96       	adiw	r24, 0x01	; 1
    3e9c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <RTC_GetCurrentTime>

    AdjustTimeForView(&time);
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <AdjustTimeForView>

    libUI_Print("20%02u-%02u-%02u", 31, 2, time.year, time.month, time.date);
    3ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eaa:	1f 92       	push	r1
    3eac:	8f 93       	push	r24
    3eae:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb0:	1f 92       	push	r1
    3eb2:	8f 93       	push	r24
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	1f 92       	push	r1
    3eb8:	8f 93       	push	r24
    3eba:	82 e0       	ldi	r24, 0x02	; 2
    3ebc:	8f 93       	push	r24
    3ebe:	8f e1       	ldi	r24, 0x1F	; 31
    3ec0:	8f 93       	push	r24
    3ec2:	8d eb       	ldi	r24, 0xBD	; 189
    3ec4:	9d e0       	ldi	r25, 0x0D	; 13
    3ec6:	9f 93       	push	r25
    3ec8:	8f 93       	push	r24
    3eca:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    libUI_Print("%02u:%02u:%02u", 40, 16, time.hour, time.minute, time.second);
    3ece:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed0:	1f 92       	push	r1
    3ed2:	8f 93       	push	r24
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	1f 92       	push	r1
    3ed8:	8f 93       	push	r24
    3eda:	8c 81       	ldd	r24, Y+4	; 0x04
    3edc:	1f 92       	push	r1
    3ede:	8f 93       	push	r24
    3ee0:	80 e1       	ldi	r24, 0x10	; 16
    3ee2:	8f 93       	push	r24
    3ee4:	88 e2       	ldi	r24, 0x28	; 40
    3ee6:	8f 93       	push	r24
    3ee8:	8e ea       	ldi	r24, 0xAE	; 174
    3eea:	9d e0       	ldi	r25, 0x0D	; 13
    3eec:	9f 93       	push	r25
    3eee:	8f 93       	push	r24
    3ef0:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	f8 94       	cli
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	cd bf       	out	0x3d, r28	; 61
    return;
}
    3efe:	26 96       	adiw	r28, 0x06	; 6
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	08 95       	ret

00003f10 <DrawClockView>:
//////////////////////////////////////////////////////////////////////////
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void DrawClockView(uint16_t context __attribute__ ((unused)))
{
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <DrawClockView+0x6>
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <DrawClockView+0x8>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <DrawClockView+0xa>
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    rtc_time_type time;
    RTC_GetCurrentTime(&time);
    3f1e:	ce 01       	movw	r24, r28
    3f20:	01 96       	adiw	r24, 0x01	; 1
    3f22:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <RTC_GetCurrentTime>

    AdjustTimeForView(&time);
    3f26:	ce 01       	movw	r24, r28
    3f28:	01 96       	adiw	r24, 0x01	; 1
    3f2a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <AdjustTimeForView>

    libUI_Print("%02u:%02u", 49, 11, time.hour, time.minute);
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	1f 92       	push	r1
    3f32:	8f 93       	push	r24
    3f34:	8c 81       	ldd	r24, Y+4	; 0x04
    3f36:	1f 92       	push	r1
    3f38:	8f 93       	push	r24
    3f3a:	8b e0       	ldi	r24, 0x0B	; 11
    3f3c:	8f 93       	push	r24
    3f3e:	81 e3       	ldi	r24, 0x31	; 49
    3f40:	8f 93       	push	r24
    3f42:	84 ea       	ldi	r24, 0xA4	; 164
    3f44:	9d e0       	ldi	r25, 0x0D	; 13
    3f46:	9f 93       	push	r25
    3f48:	8f 93       	push	r24
    3f4a:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    return;
}
    3f58:	26 96       	adiw	r28, 0x06	; 6
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	f8 94       	cli
    3f5e:	de bf       	out	0x3e, r29	; 62
    3f60:	0f be       	out	0x3f, r0	; 63
    3f62:	cd bf       	out	0x3d, r28	; 61
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	08 95       	ret

00003f6a <guiRTC_Init>:
/// @param  None
/// @return None
///
void guiRTC_Init(void)
{
    clock_view.draw_function = DrawClockView;
    3f6a:	88 e8       	ldi	r24, 0x88	; 136
    3f6c:	9f e1       	ldi	r25, 0x1F	; 31
    3f6e:	90 93 79 04 	sts	0x0479, r25
    3f72:	80 93 78 04 	sts	0x0478, r24
    clock_view.context = 0;
    3f76:	10 92 7b 04 	sts	0x047B, r1
    3f7a:	10 92 7a 04 	sts	0x047A, r1
    clock_view.child = NULL;
    3f7e:	10 92 7f 04 	sts	0x047F, r1
    3f82:	10 92 7e 04 	sts	0x047E, r1
    clock_view.prev = NULL;
    3f86:	10 92 83 04 	sts	0x0483, r1
    3f8a:	10 92 82 04 	sts	0x0482, r1
    clock_view.next = NULL;
    3f8e:	10 92 81 04 	sts	0x0481, r1
    3f92:	10 92 80 04 	sts	0x0480, r1
    clock_view.parent = NULL;
    3f96:	10 92 7d 04 	sts	0x047D, r1
    3f9a:	10 92 7c 04 	sts	0x047C, r1

    clock_and_date_view.draw_function = DrawDetailedTimeView;
    3f9e:	85 e4       	ldi	r24, 0x45	; 69
    3fa0:	9f e1       	ldi	r25, 0x1F	; 31
    3fa2:	90 93 6d 04 	sts	0x046D, r25
    3fa6:	80 93 6c 04 	sts	0x046C, r24
    clock_and_date_view.context = 0;
    3faa:	10 92 6f 04 	sts	0x046F, r1
    3fae:	10 92 6e 04 	sts	0x046E, r1
    clock_and_date_view.child = NULL;
    3fb2:	10 92 73 04 	sts	0x0473, r1
    3fb6:	10 92 72 04 	sts	0x0472, r1
    clock_and_date_view.prev = NULL;
    3fba:	10 92 77 04 	sts	0x0477, r1
    3fbe:	10 92 76 04 	sts	0x0476, r1
    clock_and_date_view.next = NULL;
    3fc2:	10 92 75 04 	sts	0x0475, r1
    3fc6:	10 92 74 04 	sts	0x0474, r1
    clock_and_date_view.parent = NULL;
    3fca:	10 92 71 04 	sts	0x0471, r1
    3fce:	10 92 70 04 	sts	0x0470, r1

    Interface_AddChild(&clock_view, &clock_and_date_view);
    3fd2:	6c e6       	ldi	r22, 0x6C	; 108
    3fd4:	74 e0       	ldi	r23, 0x04	; 4
    3fd6:	88 e7       	ldi	r24, 0x78	; 120
    3fd8:	94 e0       	ldi	r25, 0x04	; 4
    3fda:	0e 94 32 22 	call	0x4464	; 0x4464 <Interface_AddChild>
    Interface_AddView(&clock_view);
    3fde:	88 e7       	ldi	r24, 0x78	; 120
    3fe0:	94 e0       	ldi	r25, 0x04	; 4
    3fe2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <Interface_AddView>

    INFO("Init done");
    3fe6:	89 e8       	ldi	r24, 0x89	; 137
    3fe8:	92 e0       	ldi	r25, 0x02	; 2
    3fea:	9f 93       	push	r25
    3fec:	8f 93       	push	r24
    3fee:	8e ec       	ldi	r24, 0xCE	; 206
    3ff0:	9d e0       	ldi	r25, 0x0D	; 13
    3ff2:	9f 93       	push	r25
    3ff4:	8f 93       	push	r24
    3ff6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	08 95       	ret

00004004 <guiSensor_DrawSensorInformation>:
    Interface_AddView(&temperature_view);
    return;
}

void guiSensor_DrawSensorInformation(uint16_t context __attribute__ ((unused)))
{
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    libUI_Print("Avg. period: %u min", 6, 2, (AVERAGE_WINDOW_S / 60));
    4008:	1f 92       	push	r1
    400a:	d5 e0       	ldi	r29, 0x05	; 5
    400c:	df 93       	push	r29
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	8f 93       	push	r24
    4012:	c6 e0       	ldi	r28, 0x06	; 6
    4014:	cf 93       	push	r28
    4016:	82 e4       	ldi	r24, 0x42	; 66
    4018:	9e e0       	ldi	r25, 0x0E	; 14
    401a:	9f 93       	push	r25
    401c:	8f 93       	push	r24
    401e:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    libUI_Print("Sample time: %u sec", 6, 16, (SAMPLE_FREQUENCY_MS / 1000));
    4022:	1f 92       	push	r1
    4024:	df 93       	push	r29
    4026:	80 e1       	ldi	r24, 0x10	; 16
    4028:	8f 93       	push	r24
    402a:	cf 93       	push	r28
    402c:	8e e2       	ldi	r24, 0x2E	; 46
    402e:	9e e0       	ldi	r25, 0x0E	; 14
    4030:	9f 93       	push	r25
    4032:	8f 93       	push	r24
    4034:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    4038:	8d b7       	in	r24, 0x3d	; 61
    403a:	9e b7       	in	r25, 0x3e	; 62
    403c:	0c 96       	adiw	r24, 0x0c	; 12
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	9e bf       	out	0x3e, r25	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	8d bf       	out	0x3d, r24	; 61
    return;
}
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	08 95       	ret

0000404e <guiSensor_DrawDetailedTemperatureView>:

void guiSensor_DrawDetailedTemperatureView(uint16_t context __attribute__ ((
            unused)))
{
    404e:	ff 92       	push	r15
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    405c:	2a 97       	sbiw	r28, 0x0a	; 10
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	cd bf       	out	0x3d, r28	; 61
    sensor_sample_type reading;

    Sensor_GetReading(SENSOR_EXTERNAL_TEMPERATURE, &reading);
    4068:	be 01       	movw	r22, r28
    406a:	6f 5f       	subi	r22, 0xFF	; 255
    406c:	7f 4f       	sbci	r23, 0xFF	; 255
    406e:	87 e0       	ldi	r24, 0x07	; 7
    4070:	0e 94 78 23 	call	0x46f0	; 0x46f0 <Sensor_GetReading>

    libUI_Print("max: %uC", 6, 2, reading.max / 10);
    4074:	2b 81       	ldd	r18, Y+3	; 0x03
    4076:	3c 81       	ldd	r19, Y+4	; 0x04
    4078:	ad ec       	ldi	r26, 0xCD	; 205
    407a:	bc ec       	ldi	r27, 0xCC	; 204
    407c:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    4080:	96 95       	lsr	r25
    4082:	87 95       	ror	r24
    4084:	96 95       	lsr	r25
    4086:	87 95       	ror	r24
    4088:	96 95       	lsr	r25
    408a:	87 95       	ror	r24
    408c:	9f 93       	push	r25
    408e:	8f 93       	push	r24
    4090:	12 e0       	ldi	r17, 0x02	; 2
    4092:	1f 93       	push	r17
    4094:	0f 2e       	mov	r0, r31
    4096:	f6 e0       	ldi	r31, 0x06	; 6
    4098:	ff 2e       	mov	r15, r31
    409a:	f0 2d       	mov	r31, r0
    409c:	ff 92       	push	r15
    409e:	85 e2       	ldi	r24, 0x25	; 37
    40a0:	9e e0       	ldi	r25, 0x0E	; 14
    40a2:	9f 93       	push	r25
    40a4:	8f 93       	push	r24
    40a6:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    libUI_Print("min: %uC", 70, 2, reading.min / 10);
    40aa:	2d 81       	ldd	r18, Y+5	; 0x05
    40ac:	3e 81       	ldd	r19, Y+6	; 0x06
    40ae:	ad ec       	ldi	r26, 0xCD	; 205
    40b0:	bc ec       	ldi	r27, 0xCC	; 204
    40b2:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    40b6:	96 95       	lsr	r25
    40b8:	87 95       	ror	r24
    40ba:	96 95       	lsr	r25
    40bc:	87 95       	ror	r24
    40be:	96 95       	lsr	r25
    40c0:	87 95       	ror	r24
    40c2:	9f 93       	push	r25
    40c4:	8f 93       	push	r24
    40c6:	1f 93       	push	r17
    40c8:	16 e4       	ldi	r17, 0x46	; 70
    40ca:	1f 93       	push	r17
    40cc:	8c e1       	ldi	r24, 0x1C	; 28
    40ce:	9e e0       	ldi	r25, 0x0E	; 14
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    libUI_Print("now: %uC", 6, 16, reading.value / 10);
    40d8:	2f 81       	ldd	r18, Y+7	; 0x07
    40da:	38 85       	ldd	r19, Y+8	; 0x08
    40dc:	ad ec       	ldi	r26, 0xCD	; 205
    40de:	bc ec       	ldi	r27, 0xCC	; 204
    40e0:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    40e4:	96 95       	lsr	r25
    40e6:	87 95       	ror	r24
    40e8:	96 95       	lsr	r25
    40ea:	87 95       	ror	r24
    40ec:	96 95       	lsr	r25
    40ee:	87 95       	ror	r24
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
    40f4:	00 e1       	ldi	r16, 0x10	; 16
    40f6:	0f 93       	push	r16
    40f8:	ff 92       	push	r15
    40fa:	83 e1       	ldi	r24, 0x13	; 19
    40fc:	9e e0       	ldi	r25, 0x0E	; 14
    40fe:	9f 93       	push	r25
    4100:	8f 93       	push	r24
    4102:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    libUI_Print("avg: %uC", 70, 16, reading.average / 10);
    4106:	29 85       	ldd	r18, Y+9	; 0x09
    4108:	3a 85       	ldd	r19, Y+10	; 0x0a
    410a:	ad ec       	ldi	r26, 0xCD	; 205
    410c:	bc ec       	ldi	r27, 0xCC	; 204
    410e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    4112:	96 95       	lsr	r25
    4114:	87 95       	ror	r24
    4116:	96 95       	lsr	r25
    4118:	87 95       	ror	r24
    411a:	96 95       	lsr	r25
    411c:	87 95       	ror	r24
    411e:	9f 93       	push	r25
    4120:	8f 93       	push	r24
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	8a e0       	ldi	r24, 0x0A	; 10
    4128:	9e e0       	ldi	r25, 0x0E	; 14
    412a:	9f 93       	push	r25
    412c:	8f 93       	push	r24
    412e:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    return;
}
    413c:	2a 96       	adiw	r28, 0x0a	; 10
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	ff 90       	pop	r15
    4152:	08 95       	ret

00004154 <guiSensor_DrawTemperatureView>:

void guiSensor_DrawTemperatureView(uint16_t context __attribute__ ((unused)))
{
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	2a 97       	sbiw	r28, 0x0a	; 10
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    sensor_sample_type reading;

    if (Sensor_GetReading(SENSOR_EXTERNAL_TEMPERATURE, &reading))
    4168:	be 01       	movw	r22, r28
    416a:	6f 5f       	subi	r22, 0xFF	; 255
    416c:	7f 4f       	sbci	r23, 0xFF	; 255
    416e:	87 e0       	ldi	r24, 0x07	; 7
    4170:	0e 94 78 23 	call	0x46f0	; 0x46f0 <Sensor_GetReading>
    4174:	88 23       	and	r24, r24
    4176:	d1 f1       	breq	.+116    	; 0x41ec <guiSensor_DrawTemperatureView+0x98>
    {
        uint8_t temperature_integer = (uint8_t)(reading.value / 10);
    4178:	4f 81       	ldd	r20, Y+7	; 0x07
    417a:	58 85       	ldd	r21, Y+8	; 0x08

        libUI_Print("Temperature: %u.%uC", 6, 10, temperature_integer,
    417c:	9a 01       	movw	r18, r20
    417e:	ad ec       	ldi	r26, 0xCD	; 205
    4180:	bc ec       	ldi	r27, 0xCC	; 204
    4182:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    4186:	96 95       	lsr	r25
    4188:	87 95       	ror	r24
    418a:	96 95       	lsr	r25
    418c:	87 95       	ror	r24
    418e:	96 95       	lsr	r25
    4190:	87 95       	ror	r24
    4192:	9c 01       	movw	r18, r24
    4194:	22 0f       	add	r18, r18
    4196:	33 1f       	adc	r19, r19
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	88 0f       	add	r24, r24
    41a2:	99 1f       	adc	r25, r25
    41a4:	82 0f       	add	r24, r18
    41a6:	93 1f       	adc	r25, r19
    41a8:	9a 01       	movw	r18, r20
    41aa:	28 1b       	sub	r18, r24
    41ac:	39 0b       	sbc	r19, r25
    41ae:	c9 01       	movw	r24, r18
    41b0:	9f 93       	push	r25
    41b2:	2f 93       	push	r18
{
    sensor_sample_type reading;

    if (Sensor_GetReading(SENSOR_EXTERNAL_TEMPERATURE, &reading))
    {
        uint8_t temperature_integer = (uint8_t)(reading.value / 10);
    41b4:	9a 01       	movw	r18, r20
    41b6:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    41ba:	96 95       	lsr	r25
    41bc:	87 95       	ror	r24
    41be:	96 95       	lsr	r25
    41c0:	87 95       	ror	r24
    41c2:	96 95       	lsr	r25
    41c4:	87 95       	ror	r24
    41c6:	99 27       	eor	r25, r25

        libUI_Print("Temperature: %u.%uC", 6, 10, temperature_integer,
    41c8:	9f 93       	push	r25
    41ca:	8f 93       	push	r24
    41cc:	8a e0       	ldi	r24, 0x0A	; 10
    41ce:	8f 93       	push	r24
    41d0:	86 e0       	ldi	r24, 0x06	; 6
    41d2:	8f 93       	push	r24
    41d4:	86 ef       	ldi	r24, 0xF6	; 246
    41d6:	9d e0       	ldi	r25, 0x0D	; 13
    41d8:	9f 93       	push	r25
    41da:	8f 93       	push	r24
    41dc:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	f8 94       	cli
    41e4:	de bf       	out	0x3e, r29	; 62
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	cd bf       	out	0x3d, r28	; 61
    41ea:	0e c0       	rjmp	.+28     	; 0x4208 <guiSensor_DrawTemperatureView+0xb4>
                    reading.value % 10);
    }
    else
    {
        libUI_Print("Temperature: --", 6, 10);
    41ec:	8a e0       	ldi	r24, 0x0A	; 10
    41ee:	8f 93       	push	r24
    41f0:	86 e0       	ldi	r24, 0x06	; 6
    41f2:	8f 93       	push	r24
    41f4:	86 ee       	ldi	r24, 0xE6	; 230
    41f6:	9d e0       	ldi	r25, 0x0D	; 13
    41f8:	9f 93       	push	r25
    41fa:	8f 93       	push	r24
    41fc:	0e 94 43 28 	call	0x5086	; 0x5086 <libUI_Print_P>
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    }
    return;
}
    4208:	2a 96       	adiw	r28, 0x0a	; 10
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	08 95       	ret

0000421a <guiSensor_Init>:
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void guiSensor_Init(void)
{
    temperature_view.draw_function = guiSensor_DrawTemperatureView;
    421a:	8a ea       	ldi	r24, 0xAA	; 170
    421c:	90 e2       	ldi	r25, 0x20	; 32
    421e:	90 93 91 04 	sts	0x0491, r25
    4222:	80 93 90 04 	sts	0x0490, r24
    temperature_view.child = NULL;
    4226:	10 92 97 04 	sts	0x0497, r1
    422a:	10 92 96 04 	sts	0x0496, r1
    temperature_view.prev = NULL;
    422e:	10 92 9b 04 	sts	0x049B, r1
    4232:	10 92 9a 04 	sts	0x049A, r1
    temperature_view.next = NULL;
    4236:	10 92 99 04 	sts	0x0499, r1
    423a:	10 92 98 04 	sts	0x0498, r1
    temperature_view.parent = NULL;
    423e:	10 92 95 04 	sts	0x0495, r1
    4242:	10 92 94 04 	sts	0x0494, r1

    detailed_temperature_view.draw_function = guiSensor_DrawDetailedTemperatureView;
    4246:	87 e2       	ldi	r24, 0x27	; 39
    4248:	90 e2       	ldi	r25, 0x20	; 32
    424a:	90 93 9d 04 	sts	0x049D, r25
    424e:	80 93 9c 04 	sts	0x049C, r24
    detailed_temperature_view.child = NULL;
    4252:	10 92 a3 04 	sts	0x04A3, r1
    4256:	10 92 a2 04 	sts	0x04A2, r1
    detailed_temperature_view.prev = NULL;
    425a:	10 92 a7 04 	sts	0x04A7, r1
    425e:	10 92 a6 04 	sts	0x04A6, r1
    detailed_temperature_view.next = NULL;
    4262:	10 92 a5 04 	sts	0x04A5, r1
    4266:	10 92 a4 04 	sts	0x04A4, r1
    detailed_temperature_view.parent = NULL;
    426a:	10 92 a1 04 	sts	0x04A1, r1
    426e:	10 92 a0 04 	sts	0x04A0, r1

    sensor_information_view.draw_function = guiSensor_DrawSensorInformation;
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	90 e2       	ldi	r25, 0x20	; 32
    4276:	90 93 85 04 	sts	0x0485, r25
    427a:	80 93 84 04 	sts	0x0484, r24
    sensor_information_view.child = NULL;
    427e:	10 92 8b 04 	sts	0x048B, r1
    4282:	10 92 8a 04 	sts	0x048A, r1
    sensor_information_view.prev = NULL;
    4286:	10 92 8f 04 	sts	0x048F, r1
    428a:	10 92 8e 04 	sts	0x048E, r1
    sensor_information_view.next = NULL;
    428e:	10 92 8d 04 	sts	0x048D, r1
    4292:	10 92 8c 04 	sts	0x048C, r1
    sensor_information_view.parent = NULL;
    4296:	10 92 89 04 	sts	0x0489, r1
    429a:	10 92 88 04 	sts	0x0488, r1

    Interface_AddChild(&temperature_view, &detailed_temperature_view);
    429e:	6c e9       	ldi	r22, 0x9C	; 156
    42a0:	74 e0       	ldi	r23, 0x04	; 4
    42a2:	80 e9       	ldi	r24, 0x90	; 144
    42a4:	94 e0       	ldi	r25, 0x04	; 4
    42a6:	0e 94 32 22 	call	0x4464	; 0x4464 <Interface_AddChild>
    Interface_AddChild(&temperature_view, &sensor_information_view);
    42aa:	64 e8       	ldi	r22, 0x84	; 132
    42ac:	74 e0       	ldi	r23, 0x04	; 4
    42ae:	80 e9       	ldi	r24, 0x90	; 144
    42b0:	94 e0       	ldi	r25, 0x04	; 4
    42b2:	0e 94 32 22 	call	0x4464	; 0x4464 <Interface_AddChild>
    Interface_AddView(&temperature_view);
    42b6:	80 e9       	ldi	r24, 0x90	; 144
    42b8:	94 e0       	ldi	r25, 0x04	; 4
    42ba:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <Interface_AddView>
    42be:	08 95       	ret

000042c0 <Interface_Init>:
/// @param  None
/// @return None
///
void Interface_Init(void)
{
    libDisplay_Init();
    42c0:	0e 94 67 25 	call	0x4ace	; 0x4ace <libDisplay_Init>
    libDisplay_On();
    42c4:	0e 94 30 25 	call	0x4a60	; 0x4a60 <libDisplay_On>

    libUI_SetFont(&ubuntuMono_10ptFontInfo);
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	91 e0       	ldi	r25, 0x01	; 1
    42cc:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <libUI_SetFont>

    root_view = NULL;
    42d0:	10 92 af 04 	sts	0x04AF, r1
    42d4:	10 92 ae 04 	sts	0x04AE, r1
    active_view = NULL;
    42d8:	10 92 ad 04 	sts	0x04AD, r1
    42dc:	10 92 ac 04 	sts	0x04AC, r1
    refresh_flag = true;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	80 93 b4 04 	sts	0x04B4, r24

    INFO("Init done");
    42e6:	87 ea       	ldi	r24, 0xA7	; 167
    42e8:	92 e0       	ldi	r25, 0x02	; 2
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	8b ea       	ldi	r24, 0xAB	; 171
    42f0:	9e e0       	ldi	r25, 0x0E	; 14
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	08 95       	ret

00004304 <Interface_Update>:
///
void Interface_Update(void)
{
    static uint32_t auto_timer = 0;

    if (refresh_flag == true)
    4304:	80 91 b4 04 	lds	r24, 0x04B4
    4308:	88 23       	and	r24, r24
    430a:	09 f4       	brne	.+2      	; 0x430e <Interface_Update+0xa>
    430c:	4b c0       	rjmp	.+150    	; 0x43a4 <Interface_Update+0xa0>
    {
        if (active_view != NULL && active_view->draw_function != NULL)
    430e:	e0 91 ac 04 	lds	r30, 0x04AC
    4312:	f0 91 ad 04 	lds	r31, 0x04AD
    4316:	30 97       	sbiw	r30, 0x00	; 0
    4318:	c9 f1       	breq	.+114    	; 0x438c <Interface_Update+0x88>
    431a:	80 81       	ld	r24, Z
    431c:	91 81       	ldd	r25, Z+1	; 0x01
    431e:	89 2b       	or	r24, r25
    4320:	a9 f1       	breq	.+106    	; 0x438c <Interface_Update+0x88>
        {
            libDisplay_ClearVRAM();
    4322:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <libDisplay_ClearVRAM>
            active_view->draw_function(active_view->context);
    4326:	a0 91 ac 04 	lds	r26, 0x04AC
    432a:	b0 91 ad 04 	lds	r27, 0x04AD
    432e:	ed 91       	ld	r30, X+
    4330:	fc 91       	ld	r31, X
    4332:	11 97       	sbiw	r26, 0x01	; 1
    4334:	12 96       	adiw	r26, 0x02	; 2
    4336:	8d 91       	ld	r24, X+
    4338:	9c 91       	ld	r25, X
    433a:	13 97       	sbiw	r26, 0x03	; 3
    433c:	09 95       	icall
            if (Timer_TimeDifference(activity_timer) < 2000)
    433e:	60 91 b0 04 	lds	r22, 0x04B0
    4342:	70 91 b1 04 	lds	r23, 0x04B1
    4346:	80 91 b2 04 	lds	r24, 0x04B2
    434a:	90 91 b3 04 	lds	r25, 0x04B3
    434e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
    4352:	60 3d       	cpi	r22, 0xD0	; 208
    4354:	77 40       	sbci	r23, 0x07	; 7
    4356:	81 05       	cpc	r24, r1
    4358:	91 05       	cpc	r25, r1
    435a:	b0 f4       	brcc	.+44     	; 0x4388 <Interface_Update+0x84>
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static void DrawViewIndicator(void)
{
    if (active_view->next == NULL)
    435c:	e0 91 ac 04 	lds	r30, 0x04AC
    4360:	f0 91 ad 04 	lds	r31, 0x04AD
    4364:	80 85       	ldd	r24, Z+8	; 0x08
    4366:	91 85       	ldd	r25, Z+9	; 0x09
    4368:	89 2b       	or	r24, r25
    436a:	19 f4       	brne	.+6      	; 0x4372 <Interface_Update+0x6e>
    {
        guiInterface_DrawViewIndicator(INDICATOR_POS_RIGHT);
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <guiInterface_DrawViewIndicator>
    }

    if (active_view->prev == NULL)
    4372:	e0 91 ac 04 	lds	r30, 0x04AC
    4376:	f0 91 ad 04 	lds	r31, 0x04AD
    437a:	82 85       	ldd	r24, Z+10	; 0x0a
    437c:	93 85       	ldd	r25, Z+11	; 0x0b
    437e:	89 2b       	or	r24, r25
    4380:	19 f4       	brne	.+6      	; 0x4388 <Interface_Update+0x84>
    {
        guiInterface_DrawViewIndicator(INDICATOR_POS_LEFT);
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <guiInterface_DrawViewIndicator>
            active_view->draw_function(active_view->context);
            if (Timer_TimeDifference(activity_timer) < 2000)
            {
                DrawViewIndicator();
            }
            libUI_Update();
    4388:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <libUI_Update>
        }
        refresh_flag = false;
    438c:	10 92 b4 04 	sts	0x04B4, r1
        auto_timer = Timer_GetMilliseconds();
    4390:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    4394:	60 93 a8 04 	sts	0x04A8, r22
    4398:	70 93 a9 04 	sts	0x04A9, r23
    439c:	80 93 aa 04 	sts	0x04AA, r24
    43a0:	90 93 ab 04 	sts	0x04AB, r25
    }

    if (Timer_TimeDifference(auto_timer) > REFRESH_RATE_MS)
    43a4:	60 91 a8 04 	lds	r22, 0x04A8
    43a8:	70 91 a9 04 	lds	r23, 0x04A9
    43ac:	80 91 aa 04 	lds	r24, 0x04AA
    43b0:	90 91 ab 04 	lds	r25, 0x04AB
    43b4:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
    43b8:	69 3e       	cpi	r22, 0xE9	; 233
    43ba:	73 40       	sbci	r23, 0x03	; 3
    43bc:	81 05       	cpc	r24, r1
    43be:	91 05       	cpc	r25, r1
    43c0:	18 f0       	brcs	.+6      	; 0x43c8 <Interface_Update+0xc4>
    {
        refresh_flag = true;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	80 93 b4 04 	sts	0x04B4, r24
    43c8:	08 95       	ret

000043ca <Interface_AddSibling>:
/// @param  *sibling_view Pointer to sibling view
/// @param  *new_view Pointer to new view
/// @return None
///
void Interface_AddSibling(struct view *sibling_view, struct view *new_view)
{
    43ca:	fc 01       	movw	r30, r24
    struct view *view_ptr;
    view_ptr = sibling_view;

    if (sibling_view != NULL && new_view != NULL)
    43cc:	00 97       	sbiw	r24, 0x00	; 0
    43ce:	89 f0       	breq	.+34     	; 0x43f2 <Interface_AddSibling+0x28>
    43d0:	61 15       	cp	r22, r1
    43d2:	71 05       	cpc	r23, r1
    43d4:	71 f0       	breq	.+28     	; 0x43f2 <Interface_AddSibling+0x28>
    {
        //TODO: Add condition to protect against loops, ex view_ptr->next = view_ptr
        while (view_ptr->next != NULL)
    43d6:	20 85       	ldd	r18, Z+8	; 0x08
    43d8:	31 85       	ldd	r19, Z+9	; 0x09
    43da:	21 15       	cp	r18, r1
    43dc:	31 05       	cpc	r19, r1
    43de:	11 f0       	breq	.+4      	; 0x43e4 <Interface_AddSibling+0x1a>
        {
            view_ptr = view_ptr->next;
    43e0:	f9 01       	movw	r30, r18
    43e2:	f9 cf       	rjmp	.-14     	; 0x43d6 <Interface_AddSibling+0xc>
        }

        new_view->prev = view_ptr;
    43e4:	db 01       	movw	r26, r22
    43e6:	1b 96       	adiw	r26, 0x0b	; 11
    43e8:	fc 93       	st	X, r31
    43ea:	ee 93       	st	-X, r30
    43ec:	1a 97       	sbiw	r26, 0x0a	; 10
        view_ptr->next = new_view;
    43ee:	71 87       	std	Z+9, r23	; 0x09
    43f0:	60 87       	std	Z+8, r22	; 0x08
    43f2:	08 95       	ret

000043f4 <Interface_AddView>:
///
/// @param  *new_view Pointer to new view
/// @return None
///
void Interface_AddView(struct view *new_view)
{
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	ec 01       	movw	r28, r24
    if (root_view == NULL)
    43fa:	80 91 ae 04 	lds	r24, 0x04AE
    43fe:	90 91 af 04 	lds	r25, 0x04AF
    4402:	89 2b       	or	r24, r25
    4404:	b9 f4       	brne	.+46     	; 0x4434 <Interface_AddView+0x40>
    {
        INFO("New view added as root");
    4406:	85 e9       	ldi	r24, 0x95	; 149
    4408:	92 e0       	ldi	r25, 0x02	; 2
    440a:	9f 93       	push	r25
    440c:	8f 93       	push	r24
    440e:	86 e8       	ldi	r24, 0x86	; 134
    4410:	9e e0       	ldi	r25, 0x0E	; 14
    4412:	9f 93       	push	r25
    4414:	8f 93       	push	r24
    4416:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        //Set view as root view if there is no previous root view
        root_view = new_view;
    441a:	d0 93 af 04 	sts	0x04AF, r29
    441e:	c0 93 ae 04 	sts	0x04AE, r28
        active_view = new_view;
    4422:	d0 93 ad 04 	sts	0x04AD, r29
    4426:	c0 93 ac 04 	sts	0x04AC, r28
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	15 c0       	rjmp	.+42     	; 0x445e <Interface_AddView+0x6a>
    }
    else
    {
        INFO("New view added as sibling to root");
    4434:	25 e9       	ldi	r18, 0x95	; 149
    4436:	32 e0       	ldi	r19, 0x02	; 2
    4438:	3f 93       	push	r19
    443a:	2f 93       	push	r18
    443c:	26 e5       	ldi	r18, 0x56	; 86
    443e:	3e e0       	ldi	r19, 0x0E	; 14
    4440:	3f 93       	push	r19
    4442:	2f 93       	push	r18
    4444:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        Interface_AddSibling(root_view, new_view);
    4448:	be 01       	movw	r22, r28
    444a:	80 91 ae 04 	lds	r24, 0x04AE
    444e:	90 91 af 04 	lds	r25, 0x04AF
    4452:	0e 94 e5 21 	call	0x43ca	; 0x43ca <Interface_AddSibling>
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    }
    return;
}
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	08 95       	ret

00004464 <Interface_AddChild>:
/// @param  *parent_view Pointer to parent view
/// @param  *child_view Pointer to child view
/// @return None
///
void Interface_AddChild(struct view *parent_view, struct view *child_view)
{
    4464:	0f 93       	push	r16
    4466:	1f 93       	push	r17
    4468:	cf 93       	push	r28
    446a:	df 93       	push	r29
    446c:	ec 01       	movw	r28, r24
    446e:	8b 01       	movw	r16, r22
    if (parent_view != NULL && child_view != NULL)
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	79 f0       	breq	.+30     	; 0x4492 <Interface_AddChild+0x2e>
    4474:	61 15       	cp	r22, r1
    4476:	71 05       	cpc	r23, r1
    4478:	61 f0       	breq	.+24     	; 0x4492 <Interface_AddChild+0x2e>
    {
        // If the parent already got a child add the new child as a sibling to
        // the old one.
        if (parent_view->child != NULL)
    447a:	8e 81       	ldd	r24, Y+6	; 0x06
    447c:	9f 81       	ldd	r25, Y+7	; 0x07
    447e:	00 97       	sbiw	r24, 0x00	; 0
    4480:	19 f0       	breq	.+6      	; 0x4488 <Interface_AddChild+0x24>
        {
            Interface_AddSibling(parent_view->child, child_view);
    4482:	0e 94 e5 21 	call	0x43ca	; 0x43ca <Interface_AddSibling>
    4486:	02 c0       	rjmp	.+4      	; 0x448c <Interface_AddChild+0x28>
        }
        else
        {
            parent_view->child = child_view;
    4488:	7f 83       	std	Y+7, r23	; 0x07
    448a:	6e 83       	std	Y+6, r22	; 0x06
        }

        child_view->parent = parent_view;
    448c:	f8 01       	movw	r30, r16
    448e:	d5 83       	std	Z+5, r29	; 0x05
    4490:	c4 83       	std	Z+4, r28	; 0x04
    }
    return;
}
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	08 95       	ret

0000449c <Interface_PreviousView>:
/// @param  None
/// @return None
///
void Interface_PreviousView(void)
{
    if (active_view != NULL)
    449c:	e0 91 ac 04 	lds	r30, 0x04AC
    44a0:	f0 91 ad 04 	lds	r31, 0x04AD
    44a4:	30 97       	sbiw	r30, 0x00	; 0
    44a6:	a9 f0       	breq	.+42     	; 0x44d2 <Interface_PreviousView+0x36>
    {
        if (active_view->prev != NULL)
    44a8:	82 85       	ldd	r24, Z+10	; 0x0a
    44aa:	93 85       	ldd	r25, Z+11	; 0x0b
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	21 f0       	breq	.+8      	; 0x44b8 <Interface_PreviousView+0x1c>
        {
            active_view = active_view->prev;
    44b0:	90 93 ad 04 	sts	0x04AD, r25
    44b4:	80 93 ac 04 	sts	0x04AC, r24
        }

        refresh_flag = true;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	80 93 b4 04 	sts	0x04B4, r24
        activity_timer = Timer_GetMilliseconds();
    44be:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    44c2:	60 93 b0 04 	sts	0x04B0, r22
    44c6:	70 93 b1 04 	sts	0x04B1, r23
    44ca:	80 93 b2 04 	sts	0x04B2, r24
    44ce:	90 93 b3 04 	sts	0x04B3, r25
    44d2:	08 95       	ret

000044d4 <Interface_NextView>:
/// @param  None
/// @return None
///
void Interface_NextView(void)
{
    if (active_view != NULL)
    44d4:	e0 91 ac 04 	lds	r30, 0x04AC
    44d8:	f0 91 ad 04 	lds	r31, 0x04AD
    44dc:	30 97       	sbiw	r30, 0x00	; 0
    44de:	a9 f0       	breq	.+42     	; 0x450a <Interface_NextView+0x36>
    {
        if (active_view->next != NULL)
    44e0:	80 85       	ldd	r24, Z+8	; 0x08
    44e2:	91 85       	ldd	r25, Z+9	; 0x09
    44e4:	00 97       	sbiw	r24, 0x00	; 0
    44e6:	21 f0       	breq	.+8      	; 0x44f0 <Interface_NextView+0x1c>
        {
            active_view = active_view->next;
    44e8:	90 93 ad 04 	sts	0x04AD, r25
    44ec:	80 93 ac 04 	sts	0x04AC, r24
        }

        refresh_flag = true;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	80 93 b4 04 	sts	0x04B4, r24
        activity_timer = Timer_GetMilliseconds();
    44f6:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    44fa:	60 93 b0 04 	sts	0x04B0, r22
    44fe:	70 93 b1 04 	sts	0x04B1, r23
    4502:	80 93 b2 04 	sts	0x04B2, r24
    4506:	90 93 b3 04 	sts	0x04B3, r25
    450a:	08 95       	ret

0000450c <Interface_ActivateView>:
/// @param  None
/// @return None
///
void Interface_ActivateView(void)
{
    if (active_view != NULL)
    450c:	e0 91 ac 04 	lds	r30, 0x04AC
    4510:	f0 91 ad 04 	lds	r31, 0x04AD
    4514:	30 97       	sbiw	r30, 0x00	; 0
    4516:	f1 f0       	breq	.+60     	; 0x4554 <Interface_ActivateView+0x48>
    {
        if (active_view->child != NULL)
    4518:	86 81       	ldd	r24, Z+6	; 0x06
    451a:	97 81       	ldd	r25, Z+7	; 0x07
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	29 f0       	breq	.+10     	; 0x452a <Interface_ActivateView+0x1e>
        {
            active_view = active_view->child;
    4520:	90 93 ad 04 	sts	0x04AD, r25
    4524:	80 93 ac 04 	sts	0x04AC, r24
    4528:	08 c0       	rjmp	.+16     	; 0x453a <Interface_ActivateView+0x2e>
        }
        else if (active_view->parent != NULL)
    452a:	84 81       	ldd	r24, Z+4	; 0x04
    452c:	95 81       	ldd	r25, Z+5	; 0x05
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	21 f0       	breq	.+8      	; 0x453a <Interface_ActivateView+0x2e>
        {
            active_view = active_view->parent;
    4532:	90 93 ad 04 	sts	0x04AD, r25
    4536:	80 93 ac 04 	sts	0x04AC, r24
        }

        refresh_flag = true;
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	80 93 b4 04 	sts	0x04B4, r24
        activity_timer = Timer_GetMilliseconds();
    4540:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    4544:	60 93 b0 04 	sts	0x04B0, r22
    4548:	70 93 b1 04 	sts	0x04B1, r23
    454c:	80 93 b2 04 	sts	0x04B2, r24
    4550:	90 93 b3 04 	sts	0x04B3, r25
    4554:	08 95       	ret

00004556 <libInput_Init>:
/// @return None
///
void libInput_Init(void)
{
    //Set pins as inputs
    DDRB &= ~(1 << DDB0 | 1 << DDB1);
    4556:	84 b1       	in	r24, 0x04	; 4
    4558:	8c 7f       	andi	r24, 0xFC	; 252
    455a:	84 b9       	out	0x04, r24	; 4

    //NOTE: Using a ADC-channel for the push-button since no other pin is free.
    libADC_EnableInput(PUSH_ADC_CHANNEL, true);
    455c:	61 e0       	ldi	r22, 0x01	; 1
    455e:	86 e0       	ldi	r24, 0x06	; 6
    4560:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <libADC_EnableInput>

    //Reset all callbacks
    right_event_callback = NULL;
    4564:	10 92 b9 04 	sts	0x04B9, r1
    4568:	10 92 b8 04 	sts	0x04B8, r1
    left_event_callback = NULL;
    456c:	10 92 bb 04 	sts	0x04BB, r1
    4570:	10 92 ba 04 	sts	0x04BA, r1
    push_event_callback = NULL;
    4574:	10 92 b7 04 	sts	0x04B7, r1
    4578:	10 92 b6 04 	sts	0x04B6, r1

    INFO("Init done");
    457c:	86 eb       	ldi	r24, 0xB6	; 182
    457e:	92 e0       	ldi	r25, 0x02	; 2
    4580:	9f 93       	push	r25
    4582:	8f 93       	push	r24
    4584:	89 ed       	ldi	r24, 0xD9	; 217
    4586:	9e e0       	ldi	r25, 0x0E	; 14
    4588:	9f 93       	push	r25
    458a:	8f 93       	push	r24
    458c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	08 95       	ret

0000459a <libInput_SetCallbacks>:
///
void libInput_SetCallbacks(libinput_callback_type right_event,
                           libinput_callback_type left_event,
                           libinput_callback_type push_event)
{
    right_event_callback = right_event;
    459a:	90 93 b9 04 	sts	0x04B9, r25
    459e:	80 93 b8 04 	sts	0x04B8, r24
    left_event_callback = left_event;
    45a2:	70 93 bb 04 	sts	0x04BB, r23
    45a6:	60 93 ba 04 	sts	0x04BA, r22
    push_event_callback = push_event;
    45aa:	50 93 b7 04 	sts	0x04B7, r21
    45ae:	40 93 b6 04 	sts	0x04B6, r20
    45b2:	08 95       	ret

000045b4 <DirectionCheckAndTrigger>:
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void DirectionCheckAndTrigger(void)
{
    if (PINB & (1 << DDB1))
    45b4:	19 9b       	sbis	0x03, 1	; 3
    45b6:	10 c0       	rjmp	.+32     	; 0x45d8 <DirectionCheckAndTrigger+0x24>
    {
        DEBUG("Right\r\n");
    45b8:	81 ed       	ldi	r24, 0xD1	; 209
    45ba:	9e e0       	ldi	r25, 0x0E	; 14
    45bc:	9f 93       	push	r25
    45be:	8f 93       	push	r24
    45c0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        if (right_event_callback != NULL)
    45c4:	e0 91 b8 04 	lds	r30, 0x04B8
    45c8:	f0 91 b9 04 	lds	r31, 0x04B9
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	30 97       	sbiw	r30, 0x00	; 0
    45d2:	89 f0       	breq	.+34     	; 0x45f6 <DirectionCheckAndTrigger+0x42>
        {
            right_event_callback();
    45d4:	09 95       	icall
    45d6:	08 95       	ret
        }
    }
    else
    {
        DEBUG("Left\r\n");
    45d8:	8a ec       	ldi	r24, 0xCA	; 202
    45da:	9e e0       	ldi	r25, 0x0E	; 14
    45dc:	9f 93       	push	r25
    45de:	8f 93       	push	r24
    45e0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        if (left_event_callback != NULL)
    45e4:	e0 91 ba 04 	lds	r30, 0x04BA
    45e8:	f0 91 bb 04 	lds	r31, 0x04BB
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <DirectionCheckAndTrigger+0x42>
        {
            left_event_callback();
    45f4:	09 95       	icall
    45f6:	08 95       	ret

000045f8 <PushCheckAndTrigger>:
    }
    return;
}

void PushCheckAndTrigger(void)
{
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	00 d0       	rcall	.+0      	; 0x4600 <PushCheckAndTrigger+0x8>
    4600:	cd b7       	in	r28, 0x3d	; 61
    4602:	de b7       	in	r29, 0x3e	; 62
    static bool prev_push = false;
    uint16_t adc_sample;
    bool curr_push;

    if (libADC_GetSample(PUSH_ADC_CHANNEL, &adc_sample) == false)
    4604:	be 01       	movw	r22, r28
    4606:	6f 5f       	subi	r22, 0xFF	; 255
    4608:	7f 4f       	sbci	r23, 0xFF	; 255
    460a:	86 e0       	ldi	r24, 0x06	; 6
    460c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <libADC_GetSample>
    4610:	88 23       	and	r24, r24
    4612:	f1 f0       	breq	.+60     	; 0x4650 <PushCheckAndTrigger+0x58>
    {
        return;
    }

    curr_push = adc_sample > 512;
    4614:	11 e0       	ldi	r17, 0x01	; 1
    4616:	89 81       	ldd	r24, Y+1	; 0x01
    4618:	9a 81       	ldd	r25, Y+2	; 0x02
    461a:	81 30       	cpi	r24, 0x01	; 1
    461c:	92 40       	sbci	r25, 0x02	; 2
    461e:	08 f4       	brcc	.+2      	; 0x4622 <PushCheckAndTrigger+0x2a>
    4620:	10 e0       	ldi	r17, 0x00	; 0

    if (prev_push == false && curr_push == true)
    4622:	80 91 b5 04 	lds	r24, 0x04B5
    4626:	81 11       	cpse	r24, r1
    4628:	11 c0       	rjmp	.+34     	; 0x464c <PushCheckAndTrigger+0x54>
    462a:	11 23       	and	r17, r17
    462c:	79 f0       	breq	.+30     	; 0x464c <PushCheckAndTrigger+0x54>
    {
        DEBUG("Push\r\n");
    462e:	83 ec       	ldi	r24, 0xC3	; 195
    4630:	9e e0       	ldi	r25, 0x0E	; 14
    4632:	9f 93       	push	r25
    4634:	8f 93       	push	r24
    4636:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
        if (push_event_callback != NULL)
    463a:	e0 91 b6 04 	lds	r30, 0x04B6
    463e:	f0 91 b7 04 	lds	r31, 0x04B7
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	30 97       	sbiw	r30, 0x00	; 0
    4648:	09 f0       	breq	.+2      	; 0x464c <PushCheckAndTrigger+0x54>
        {
            push_event_callback();
    464a:	09 95       	icall
        }
    }

    prev_push = curr_push;
    464c:	10 93 b5 04 	sts	0x04B5, r17
    return;
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	08 95       	ret

0000465c <libInput_Update>:
///
/// @param  None
/// @return None
///
void libInput_Update(void)
{
    465c:	cf 93       	push	r28
    static uint8_t prev_a = 1;
    uint8_t curr_a;

    PushCheckAndTrigger();
    465e:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <PushCheckAndTrigger>

    curr_a = PINB & (1 << DDB0);
    4662:	c3 b1       	in	r28, 0x03	; 3
    4664:	c1 70       	andi	r28, 0x01	; 1

    //Check for a falling edge on channel A
    if (prev_a == 1 && curr_a == 0)
    4666:	80 91 00 01 	lds	r24, 0x0100
    466a:	81 30       	cpi	r24, 0x01	; 1
    466c:	49 f4       	brne	.+18     	; 0x4680 <libInput_Update+0x24>
    466e:	c1 11       	cpse	r28, r1
    4670:	07 c0       	rjmp	.+14     	; 0x4680 <libInput_Update+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4672:	85 e3       	ldi	r24, 0x35	; 53
    4674:	8a 95       	dec	r24
    4676:	f1 f7       	brne	.-4      	; 0x4674 <libInput_Update+0x18>
    4678:	00 00       	nop
    {
        //debounce_timer
        _delay_us(20);
        if (!(PINB & (1 << DDB0)))
    467a:	18 9b       	sbis	0x03, 0	; 3
        {
            DirectionCheckAndTrigger();
    467c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <DirectionCheckAndTrigger>
        }
    }

    prev_a = curr_a;
    4680:	c0 93 00 01 	sts	0x0100, r28
    return;
}
    4684:	cf 91       	pop	r28
    4686:	08 95       	ret

00004688 <Sensor_Init>:
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void Sensor_Init(void)
{
    current_alpha = (uint16_t)CALCULATE_ALPHA(SAMPLE_FREQUENCY_MS / 1000,
    4688:	8e ef       	ldi	r24, 0xFE	; 254
    468a:	9f ef       	ldi	r25, 0xFF	; 255
    468c:	90 93 cb 04 	sts	0x04CB, r25
    4690:	80 93 ca 04 	sts	0x04CA, r24
                    AVERAGE_WINDOW_S);
    DEBUG("Smoothing alpha: %u\r\n", current_alpha);
    4694:	8f ef       	ldi	r24, 0xFF	; 255
    4696:	8f 93       	push	r24
    4698:	8e ef       	ldi	r24, 0xFE	; 254
    469a:	8f 93       	push	r24
    469c:	87 e6       	ldi	r24, 0x67	; 103
    469e:	9f e0       	ldi	r25, 0x0F	; 15
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    libADC_EnableInput(SENSOR_EXTERNAL_TEMPERATURE, true);
    46a8:	61 e0       	ldi	r22, 0x01	; 1
    46aa:	87 e0       	ldi	r24, 0x07	; 7
    46ac:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <libADC_EnableInput>
    libADC_EnableInput(SENSOR_INTERNAL_TEMPERATURE, true);
    46b0:	61 e0       	ldi	r22, 0x01	; 1
    46b2:	88 e0       	ldi	r24, 0x08	; 8
    46b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <libADC_EnableInput>
    INFO("Init done");
    46b8:	82 ed       	ldi	r24, 0xD2	; 210
    46ba:	92 e0       	ldi	r25, 0x02	; 2
    46bc:	9f 93       	push	r25
    46be:	8f 93       	push	r24
    46c0:	8f e4       	ldi	r24, 0x4F	; 79
    46c2:	9f e0       	ldi	r25, 0x0F	; 15
    46c4:	9f 93       	push	r25
    46c6:	8f 93       	push	r24
    46c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    46cc:	8d b7       	in	r24, 0x3d	; 61
    46ce:	9e b7       	in	r25, 0x3e	; 62
    46d0:	08 96       	adiw	r24, 0x08	; 8
    46d2:	0f b6       	in	r0, 0x3f	; 63
    46d4:	f8 94       	cli
    46d6:	9e bf       	out	0x3e, r25	; 62
    46d8:	0f be       	out	0x3f, r0	; 63
    46da:	8d bf       	out	0x3d, r24	; 61
    46dc:	08 95       	ret

000046de <Sensor_SaveReading>:

bool Sensor_SaveReading(uint8_t sensor, sensor_sample_type *reading)
{
    uint8_t address;

    address = READING_START_ADDRESS + (ADDRESS_OFFSET + sensor) *
    46de:	88 0f       	add	r24, r24
    46e0:	98 2f       	mov	r25, r24
    46e2:	99 0f       	add	r25, r25
    46e4:	99 0f       	add	r25, r25
              sizeof(sensor_sample_type);
    return libDS3234_WriteToSRAM(address, (uint8_t *)reading,
    46e6:	4a e0       	ldi	r20, 0x0A	; 10
    46e8:	89 0f       	add	r24, r25
    46ea:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <libDS3234_WriteToSRAM>
                                 sizeof(sensor_sample_type));
}
    46ee:	08 95       	ret

000046f0 <Sensor_GetReading>:

bool Sensor_GetReading(uint8_t sensor, sensor_sample_type *reading)
{
    46f0:	cf 93       	push	r28
    46f2:	df 93       	push	r29
    46f4:	eb 01       	movw	r28, r22
    bool status = false;
    uint8_t address;

    address = READING_START_ADDRESS + (ADDRESS_OFFSET + sensor) *
    46f6:	88 0f       	add	r24, r24
    46f8:	98 2f       	mov	r25, r24
    46fa:	99 0f       	add	r25, r25
    46fc:	99 0f       	add	r25, r25
              sizeof(sensor_sample_type);

    if (libDS3234_ReadFromSRAM(address, (uint8_t *)reading,
    46fe:	4a e0       	ldi	r20, 0x0A	; 10
    4700:	89 0f       	add	r24, r25
    4702:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <libDS3234_ReadFromSRAM>
    4706:	88 23       	and	r24, r24
    4708:	41 f0       	breq	.+16     	; 0x471a <Sensor_GetReading+0x2a>
                               sizeof(sensor_sample_type)))
    {
        status = (bool)(reading->header == READING_HEADER);
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	28 81       	ld	r18, Y
    470e:	39 81       	ldd	r19, Y+1	; 0x01
    4710:	2f 30       	cpi	r18, 0x0F	; 15
    4712:	3a 4a       	sbci	r19, 0xAA	; 170
    4714:	19 f0       	breq	.+6      	; 0x471c <Sensor_GetReading+0x2c>
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	01 c0       	rjmp	.+2      	; 0x471c <Sensor_GetReading+0x2c>
                                 sizeof(sensor_sample_type));
}

bool Sensor_GetReading(uint8_t sensor, sensor_sample_type *reading)
{
    bool status = false;
    471a:	80 e0       	ldi	r24, 0x00	; 0
    {
        status = (bool)(reading->header == READING_HEADER);
    }

    return status;
}
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	08 95       	ret

00004722 <Sensor_GetSensorValue>:

function_status Sensor_GetSensorValue(uint8_t sensor, uint16_t *sensor_value)
{
    4722:	0f 93       	push	r16
    4724:	1f 93       	push	r17
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	18 2f       	mov	r17, r24
    472c:	eb 01       	movw	r28, r22
    function_status status = ERROR;
    uint32_t tmp_value;

    if (libADC_GetSample(sensor, sensor_value) == SUCCESS)
    472e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <libADC_GetSample>
    4732:	81 30       	cpi	r24, 0x01	; 1
    4734:	09 f0       	breq	.+2      	; 0x4738 <Sensor_GetSensorValue+0x16>
    4736:	68 c0       	rjmp	.+208    	; 0x4808 <Sensor_GetSensorValue+0xe6>
    {
        switch (sensor)
    4738:	17 30       	cpi	r17, 0x07	; 7
    473a:	39 f0       	breq	.+14     	; 0x474a <Sensor_GetSensorValue+0x28>
    473c:	18 30       	cpi	r17, 0x08	; 8
    473e:	09 f4       	brne	.+2      	; 0x4742 <Sensor_GetSensorValue+0x20>
    4740:	42 c0       	rjmp	.+132    	; 0x47c6 <Sensor_GetSensorValue+0xa4>
    4742:	16 30       	cpi	r17, 0x06	; 6
    4744:	09 f0       	breq	.+2      	; 0x4748 <Sensor_GetSensorValue+0x26>
    4746:	58 c0       	rjmp	.+176    	; 0x47f8 <Sensor_GetSensorValue+0xd6>
    4748:	61 c0       	rjmp	.+194    	; 0x480c <Sensor_GetSensorValue+0xea>
                //Using raw value, do nothing
                status = SUCCESS;
                break;

            case SENSOR_EXTERNAL_TEMPERATURE:
                *sensor_value = RawValueToTemperature(*sensor_value);
    474a:	28 81       	ld	r18, Y
    474c:	39 81       	ldd	r19, Y+1	; 0x01
static uint16_t RawValueToTemperature(uint16_t raw_value)
{
    uint8_t index = 0;
    uint32_t tmp;

    while (index < TABLE_LENGTH && pgm_read_word(&mf52_table[index]) < raw_value)
    474e:	ed e7       	ldi	r30, 0x7D	; 125
    4750:	ff e0       	ldi	r31, 0x0F	; 15
    4752:	85 91       	lpm	r24, Z+
    4754:	94 91       	lpm	r25, Z
    4756:	82 17       	cp	r24, r18
    4758:	93 07       	cpc	r25, r19
    475a:	78 f4       	brcc	.+30     	; 0x477a <Sensor_GetSensorValue+0x58>
    475c:	8f e7       	ldi	r24, 0x7F	; 127
    475e:	9f e0       	ldi	r25, 0x0F	; 15
    {
        ++index;
    4760:	01 e0       	ldi	r16, 0x01	; 1
    4762:	04 c0       	rjmp	.+8      	; 0x476c <Sensor_GetSensorValue+0x4a>
    4764:	0f 5f       	subi	r16, 0xFF	; 255
    4766:	02 96       	adiw	r24, 0x02	; 2
static uint16_t RawValueToTemperature(uint16_t raw_value)
{
    uint8_t index = 0;
    uint32_t tmp;

    while (index < TABLE_LENGTH && pgm_read_word(&mf52_table[index]) < raw_value)
    4768:	0d 31       	cpi	r16, 0x1D	; 29
    476a:	41 f0       	breq	.+16     	; 0x477c <Sensor_GetSensorValue+0x5a>
    476c:	fc 01       	movw	r30, r24
    476e:	45 91       	lpm	r20, Z+
    4770:	54 91       	lpm	r21, Z
    4772:	42 17       	cp	r20, r18
    4774:	53 07       	cpc	r21, r19
    4776:	b0 f3       	brcs	.-20     	; 0x4764 <Sensor_GetSensorValue+0x42>
    4778:	01 c0       	rjmp	.+2      	; 0x477c <Sensor_GetSensorValue+0x5a>
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static uint16_t RawValueToTemperature(uint16_t raw_value)
{
    uint8_t index = 0;
    477a:	00 e0       	ldi	r16, 0x00	; 0
    {
        ++index;
    }

    //TODO: Can this be solved in a better way?
    tmp = 100 * (uint32_t)raw_value;
    477c:	a4 e6       	ldi	r26, 0x64	; 100
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    tmp /= pgm_read_word(&mf52_table[index]);
    4784:	10 e0       	ldi	r17, 0x00	; 0
    4786:	f8 01       	movw	r30, r16
    4788:	ee 0f       	add	r30, r30
    478a:	ff 1f       	adc	r31, r31
    478c:	e3 58       	subi	r30, 0x83	; 131
    478e:	f0 4f       	sbci	r31, 0xF0	; 240
    4790:	25 91       	lpm	r18, Z+
    4792:	34 91       	lpm	r19, Z
    4794:	40 e0       	ldi	r20, 0x00	; 0
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
    tmp *= (TABLE_OFFSET + (index * 5));
    479c:	d8 01       	movw	r26, r16
    479e:	aa 0f       	add	r26, r26
    47a0:	bb 1f       	adc	r27, r27
    47a2:	aa 0f       	add	r26, r26
    47a4:	bb 1f       	adc	r27, r27
    47a6:	0a 0f       	add	r16, r26
    47a8:	1b 1f       	adc	r17, r27
    47aa:	d8 01       	movw	r26, r16
    47ac:	5e 97       	sbiw	r26, 0x1e	; 30
    47ae:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulshisi3>
    tmp /= 10;
    47b2:	2a e0       	ldi	r18, 0x0A	; 10
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	40 e0       	ldi	r20, 0x00	; 0
    47b8:	50 e0       	ldi	r21, 0x00	; 0
    47ba:	0e 94 81 2b 	call	0x5702	; 0x5702 <__udivmodsi4>
    return  (uint16_t)tmp;
    47be:	39 83       	std	Y+1, r19	; 0x01
    47c0:	28 83       	st	Y, r18
                status = SUCCESS;
                break;

            case SENSOR_EXTERNAL_TEMPERATURE:
                *sensor_value = RawValueToTemperature(*sensor_value);
                status = SUCCESS;
    47c2:	81 e0       	ldi	r24, 0x01	; 1
                break;
    47c4:	24 c0       	rjmp	.+72     	; 0x480e <Sensor_GetSensorValue+0xec>

            case SENSOR_INTERNAL_TEMPERATURE:
                tmp_value = *sensor_value;
    47c6:	28 81       	ld	r18, Y
    47c8:	39 81       	ldd	r19, Y+1	; 0x01
                tmp_value *= SUPPLY_VOLTAGE_mV;
    47ca:	a4 ee       	ldi	r26, 0xE4	; 228
    47cc:	bc e0       	ldi	r27, 0x0C	; 12
    47ce:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
                tmp_value = tmp_value >> 10;
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	07 2e       	mov	r0, r23
    47d8:	7a e0       	ldi	r23, 0x0A	; 10
    47da:	b6 95       	lsr	r27
    47dc:	a7 95       	ror	r26
    47de:	97 95       	ror	r25
    47e0:	87 95       	ror	r24
    47e2:	7a 95       	dec	r23
    47e4:	d1 f7       	brne	.-12     	; 0x47da <Sensor_GetSensorValue+0xb8>
    47e6:	70 2d       	mov	r23, r0
                tmp_value -= 289; // Offset between mV and temp from Table 23-2 in datasheet.

#ifdef INTERNAL_TEMP_SENSOR_CALIBRATED
                tmp_value = tmp_value * INTERNAL_TEMP_CALIBRATION_K +
    47e8:	87 55       	subi	r24, 0x57	; 87
    47ea:	91 40       	sbci	r25, 0x01	; 1
    47ec:	a1 09       	sbc	r26, r1
    47ee:	b1 09       	sbc	r27, r1
                            INTERNAL_TEMP_CALIBRATION_M;
#endif
                *sensor_value = (uint16_t)(tmp_value);
    47f0:	99 83       	std	Y+1, r25	; 0x01
    47f2:	88 83       	st	Y, r24
                status = SUCCESS;
    47f4:	81 e0       	ldi	r24, 0x01	; 1
                break;
    47f6:	0b c0       	rjmp	.+22     	; 0x480e <Sensor_GetSensorValue+0xec>

            default:
                sc_assert_fail();
    47f8:	4f ef       	ldi	r20, 0xFF	; 255
    47fa:	5e e0       	ldi	r21, 0x0E	; 14
    47fc:	63 ee       	ldi	r22, 0xE3	; 227
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	81 ef       	ldi	r24, 0xF1	; 241
    4802:	9e e0       	ldi	r25, 0x0E	; 14
    4804:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    return status;
}

function_status Sensor_GetSensorValue(uint8_t sensor, uint16_t *sensor_value)
{
    function_status status = ERROR;
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	01 c0       	rjmp	.+2      	; 0x480e <Sensor_GetSensorValue+0xec>
    {
        switch (sensor)
        {
            case SENSOR_EXTERNAL_LIGHT:
                //Using raw value, do nothing
                status = SUCCESS;
    480c:	81 e0       	ldi	r24, 0x01	; 1
                sc_assert_fail();
                break;
        }
    }
    return status;
}
    480e:	df 91       	pop	r29
    4810:	cf 91       	pop	r28
    4812:	1f 91       	pop	r17
    4814:	0f 91       	pop	r16
    4816:	08 95       	ret

00004818 <Sensor_Update>:
    libADC_EnableInput(SENSOR_INTERNAL_TEMPERATURE, true);
    INFO("Init done");
}

void Sensor_Update(void)
{
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    static uint32_t sample_timer = 0;

    if (Timer_TimeDifference(sample_timer) > SAMPLE_FREQUENCY_MS)
    4820:	60 91 bc 04 	lds	r22, 0x04BC
    4824:	70 91 bd 04 	lds	r23, 0x04BD
    4828:	80 91 be 04 	lds	r24, 0x04BE
    482c:	90 91 bf 04 	lds	r25, 0x04BF
    4830:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
    4834:	69 38       	cpi	r22, 0x89	; 137
    4836:	73 41       	sbci	r23, 0x13	; 19
    4838:	81 05       	cpc	r24, r1
    483a:	91 05       	cpc	r25, r1
    483c:	08 f4       	brcc	.+2      	; 0x4840 <Sensor_Update+0x28>
    483e:	79 c0       	rjmp	.+242    	; 0x4932 <Sensor_Update+0x11a>
    {

        Sensor_GetReading(SENSOR_EXTERNAL_TEMPERATURE, &sensor_reading);
    4840:	60 ec       	ldi	r22, 0xC0	; 192
    4842:	74 e0       	ldi	r23, 0x04	; 4
    4844:	87 e0       	ldi	r24, 0x07	; 7
    4846:	0e 94 78 23 	call	0x46f0	; 0x46f0 <Sensor_GetReading>
        Sensor_GetSensorValue(SENSOR_EXTERNAL_TEMPERATURE, &sensor_reading.value);
    484a:	66 ec       	ldi	r22, 0xC6	; 198
    484c:	74 e0       	ldi	r23, 0x04	; 4
    484e:	87 e0       	ldi	r24, 0x07	; 7
    4850:	0e 94 91 23 	call	0x4722	; 0x4722 <Sensor_GetSensorValue>

        if (sensor_reading.header == READING_HEADER)
    4854:	80 91 c0 04 	lds	r24, 0x04C0
    4858:	90 91 c1 04 	lds	r25, 0x04C1
    485c:	8f 30       	cpi	r24, 0x0F	; 15
    485e:	ea ea       	ldi	r30, 0xAA	; 170
    4860:	9e 07       	cpc	r25, r30
    4862:	61 f5       	brne	.+88     	; 0x48bc <Sensor_Update+0xa4>
        {
            sensor_reading.average = GetExponentialMovingAverage(sensor_reading.value,
    4864:	40 91 ca 04 	lds	r20, 0x04CA
    4868:	50 91 cb 04 	lds	r21, 0x04CB
    486c:	08 ec       	ldi	r16, 0xC8	; 200
    486e:	14 e0       	ldi	r17, 0x04	; 4
    4870:	f8 01       	movw	r30, r16
    4872:	60 81       	ld	r22, Z
    4874:	71 81       	ldd	r23, Z+1	; 0x01
    4876:	c6 ec       	ldi	r28, 0xC6	; 198
    4878:	d4 e0       	ldi	r29, 0x04	; 4
    487a:	88 81       	ld	r24, Y
    487c:	99 81       	ldd	r25, Y+1	; 0x01
    487e:	0e 94 93 0b 	call	0x1726	; 0x1726 <GetExponentialMovingAverage>
    4882:	f8 01       	movw	r30, r16
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
                                     sensor_reading.average,
                                     current_alpha);

            if (sensor_reading.value > sensor_reading.max)
    4888:	88 81       	ld	r24, Y
    488a:	99 81       	ldd	r25, Y+1	; 0x01
    488c:	20 91 c2 04 	lds	r18, 0x04C2
    4890:	30 91 c3 04 	lds	r19, 0x04C3
    4894:	28 17       	cp	r18, r24
    4896:	39 07       	cpc	r19, r25
    4898:	28 f4       	brcc	.+10     	; 0x48a4 <Sensor_Update+0x8c>
            {
                sensor_reading.max = sensor_reading.value;
    489a:	90 93 c3 04 	sts	0x04C3, r25
    489e:	80 93 c2 04 	sts	0x04C2, r24
    48a2:	38 c0       	rjmp	.+112    	; 0x4914 <Sensor_Update+0xfc>
            }
            else if (sensor_reading.value < sensor_reading.min)
    48a4:	20 91 c4 04 	lds	r18, 0x04C4
    48a8:	30 91 c5 04 	lds	r19, 0x04C5
    48ac:	82 17       	cp	r24, r18
    48ae:	93 07       	cpc	r25, r19
    48b0:	88 f5       	brcc	.+98     	; 0x4914 <Sensor_Update+0xfc>
            {
                sensor_reading.min = sensor_reading.value;
    48b2:	90 93 c5 04 	sts	0x04C5, r25
    48b6:	80 93 c4 04 	sts	0x04C4, r24
    48ba:	2c c0       	rjmp	.+88     	; 0x4914 <Sensor_Update+0xfc>
            }
        }
        else
        {
            INFO("No sample found, Address: 0x%02X, Header: 0x%04X\r\n", 0x00,
    48bc:	9f 93       	push	r25
    48be:	8f 93       	push	r24
    48c0:	1f 92       	push	r1
    48c2:	1f 92       	push	r1
    48c4:	84 ec       	ldi	r24, 0xC4	; 196
    48c6:	92 e0       	ldi	r25, 0x02	; 2
    48c8:	9f 93       	push	r25
    48ca:	8f 93       	push	r24
    48cc:	8e e0       	ldi	r24, 0x0E	; 14
    48ce:	9f e0       	ldi	r25, 0x0F	; 15
    48d0:	9f 93       	push	r25
    48d2:	8f 93       	push	r24
    48d4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
                 sensor_reading.header);

            sensor_reading.header = READING_HEADER;
    48d8:	8f e0       	ldi	r24, 0x0F	; 15
    48da:	9a ea       	ldi	r25, 0xAA	; 170
    48dc:	90 93 c1 04 	sts	0x04C1, r25
    48e0:	80 93 c0 04 	sts	0x04C0, r24
            sensor_reading.max = sensor_reading.value;
    48e4:	80 91 c6 04 	lds	r24, 0x04C6
    48e8:	90 91 c7 04 	lds	r25, 0x04C7
    48ec:	90 93 c3 04 	sts	0x04C3, r25
    48f0:	80 93 c2 04 	sts	0x04C2, r24
            sensor_reading.min = sensor_reading.value;
    48f4:	90 93 c5 04 	sts	0x04C5, r25
    48f8:	80 93 c4 04 	sts	0x04C4, r24
            sensor_reading.average =
    48fc:	90 93 c9 04 	sts	0x04C9, r25
    4900:	80 93 c8 04 	sts	0x04C8, r24
    4904:	8d b7       	in	r24, 0x3d	; 61
    4906:	9e b7       	in	r25, 0x3e	; 62
    4908:	08 96       	adiw	r24, 0x08	; 8
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	9e bf       	out	0x3e, r25	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	8d bf       	out	0x3d, r24	; 61
                sensor_reading.value; //NOTE: Is this bad? extreme initial values can mess up the average.
        }

        Sensor_SaveReading(SENSOR_EXTERNAL_TEMPERATURE, &sensor_reading);
    4914:	60 ec       	ldi	r22, 0xC0	; 192
    4916:	74 e0       	ldi	r23, 0x04	; 4
    4918:	87 e0       	ldi	r24, 0x07	; 7
    491a:	0e 94 6f 23 	call	0x46de	; 0x46de <Sensor_SaveReading>
        sample_timer = Timer_GetMilliseconds();
    491e:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    4922:	60 93 bc 04 	sts	0x04BC, r22
    4926:	70 93 bd 04 	sts	0x04BD, r23
    492a:	80 93 be 04 	sts	0x04BE, r24
    492e:	90 93 bf 04 	sts	0x04BF, r25
    }
}
    4932:	df 91       	pop	r29
    4934:	cf 91       	pop	r28
    4936:	1f 91       	pop	r17
    4938:	0f 91       	pop	r16
    493a:	08 95       	ret

0000493c <ReadingPacketHandler>:
//////////////////////////////////////////////////////////////////////////
//LOCAL FUNCTIONS
//////////////////////////////////////////////////////////////////////////

static bool ReadingPacketHandler(packet_frame_type *packet)
{
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
    sc_assert(packet != NULL);
    4940:	00 97       	sbiw	r24, 0x00	; 0
    4942:	41 f4       	brne	.+16     	; 0x4954 <ReadingPacketHandler+0x18>
    4944:	49 e1       	ldi	r20, 0x19	; 25
    4946:	50 e1       	ldi	r21, 0x10	; 16
    4948:	63 e7       	ldi	r22, 0x73	; 115
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	8c e0       	ldi	r24, 0x0C	; 12
    494e:	90 e1       	ldi	r25, 0x10	; 16
    4950:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    if (packet->header.source >= ADDRESS_OFFSET)
    4954:	fc 01       	movw	r30, r24
    4956:	22 81       	ldd	r18, Z+2	; 0x02
    4958:	22 23       	and	r18, r18
    495a:	34 f5       	brge	.+76     	; 0x49a8 <ReadingPacketHandler+0x6c>
    {
        uint8_t index = ADDRESS_OFFSET - packet->header.source;
    495c:	a0 e8       	ldi	r26, 0x80	; 128
    495e:	a2 1b       	sub	r26, r18
        sc_assert(index < MAX_NR_NODES);
    4960:	a3 30       	cpi	r26, 0x03	; 3
    4962:	40 f0       	brcs	.+16     	; 0x4974 <ReadingPacketHandler+0x38>
    4964:	47 ef       	ldi	r20, 0xF7	; 247
    4966:	5f e0       	ldi	r21, 0x0F	; 15
    4968:	68 e7       	ldi	r22, 0x78	; 120
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	8a ee       	ldi	r24, 0xEA	; 234
    496e:	9f e0       	ldi	r25, 0x0F	; 15
    4970:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

        memcpy(&packets[index], packet, sizeof(packet_frame_type));
    4974:	ca 2f       	mov	r28, r26
    4976:	d0 e0       	ldi	r29, 0x00	; 0
    4978:	f3 e2       	ldi	r31, 0x23	; 35
    497a:	af 9f       	mul	r26, r31
    497c:	d0 01       	movw	r26, r0
    497e:	11 24       	eor	r1, r1
    4980:	a8 52       	subi	r26, 0x28	; 40
    4982:	bb 4f       	sbci	r27, 0xFB	; 251
    4984:	23 e2       	ldi	r18, 0x23	; 35
    4986:	fc 01       	movw	r30, r24
    4988:	01 90       	ld	r0, Z+
    498a:	0d 92       	st	X+, r0
    498c:	2a 95       	dec	r18
    498e:	e1 f7       	brne	.-8      	; 0x4988 <ReadingPacketHandler+0x4c>

        last_update[index] = Timer_GetMilliseconds();
    4990:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    4994:	cc 0f       	add	r28, r28
    4996:	dd 1f       	adc	r29, r29
    4998:	cc 0f       	add	r28, r28
    499a:	dd 1f       	adc	r29, r29
    499c:	c4 53       	subi	r28, 0x34	; 52
    499e:	db 4f       	sbci	r29, 0xFB	; 251
    49a0:	68 83       	st	Y, r22
    49a2:	79 83       	std	Y+1, r23	; 0x01
    49a4:	8a 83       	std	Y+2, r24	; 0x02
    49a6:	9b 83       	std	Y+3, r25	; 0x03
    }

    DEBUG("Packet handled\r\n");
    49a8:	89 ed       	ldi	r24, 0xD9	; 217
    49aa:	9f e0       	ldi	r25, 0x0F	; 15
    49ac:	9f 93       	push	r25
    49ae:	8f 93       	push	r24
    49b0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    return false;
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0
    49b8:	80 e0       	ldi	r24, 0x00	; 0
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	08 95       	ret

000049c0 <Nodes_Init>:
/// @param  None
/// @return None
///
void Nodes_Init(void)
{
    memset(packets, 0, sizeof(packets));
    49c0:	89 e6       	ldi	r24, 0x69	; 105
    49c2:	e8 ed       	ldi	r30, 0xD8	; 216
    49c4:	f4 e0       	ldi	r31, 0x04	; 4
    49c6:	df 01       	movw	r26, r30
    49c8:	1d 92       	st	X+, r1
    49ca:	8a 95       	dec	r24
    49cc:	e9 f7       	brne	.-6      	; 0x49c8 <Nodes_Init+0x8>
    memset(last_update, 0, sizeof(last_update));
    49ce:	8c e0       	ldi	r24, 0x0C	; 12
    49d0:	ec ec       	ldi	r30, 0xCC	; 204
    49d2:	f4 e0       	ldi	r31, 0x04	; 4
    49d4:	df 01       	movw	r26, r30
    49d6:	1d 92       	st	X+, r1
    49d8:	8a 95       	dec	r24
    49da:	e9 f7       	brne	.-6      	; 0x49d6 <Nodes_Init+0x16>

    Transceiver_SetPacketHandler(ReadingPacketHandler, TR_PACKET_TYPE_READING);
    49dc:	62 e0       	ldi	r22, 0x02	; 2
    49de:	8e e9       	ldi	r24, 0x9E	; 158
    49e0:	94 e2       	ldi	r25, 0x24	; 36
    49e2:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <Transceiver_SetPacketHandler>

    guiNodes_Init();
    49e6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <guiNodes_Init>
    49ea:	08 95       	ret

000049ec <Nodes_GetLatestData>:
/// @param  index Index of node to get data from.
/// @return packet_frame_type Pointer to the latest data packet, NULL if no data
///                           exists.
///
packet_frame_type *Nodes_GetLatestData(uint8_t index)
{
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    sc_assert(index < MAX_NR_NODES);
    49f0:	83 30       	cpi	r24, 0x03	; 3
    49f2:	40 f0       	brcs	.+16     	; 0x4a04 <Nodes_GetLatestData+0x18>
    49f4:	44 ec       	ldi	r20, 0xC4	; 196
    49f6:	5f e0       	ldi	r21, 0x0F	; 15
    49f8:	61 e6       	ldi	r22, 0x61	; 97
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	87 eb       	ldi	r24, 0xB7	; 183
    49fe:	9f e0       	ldi	r25, 0x0F	; 15
    4a00:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>

    //NOTE: Using total_size to determine if packet contains any data
    if (packets[index].header.total_size > 0 &&
    4a04:	c8 2f       	mov	r28, r24
    4a06:	d0 e0       	ldi	r29, 0x00	; 0
    4a08:	23 e2       	ldi	r18, 0x23	; 35
    4a0a:	82 9f       	mul	r24, r18
    4a0c:	f0 01       	movw	r30, r0
    4a0e:	11 24       	eor	r1, r1
    4a10:	e8 52       	subi	r30, 0x28	; 40
    4a12:	fb 4f       	sbci	r31, 0xFB	; 251
    4a14:	80 81       	ld	r24, Z
    4a16:	88 23       	and	r24, r24
    4a18:	d9 f0       	breq	.+54     	; 0x4a50 <Nodes_GetLatestData+0x64>
            Timer_TimeDifference(last_update[index]) < DATA_OUTDATED_LIMIT_MS)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	ee 0f       	add	r30, r30
    4a1e:	ff 1f       	adc	r31, r31
    4a20:	ee 0f       	add	r30, r30
    4a22:	ff 1f       	adc	r31, r31
    4a24:	e4 53       	subi	r30, 0x34	; 52
    4a26:	fb 4f       	sbci	r31, 0xFB	; 251
    4a28:	60 81       	ld	r22, Z
    4a2a:	71 81       	ldd	r23, Z+1	; 0x01
    4a2c:	82 81       	ldd	r24, Z+2	; 0x02
    4a2e:	93 81       	ldd	r25, Z+3	; 0x03
    4a30:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
packet_frame_type *Nodes_GetLatestData(uint8_t index)
{
    sc_assert(index < MAX_NR_NODES);

    //NOTE: Using total_size to determine if packet contains any data
    if (packets[index].header.total_size > 0 &&
    4a34:	60 32       	cpi	r22, 0x20	; 32
    4a36:	7e 44       	sbci	r23, 0x4E	; 78
    4a38:	81 05       	cpc	r24, r1
    4a3a:	91 05       	cpc	r25, r1
    4a3c:	60 f4       	brcc	.+24     	; 0x4a56 <Nodes_GetLatestData+0x6a>
            Timer_TimeDifference(last_update[index]) < DATA_OUTDATED_LIMIT_MS)
    {
        return &packets[index];
    4a3e:	23 e2       	ldi	r18, 0x23	; 35
    4a40:	2c 9f       	mul	r18, r28
    4a42:	c0 01       	movw	r24, r0
    4a44:	2d 9f       	mul	r18, r29
    4a46:	90 0d       	add	r25, r0
    4a48:	11 24       	eor	r1, r1
    4a4a:	88 52       	subi	r24, 0x28	; 40
    4a4c:	9b 4f       	sbci	r25, 0xFB	; 251
    4a4e:	05 c0       	rjmp	.+10     	; 0x4a5a <Nodes_GetLatestData+0x6e>
    }

    return NULL;
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	02 c0       	rjmp	.+4      	; 0x4a5a <Nodes_GetLatestData+0x6e>
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	90 e0       	ldi	r25, 0x00	; 0
}
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	08 95       	ret

00004a60 <libDisplay_On>:
///
/// @param  None
/// @return None
///
void libDisplay_On(void)
{
    4a60:	08 95       	ret

00004a62 <libDisplay_SetPixel>:
void libDisplay_SetPixel(uint8_t x, uint8_t y)
{
    uint8_t page_index;
    uint8_t page_offset;

    if (dislay_rotated == true)
    4a62:	90 91 41 05 	lds	r25, 0x0541
    4a66:	99 23       	and	r25, r25
    4a68:	31 f0       	breq	.+12     	; 0x4a76 <libDisplay_SetPixel+0x14>
    {
        x = DISPLAY_WIDTH - x - 1;
    4a6a:	9f e7       	ldi	r25, 0x7F	; 127
    4a6c:	98 1b       	sub	r25, r24
    4a6e:	89 2f       	mov	r24, r25
        y = DISPLAY_HEIGHT - y - 1;
    4a70:	9f e1       	ldi	r25, 0x1F	; 31
    4a72:	96 1b       	sub	r25, r22
    4a74:	69 2f       	mov	r22, r25
    }

    //Shift 3 bits to the right to divide by 8(page height) and floor value
    page_index = (y >> 3);
    4a76:	96 2f       	mov	r25, r22
    4a78:	96 95       	lsr	r25
    4a7a:	96 95       	lsr	r25
    4a7c:	96 95       	lsr	r25
    page_offset = (y - (page_index << 3));

    if (page_index < VRAM_PAGES && x < VRAM_COLUMNS)
    4a7e:	94 30       	cpi	r25, 0x04	; 4
    4a80:	d0 f4       	brcc	.+52     	; 0x4ab6 <libDisplay_SetPixel+0x54>
    4a82:	88 23       	and	r24, r24
    4a84:	c4 f0       	brlt	.+48     	; 0x4ab6 <libDisplay_SetPixel+0x54>
    {
        VRAM[page_index][x] |= (1 << page_offset);
    4a86:	20 e8       	ldi	r18, 0x80	; 128
    4a88:	92 9f       	mul	r25, r18
    4a8a:	f0 01       	movw	r30, r0
    4a8c:	11 24       	eor	r1, r1
    4a8e:	e8 0f       	add	r30, r24
    4a90:	f1 1d       	adc	r31, r1
    4a92:	ee 5b       	subi	r30, 0xBE	; 190
    4a94:	fa 4f       	sbci	r31, 0xFA	; 250
        y = DISPLAY_HEIGHT - y - 1;
    }

    //Shift 3 bits to the right to divide by 8(page height) and floor value
    page_index = (y >> 3);
    page_offset = (y - (page_index << 3));
    4a96:	99 0f       	add	r25, r25
    4a98:	99 0f       	add	r25, r25
    4a9a:	99 0f       	add	r25, r25
    4a9c:	69 1b       	sub	r22, r25

    if (page_index < VRAM_PAGES && x < VRAM_COLUMNS)
    {
        VRAM[page_index][x] |= (1 << page_offset);
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	9c 01       	movw	r18, r24
    4aa4:	02 c0       	rjmp	.+4      	; 0x4aaa <libDisplay_SetPixel+0x48>
    4aa6:	22 0f       	add	r18, r18
    4aa8:	33 1f       	adc	r19, r19
    4aaa:	6a 95       	dec	r22
    4aac:	e2 f7       	brpl	.-8      	; 0x4aa6 <libDisplay_SetPixel+0x44>
    4aae:	b9 01       	movw	r22, r18
    4ab0:	80 81       	ld	r24, Z
    4ab2:	68 2b       	or	r22, r24
    4ab4:	60 83       	st	Z, r22
    4ab6:	08 95       	ret

00004ab8 <libDisplay_ClearVRAM>:
/// @param  None
/// @return None
///
void libDisplay_ClearVRAM()
{
    memset(VRAM, 0x00, VRAM_SIZE);
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	92 e0       	ldi	r25, 0x02	; 2
    4abc:	e2 e4       	ldi	r30, 0x42	; 66
    4abe:	f5 e0       	ldi	r31, 0x05	; 5
    4ac0:	df 01       	movw	r26, r30
    4ac2:	9c 01       	movw	r18, r24
    4ac4:	1d 92       	st	X+, r1
    4ac6:	21 50       	subi	r18, 0x01	; 1
    4ac8:	30 40       	sbci	r19, 0x00	; 0
    4aca:	e1 f7       	brne	.-8      	; 0x4ac4 <libDisplay_ClearVRAM+0xc>
    4acc:	08 95       	ret

00004ace <libDisplay_Init>:
    //UART is using the same pins.
#ifndef DEBUG_ENABLE
    libNHD223_Init();
#endif

    dislay_rotated = false;
    4ace:	10 92 41 05 	sts	0x0541, r1
    libDisplay_ClearVRAM();
    4ad2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <libDisplay_ClearVRAM>
    4ad6:	08 95       	ret

00004ad8 <libDisplay_DumpVRAMToUART>:
///
/// @param  None
/// @return None
///
void libDisplay_DumpVRAMToUART(void)
{
    4ad8:	af 92       	push	r10
    4ada:	bf 92       	push	r11
    4adc:	cf 92       	push	r12
    4ade:	ef 92       	push	r14
    4ae0:	ff 92       	push	r15
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    uint8_t page;

    UART_Write("<VRAM>", 6);
    4ae8:	66 e0       	ldi	r22, 0x06	; 6
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	8e ed       	ldi	r24, 0xDE	; 222
    4aee:	92 e0       	ldi	r25, 0x02	; 2
    4af0:	0e 94 39 1b 	call	0x3672	; 0x3672 <UART_Write>
    4af4:	a1 2c       	mov	r10, r1
    4af6:	b1 2c       	mov	r11, r1
///
/// @param  None
/// @return None
///
void libDisplay_DumpVRAMToUART(void)
{
    4af8:	c1 2c       	mov	r12, r1
    {
        uint8_t cnt = 0;

        while (cnt != VRAM_COLUMNS)
        {
            cnt += UART_Write(&(VRAM[page][cnt]), VRAM_COLUMNS - cnt);
    4afa:	68 94       	set
    4afc:	ee 24       	eor	r14, r14
    4afe:	e7 f8       	bld	r14, 7
    4b00:	f1 2c       	mov	r15, r1
    4b02:	16 c0       	rjmp	.+44     	; 0x4b30 <libDisplay_DumpVRAMToUART+0x58>
    4b04:	21 2f       	mov	r18, r17
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	b7 01       	movw	r22, r14
    4b0a:	62 1b       	sub	r22, r18
    4b0c:	73 0b       	sbc	r23, r19
    4b0e:	ce 01       	movw	r24, r28
    4b10:	82 0f       	add	r24, r18
    4b12:	93 1f       	adc	r25, r19
    4b14:	8e 5b       	subi	r24, 0xBE	; 190
    4b16:	9a 4f       	sbci	r25, 0xFA	; 250
    4b18:	0e 94 39 1b 	call	0x3672	; 0x3672 <UART_Write>
    4b1c:	18 0f       	add	r17, r24
    UART_Write("<VRAM>", 6);
    for (page = 0; page < VRAM_PAGES; ++page)
    {
        uint8_t cnt = 0;

        while (cnt != VRAM_COLUMNS)
    4b1e:	10 38       	cpi	r17, 0x80	; 128
    4b20:	89 f7       	brne	.-30     	; 0x4b04 <libDisplay_DumpVRAMToUART+0x2c>
    4b22:	8f ef       	ldi	r24, 0xFF	; 255
    4b24:	a8 1a       	sub	r10, r24
    4b26:	b8 0a       	sbc	r11, r24
void libDisplay_DumpVRAMToUART(void)
{
    uint8_t page;

    UART_Write("<VRAM>", 6);
    for (page = 0; page < VRAM_PAGES; ++page)
    4b28:	84 e0       	ldi	r24, 0x04	; 4
    4b2a:	a8 16       	cp	r10, r24
    4b2c:	b1 04       	cpc	r11, r1
    4b2e:	41 f0       	breq	.+16     	; 0x4b40 <libDisplay_DumpVRAMToUART+0x68>
///
/// @param  None
/// @return None
///
void libDisplay_DumpVRAMToUART(void)
{
    4b30:	1c 2d       	mov	r17, r12
    {
        uint8_t cnt = 0;

        while (cnt != VRAM_COLUMNS)
        {
            cnt += UART_Write(&(VRAM[page][cnt]), VRAM_COLUMNS - cnt);
    4b32:	e5 01       	movw	r28, r10
    4b34:	d6 95       	lsr	r29
    4b36:	dc 2f       	mov	r29, r28
    4b38:	cc 27       	eor	r28, r28
    4b3a:	d7 95       	ror	r29
    4b3c:	c7 95       	ror	r28
    4b3e:	e2 cf       	rjmp	.-60     	; 0x4b04 <libDisplay_DumpVRAMToUART+0x2c>
        }
    }
    UART_Write("\r\n", 2);
    4b40:	62 e0       	ldi	r22, 0x02	; 2
    4b42:	70 e0       	ldi	r23, 0x00	; 0
    4b44:	85 ee       	ldi	r24, 0xE5	; 229
    4b46:	92 e0       	ldi	r25, 0x02	; 2
    4b48:	0e 94 39 1b 	call	0x3672	; 0x3672 <UART_Write>

    return;
}
    4b4c:	df 91       	pop	r29
    4b4e:	cf 91       	pop	r28
    4b50:	1f 91       	pop	r17
    4b52:	ff 90       	pop	r15
    4b54:	ef 90       	pop	r14
    4b56:	cf 90       	pop	r12
    4b58:	bf 90       	pop	r11
    4b5a:	af 90       	pop	r10
    4b5c:	08 95       	ret

00004b5e <libDisplay_Flush>:
        {
            libNHD223_WriteData(VRAM[page][column]);
        }
    }
#else
    libDisplay_DumpVRAMToUART();
    4b5e:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <libDisplay_DumpVRAMToUART>
    4b62:	08 95       	ret

00004b64 <PostCallback>:
    return;
}

static void PostCallback(void)
{
    PORTC |= (1 << SS); //Pull SS high to release device
    4b64:	40 9a       	sbi	0x08, 0	; 8
    4b66:	08 95       	ret

00004b68 <WriteRegister>:
    }
    return status;
}

static bool WriteRegister(uint8_t address, uint8_t register_data)
{
    4b68:	cf 93       	push	r28
    4b6a:	c6 2f       	mov	r28, r22
    bool status = false;

    if (RegisterAddressValid(address))
    4b6c:	8a 31       	cpi	r24, 0x1A	; 26
    4b6e:	80 f4       	brcc	.+32     	; 0x4b90 <WriteRegister+0x28>
    {
        libSPI_WriteByte(address | WRITE_ADDRESS, &PreCallback, NULL);
    4b70:	40 e0       	ldi	r20, 0x00	; 0
    4b72:	50 e0       	ldi	r21, 0x00	; 0
    4b74:	6b ec       	ldi	r22, 0xCB	; 203
    4b76:	75 e2       	ldi	r23, 0x25	; 37
    4b78:	80 68       	ori	r24, 0x80	; 128
    4b7a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>
        libSPI_WriteByte(register_data, NULL, &PostCallback);
    4b7e:	42 eb       	ldi	r20, 0xB2	; 178
    4b80:	55 e2       	ldi	r21, 0x25	; 37
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	70 e0       	ldi	r23, 0x00	; 0
    4b86:	8c 2f       	mov	r24, r28
    4b88:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>
        status = true;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	01 c0       	rjmp	.+2      	; 0x4b92 <WriteRegister+0x2a>
    return status;
}

static bool WriteRegister(uint8_t address, uint8_t register_data)
{
    bool status = false;
    4b90:	80 e0       	ldi	r24, 0x00	; 0
        libSPI_WriteByte(address | WRITE_ADDRESS, &PreCallback, NULL);
        libSPI_WriteByte(register_data, NULL, &PostCallback);
        status = true;
    }
    return status;
}
    4b92:	cf 91       	pop	r28
    4b94:	08 95       	ret

00004b96 <PreCallback>:
    return (address <= REG_SRAM_DATA);
}

static void PreCallback(void)
{
    libSPI_SetMode(SPIMODE);
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	0e 94 26 14 	call	0x284c	; 0x284c <libSPI_SetMode>
    PORTC &= ~(1 << SS); //Pull SS low to select device
    4b9c:	40 98       	cbi	0x08, 0	; 8
    4b9e:	08 95       	ret

00004ba0 <ReadRegister>:
    }
    return status;
}

static bool ReadRegister(uint8_t address, uint8_t *register_data)
{
    4ba0:	cf 93       	push	r28
    4ba2:	df 93       	push	r29
    4ba4:	eb 01       	movw	r28, r22
    bool status = false;

    if (RegisterAddressValid(address))
    4ba6:	8a 31       	cpi	r24, 0x1A	; 26
    4ba8:	78 f4       	brcc	.+30     	; 0x4bc8 <ReadRegister+0x28>
    {
        libSPI_WriteByte(address | READ_ADDRESS, &PreCallback, NULL);
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	50 e0       	ldi	r21, 0x00	; 0
    4bae:	6b ec       	ldi	r22, 0xCB	; 203
    4bb0:	75 e2       	ldi	r23, 0x25	; 37
    4bb2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <libSPI_WriteByte>
        libSPI_ReadByte(register_data, NULL, &PostCallback);
    4bb6:	42 eb       	ldi	r20, 0xB2	; 178
    4bb8:	55 e2       	ldi	r21, 0x25	; 37
    4bba:	60 e0       	ldi	r22, 0x00	; 0
    4bbc:	70 e0       	ldi	r23, 0x00	; 0
    4bbe:	ce 01       	movw	r24, r28
    4bc0:	0e 94 01 14 	call	0x2802	; 0x2802 <libSPI_ReadByte>
        status = true;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	01 c0       	rjmp	.+2      	; 0x4bca <ReadRegister+0x2a>
    return status;
}

static bool ReadRegister(uint8_t address, uint8_t *register_data)
{
    bool status = false;
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
        libSPI_WriteByte(address | READ_ADDRESS, &PreCallback, NULL);
        libSPI_ReadByte(register_data, NULL, &PostCallback);
        status = true;
    }
    return status;
}
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	08 95       	ret

00004bd0 <GetDecimalRegisterValue>:
/// @param  address Address to register
/// @param  value Pointer to variable where the value will be stored.
/// @return bool Status of operation
///
static bool GetDecimalRegisterValue(uint8_t address, uint8_t *value)
{
    4bd0:	0f 93       	push	r16
    4bd2:	1f 93       	push	r17
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	1f 92       	push	r1
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	8b 01       	movw	r16, r22
    bool status = false;
    uint8_t register_data;

    if (ReadRegister(address, &register_data) == true)
    4be0:	be 01       	movw	r22, r28
    4be2:	6f 5f       	subi	r22, 0xFF	; 255
    4be4:	7f 4f       	sbci	r23, 0xFF	; 255
    4be6:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <ReadRegister>
    4bea:	88 23       	and	r24, r24
    4bec:	39 f0       	breq	.+14     	; 0x4bfc <GetDecimalRegisterValue+0x2c>
    {
        *value = BCDToDecimal(register_data);
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <BCDToDecimal>
    4bf4:	f8 01       	movw	r30, r16
    4bf6:	80 83       	st	Z, r24
        status = true;
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	01 c0       	rjmp	.+2      	; 0x4bfe <GetDecimalRegisterValue+0x2e>
/// @param  value Pointer to variable where the value will be stored.
/// @return bool Status of operation
///
static bool GetDecimalRegisterValue(uint8_t address, uint8_t *value)
{
    bool status = false;
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    {
        *value = BCDToDecimal(register_data);
        status = true;
    }
    return status;
}
    4bfe:	0f 90       	pop	r0
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	08 95       	ret

00004c0a <libDS3234_InitHW>:
/// @return None
///
void libDS3234_InitHW(void)
{
    //Set SS as output
    DDRC |= (1 << SS);
    4c0a:	38 9a       	sbi	0x07, 0	; 7
    //Pull SS high to release device
    PORTC |= (1 << SS);
    4c0c:	40 9a       	sbi	0x08, 0	; 8
    4c0e:	08 95       	ret

00004c10 <libDS3234_Init>:
/// @param  None
/// @return None
///
void libDS3234_Init(void)
{
    libDS3234_InitHW();
    4c10:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <libDS3234_InitHW>

    // Clear control register, this makes sure that the oscillator is running
    // when power is removed.
    WriteRegister(REG_CONTROL, 0x1C);
    4c14:	6c e1       	ldi	r22, 0x1C	; 28
    4c16:	8e e0       	ldi	r24, 0x0E	; 14
    4c18:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <WriteRegister>

    INFO("Init done");
    4c1c:	88 ee       	ldi	r24, 0xE8	; 232
    4c1e:	92 e0       	ldi	r25, 0x02	; 2
    4c20:	9f 93       	push	r25
    4c22:	8f 93       	push	r24
    4c24:	8c e4       	ldi	r24, 0x4C	; 76
    4c26:	95 e1       	ldi	r25, 0x15	; 21
    4c28:	9f 93       	push	r25
    4c2a:	8f 93       	push	r24
    4c2c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	0f 90       	pop	r0
    4c38:	08 95       	ret

00004c3a <libDS3234_GetYear>:
/// @return false  If read of year failed
/// @return SUCCESS If read of year succeeded
///
bool libDS3234_GetYear(uint8_t *year)
{
    return GetDecimalRegisterValue(REG_YEAR, year);
    4c3a:	bc 01       	movw	r22, r24
    4c3c:	86 e0       	ldi	r24, 0x06	; 6
    4c3e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <GetDecimalRegisterValue>
}
    4c42:	08 95       	ret

00004c44 <libDS3234_GetMonth>:
/// @param  *month Pointer to variable where the month will be stored
/// @return false  If read of month failed
/// @return SUCCESS If read of month succeeded
///
bool libDS3234_GetMonth(uint8_t *month)
{
    4c44:	0f 93       	push	r16
    4c46:	1f 93       	push	r17
    4c48:	cf 93       	push	r28
    4c4a:	df 93       	push	r29
    4c4c:	1f 92       	push	r1
    4c4e:	cd b7       	in	r28, 0x3d	; 61
    4c50:	de b7       	in	r29, 0x3e	; 62
    4c52:	8c 01       	movw	r16, r24
    bool status = false;
    uint8_t register_data;

    if (ReadRegister(REG_MONTH_CENTURY, &register_data) == true)
    4c54:	be 01       	movw	r22, r28
    4c56:	6f 5f       	subi	r22, 0xFF	; 255
    4c58:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5a:	85 e0       	ldi	r24, 0x05	; 5
    4c5c:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <ReadRegister>
    4c60:	88 23       	and	r24, r24
    4c62:	41 f0       	breq	.+16     	; 0x4c74 <libDS3234_GetMonth+0x30>
    {
        *month = BCDToDecimal(register_data & MONTH_MASK);
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	8f 71       	andi	r24, 0x1F	; 31
    4c68:	0e 94 c4 0b 	call	0x1788	; 0x1788 <BCDToDecimal>
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	80 83       	st	Z, r24
        status = true;
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	01 c0       	rjmp	.+2      	; 0x4c76 <libDS3234_GetMonth+0x32>
/// @return false  If read of month failed
/// @return SUCCESS If read of month succeeded
///
bool libDS3234_GetMonth(uint8_t *month)
{
    bool status = false;
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    {
        *month = BCDToDecimal(register_data & MONTH_MASK);
        status = true;
    }
    return status;
}
    4c76:	0f 90       	pop	r0
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	08 95       	ret

00004c82 <libDS3234_GetDate>:
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetDate(uint8_t *date)
{
    return GetDecimalRegisterValue(REG_DATE, date);
    4c82:	bc 01       	movw	r22, r24
    4c84:	84 e0       	ldi	r24, 0x04	; 4
    4c86:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <GetDecimalRegisterValue>
}
    4c8a:	08 95       	ret

00004c8c <libDS3234_GetDay>:
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetDay(uint8_t *day)
{
    return GetDecimalRegisterValue(REG_DAY, day);
    4c8c:	bc 01       	movw	r22, r24
    4c8e:	83 e0       	ldi	r24, 0x03	; 3
    4c90:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <GetDecimalRegisterValue>
}
    4c94:	08 95       	ret

00004c96 <libDS3234_GetHour>:
/// @param  *hour Pointer to variable where the hour will be stored
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetHour(uint8_t *hour)
{
    4c96:	0f 93       	push	r16
    4c98:	1f 93       	push	r17
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	1f 92       	push	r1
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62
    4ca4:	8c 01       	movw	r16, r24
    bool status = false;
    uint8_t register_data;

    if (ReadRegister(REG_HOUR, &register_data) == true)
    4ca6:	be 01       	movw	r22, r28
    4ca8:	6f 5f       	subi	r22, 0xFF	; 255
    4caa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cac:	82 e0       	ldi	r24, 0x02	; 2
    4cae:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <ReadRegister>
    4cb2:	88 23       	and	r24, r24
    4cb4:	39 f0       	breq	.+14     	; 0x4cc4 <libDS3234_GetHour+0x2e>
    {
        *hour = BCDToDecimal(register_data);
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <BCDToDecimal>
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	80 83       	st	Z, r24
        status = true;
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	01 c0       	rjmp	.+2      	; 0x4cc6 <libDS3234_GetHour+0x30>
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetHour(uint8_t *hour)
{
    bool status = false;
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    {
        *hour = BCDToDecimal(register_data);
        status = true;
    }
    return status;
}
    4cc6:	0f 90       	pop	r0
    4cc8:	df 91       	pop	r29
    4cca:	cf 91       	pop	r28
    4ccc:	1f 91       	pop	r17
    4cce:	0f 91       	pop	r16
    4cd0:	08 95       	ret

00004cd2 <libDS3234_GetMinutes>:
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetMinutes(uint8_t *minutes)
{
    return GetDecimalRegisterValue(REG_MINUTES, minutes);
    4cd2:	bc 01       	movw	r22, r24
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <GetDecimalRegisterValue>
}
    4cda:	08 95       	ret

00004cdc <libDS3234_GetSeconds>:
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_GetSeconds(uint8_t *seconds)
{
    return GetDecimalRegisterValue(REG_SECONDS, seconds);
    4cdc:	bc 01       	movw	r22, r24
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <GetDecimalRegisterValue>
}
    4ce4:	08 95       	ret

00004ce6 <libDS3234_WriteToSRAM>:
/// @param  length Number of bytes to write
/// @return false  If write failed
/// @return SUCCESS If write succeeded
///
bool libDS3234_WriteToSRAM(uint8_t address, uint8_t *data, uint8_t length)
{
    4ce6:	ff 92       	push	r15
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	f6 2e       	mov	r15, r22
    4cf2:	17 2f       	mov	r17, r23
    4cf4:	04 2f       	mov	r16, r20
    bool status = false;
    uint8_t index;

    if ((uint16_t)address + (uint16_t)length <= SRAM_SIZE)
    4cf6:	24 2f       	mov	r18, r20
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	28 0f       	add	r18, r24
    4cfc:	31 1d       	adc	r19, r1
    4cfe:	21 30       	cpi	r18, 0x01	; 1
    4d00:	31 40       	sbci	r19, 0x01	; 1
    4d02:	88 f4       	brcc	.+34     	; 0x4d26 <libDS3234_WriteToSRAM+0x40>
    {
        WriteRegister(REG_SRAM_ADDRESS, address);
    4d04:	68 2f       	mov	r22, r24
    4d06:	88 e1       	ldi	r24, 0x18	; 24
    4d08:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <WriteRegister>
        for (index = 0; index < length; ++index)
    4d0c:	00 23       	and	r16, r16
    4d0e:	69 f0       	breq	.+26     	; 0x4d2a <libDS3234_WriteToSRAM+0x44>
    4d10:	cf 2d       	mov	r28, r15
    4d12:	d1 2f       	mov	r29, r17
    4d14:	10 e0       	ldi	r17, 0x00	; 0
        {
            //SRAM address is auto incremented after each write
            WriteRegister(REG_SRAM_DATA, data[index]);
    4d16:	69 91       	ld	r22, Y+
    4d18:	89 e1       	ldi	r24, 0x19	; 25
    4d1a:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <WriteRegister>
    uint8_t index;

    if ((uint16_t)address + (uint16_t)length <= SRAM_SIZE)
    {
        WriteRegister(REG_SRAM_ADDRESS, address);
        for (index = 0; index < length; ++index)
    4d1e:	1f 5f       	subi	r17, 0xFF	; 255
    4d20:	10 13       	cpse	r17, r16
    4d22:	f9 cf       	rjmp	.-14     	; 0x4d16 <libDS3234_WriteToSRAM+0x30>
    4d24:	04 c0       	rjmp	.+8      	; 0x4d2e <libDS3234_WriteToSRAM+0x48>
/// @return false  If write failed
/// @return SUCCESS If write succeeded
///
bool libDS3234_WriteToSRAM(uint8_t address, uint8_t *data, uint8_t length)
{
    bool status = false;
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	03 c0       	rjmp	.+6      	; 0x4d30 <libDS3234_WriteToSRAM+0x4a>
        for (index = 0; index < length; ++index)
        {
            //SRAM address is auto incremented after each write
            WriteRegister(REG_SRAM_DATA, data[index]);
        }
        status = true;
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	01 c0       	rjmp	.+2      	; 0x4d30 <libDS3234_WriteToSRAM+0x4a>
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return status;
}
    4d30:	df 91       	pop	r29
    4d32:	cf 91       	pop	r28
    4d34:	1f 91       	pop	r17
    4d36:	0f 91       	pop	r16
    4d38:	ff 90       	pop	r15
    4d3a:	08 95       	ret

00004d3c <libDS3234_ReadFromSRAM>:
/// @param  length Number of bytes to read
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_ReadFromSRAM(uint8_t address, uint8_t *data, uint8_t length)
{
    4d3c:	ff 92       	push	r15
    4d3e:	0f 93       	push	r16
    4d40:	1f 93       	push	r17
    4d42:	cf 93       	push	r28
    4d44:	df 93       	push	r29
    4d46:	f6 2e       	mov	r15, r22
    4d48:	17 2f       	mov	r17, r23
    4d4a:	04 2f       	mov	r16, r20
    bool status = false;
    uint8_t index;

    if ((uint16_t)address + (uint16_t)length <= SRAM_SIZE)
    4d4c:	24 2f       	mov	r18, r20
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	28 0f       	add	r18, r24
    4d52:	31 1d       	adc	r19, r1
    4d54:	21 30       	cpi	r18, 0x01	; 1
    4d56:	31 40       	sbci	r19, 0x01	; 1
    4d58:	90 f4       	brcc	.+36     	; 0x4d7e <libDS3234_ReadFromSRAM+0x42>
    {
        WriteRegister(REG_SRAM_ADDRESS, address);
    4d5a:	68 2f       	mov	r22, r24
    4d5c:	88 e1       	ldi	r24, 0x18	; 24
    4d5e:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <WriteRegister>
        for (index = 0; index < length; ++index)
    4d62:	00 23       	and	r16, r16
    4d64:	71 f0       	breq	.+28     	; 0x4d82 <libDS3234_ReadFromSRAM+0x46>
    4d66:	cf 2d       	mov	r28, r15
    4d68:	d1 2f       	mov	r29, r17
    4d6a:	10 e0       	ldi	r17, 0x00	; 0
        {
            //SRAM address is auto incremented after each read
            ReadRegister(REG_SRAM_DATA, &data[index]);
    4d6c:	be 01       	movw	r22, r28
    4d6e:	89 e1       	ldi	r24, 0x19	; 25
    4d70:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <ReadRegister>
    uint8_t index;

    if ((uint16_t)address + (uint16_t)length <= SRAM_SIZE)
    {
        WriteRegister(REG_SRAM_ADDRESS, address);
        for (index = 0; index < length; ++index)
    4d74:	1f 5f       	subi	r17, 0xFF	; 255
    4d76:	21 96       	adiw	r28, 0x01	; 1
    4d78:	10 13       	cpse	r17, r16
    4d7a:	f8 cf       	rjmp	.-16     	; 0x4d6c <libDS3234_ReadFromSRAM+0x30>
    4d7c:	04 c0       	rjmp	.+8      	; 0x4d86 <libDS3234_ReadFromSRAM+0x4a>
/// @return false  If read failed
/// @return SUCCESS If read succeeded
///
bool libDS3234_ReadFromSRAM(uint8_t address, uint8_t *data, uint8_t length)
{
    bool status = false;
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	03 c0       	rjmp	.+6      	; 0x4d88 <libDS3234_ReadFromSRAM+0x4c>
        for (index = 0; index < length; ++index)
        {
            //SRAM address is auto incremented after each read
            ReadRegister(REG_SRAM_DATA, &data[index]);
        }
        status = true;
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	01 c0       	rjmp	.+2      	; 0x4d88 <libDS3234_ReadFromSRAM+0x4c>
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    }
    return status;
}
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	1f 91       	pop	r17
    4d8e:	0f 91       	pop	r16
    4d90:	ff 90       	pop	r15
    4d92:	08 95       	ret

00004d94 <libUI_Update>:
//FUNCTIONS
//////////////////////////////////////////////////////////////////////////

void libUI_Update(void)
{
    libDisplay_Flush();
    4d94:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <libDisplay_Flush>
    4d98:	08 95       	ret

00004d9a <libUI_SetFont>:
    return;
}

void libUI_SetFont(FONT_INFO *font)
{
    current_font = font;
    4d9a:	90 93 43 07 	sts	0x0743, r25
    4d9e:	80 93 42 07 	sts	0x0742, r24
    4da2:	08 95       	ret

00004da4 <libUI_DrawLine>:
    return;
}

void libUI_DrawLine(uint8_t x_start, uint8_t y_start, uint8_t x_end,
                    uint8_t y_end)
{
    4da4:	6f 92       	push	r6
    4da6:	7f 92       	push	r7
    4da8:	8f 92       	push	r8
    4daa:	9f 92       	push	r9
    4dac:	af 92       	push	r10
    4dae:	bf 92       	push	r11
    4db0:	cf 92       	push	r12
    4db2:	df 92       	push	r13
    4db4:	ef 92       	push	r14
    4db6:	ff 92       	push	r15
    4db8:	0f 93       	push	r16
    4dba:	1f 93       	push	r17
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	b8 2e       	mov	r11, r24
    4dc2:	a6 2e       	mov	r10, r22
    4dc4:	94 2e       	mov	r9, r20
    4dc6:	82 2e       	mov	r8, r18
    //TODO: Fix this function, does not follow code style!
    int dx = abs(x_end - x_start), sx = x_start < x_end ? 1 : -1;
    4dc8:	84 2f       	mov	r24, r20
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	8b 19       	sub	r24, r11
    4dce:	91 09       	sbc	r25, r1
    4dd0:	6c 01       	movw	r12, r24
    4dd2:	22 f4       	brpl	.+8      	; 0x4ddc <libUI_DrawLine+0x38>
    4dd4:	cc 24       	eor	r12, r12
    4dd6:	dd 24       	eor	r13, r13
    4dd8:	c8 1a       	sub	r12, r24
    4dda:	d9 0a       	sbc	r13, r25
    4ddc:	b9 14       	cp	r11, r9
    4dde:	18 f4       	brcc	.+6      	; 0x4de6 <libUI_DrawLine+0x42>
    4de0:	77 24       	eor	r7, r7
    4de2:	73 94       	inc	r7
    4de4:	02 c0       	rjmp	.+4      	; 0x4dea <libUI_DrawLine+0x46>
    4de6:	77 24       	eor	r7, r7
    4de8:	7a 94       	dec	r7
    int dy = abs(y_end - y_start), sy = y_start < y_end ? 1 : -1;
    4dea:	88 2d       	mov	r24, r8
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	8a 19       	sub	r24, r10
    4df0:	91 09       	sbc	r25, r1
    4df2:	8c 01       	movw	r16, r24
    4df4:	22 f4       	brpl	.+8      	; 0x4dfe <libUI_DrawLine+0x5a>
    4df6:	00 27       	eor	r16, r16
    4df8:	11 27       	eor	r17, r17
    4dfa:	08 1b       	sub	r16, r24
    4dfc:	19 0b       	sbc	r17, r25
    4dfe:	a8 14       	cp	r10, r8
    4e00:	18 f4       	brcc	.+6      	; 0x4e08 <libUI_DrawLine+0x64>
    4e02:	66 24       	eor	r6, r6
    4e04:	63 94       	inc	r6
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <libUI_DrawLine+0x68>
    4e08:	66 24       	eor	r6, r6
    4e0a:	6a 94       	dec	r6
    int err = (dx > dy ? dx : -dy) / 2, e2;
    4e0c:	0c 15       	cp	r16, r12
    4e0e:	1d 05       	cpc	r17, r13
    4e10:	6c f0       	brlt	.+26     	; 0x4e2c <libUI_DrawLine+0x88>
    4e12:	cc 27       	eor	r28, r28
    4e14:	dd 27       	eor	r29, r29
    4e16:	c0 1b       	sub	r28, r16
    4e18:	d1 0b       	sbc	r29, r17
    4e1a:	0a f4       	brpl	.+2      	; 0x4e1e <libUI_DrawLine+0x7a>
    4e1c:	21 96       	adiw	r28, 0x01	; 1
    4e1e:	d5 95       	asr	r29
    4e20:	c7 95       	ror	r28
        if (x_start == x_end && y_start == y_end)
        {
            break;
        }
        e2 = err;
        if (e2 > -dx)
    4e22:	ee 24       	eor	r14, r14
    4e24:	ff 24       	eor	r15, r15
    4e26:	ec 18       	sub	r14, r12
    4e28:	fd 08       	sbc	r15, r13
    4e2a:	08 c0       	rjmp	.+16     	; 0x4e3c <libUI_DrawLine+0x98>
                    uint8_t y_end)
{
    //TODO: Fix this function, does not follow code style!
    int dx = abs(x_end - x_start), sx = x_start < x_end ? 1 : -1;
    int dy = abs(y_end - y_start), sy = y_start < y_end ? 1 : -1;
    int err = (dx > dy ? dx : -dy) / 2, e2;
    4e2c:	e6 01       	movw	r28, r12
    4e2e:	dd 20       	and	r13, r13
    4e30:	0c f4       	brge	.+2      	; 0x4e34 <libUI_DrawLine+0x90>
    4e32:	21 96       	adiw	r28, 0x01	; 1
    4e34:	d5 95       	asr	r29
    4e36:	c7 95       	ror	r28
    4e38:	f4 cf       	rjmp	.-24     	; 0x4e22 <libUI_DrawLine+0x7e>
    4e3a:	ef 01       	movw	r28, r30

    while (1)
    {
        libDisplay_SetPixel(x_start, y_start);
    4e3c:	6a 2d       	mov	r22, r10
    4e3e:	8b 2d       	mov	r24, r11
    4e40:	0e 94 31 25 	call	0x4a62	; 0x4a62 <libDisplay_SetPixel>
        if (x_start == x_end && y_start == y_end)
    4e44:	b9 10       	cpse	r11, r9
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <libUI_DrawLine+0xa8>
    4e48:	a8 14       	cp	r10, r8
    4e4a:	89 f0       	breq	.+34     	; 0x4e6e <libUI_DrawLine+0xca>
        {
            break;
        }
        e2 = err;
        if (e2 > -dx)
    4e4c:	ec 16       	cp	r14, r28
    4e4e:	fd 06       	cpc	r15, r29
    4e50:	2c f4       	brge	.+10     	; 0x4e5c <libUI_DrawLine+0xb8>
        {
            err -= dy;
    4e52:	fe 01       	movw	r30, r28
    4e54:	e0 1b       	sub	r30, r16
    4e56:	f1 0b       	sbc	r31, r17
            x_start += sx;
    4e58:	b7 0c       	add	r11, r7
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <libUI_DrawLine+0xba>
    4e5c:	fe 01       	movw	r30, r28
        }
        if (e2 < dy)
    4e5e:	c0 17       	cp	r28, r16
    4e60:	d1 07       	cpc	r29, r17
    4e62:	5c f7       	brge	.-42     	; 0x4e3a <libUI_DrawLine+0x96>
        {
            err += dx;
    4e64:	ef 01       	movw	r28, r30
    4e66:	cc 0d       	add	r28, r12
    4e68:	dd 1d       	adc	r29, r13
            y_start += sy;
    4e6a:	a6 0c       	add	r10, r6
    4e6c:	e7 cf       	rjmp	.-50     	; 0x4e3c <libUI_DrawLine+0x98>
        }
    }
    return;
}
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	1f 91       	pop	r17
    4e74:	0f 91       	pop	r16
    4e76:	ff 90       	pop	r15
    4e78:	ef 90       	pop	r14
    4e7a:	df 90       	pop	r13
    4e7c:	cf 90       	pop	r12
    4e7e:	bf 90       	pop	r11
    4e80:	af 90       	pop	r10
    4e82:	9f 90       	pop	r9
    4e84:	8f 90       	pop	r8
    4e86:	7f 90       	pop	r7
    4e88:	6f 90       	pop	r6
    4e8a:	08 95       	ret

00004e8c <libUI_DrawRectangle>:

void libUI_DrawRectangle(uint8_t x_start, uint8_t y_start, uint8_t width,
                         uint8_t height)
{
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	d8 2f       	mov	r29, r24
    4e96:	c6 2f       	mov	r28, r22
    4e98:	02 2f       	mov	r16, r18
    libUI_DrawLine(x_start, y_start, x_start + width, y_start);
    4e9a:	18 2f       	mov	r17, r24
    4e9c:	14 0f       	add	r17, r20
    4e9e:	26 2f       	mov	r18, r22
    4ea0:	41 2f       	mov	r20, r17
    4ea2:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
    libUI_DrawLine(x_start, y_start, x_start, y_start + height);
    4ea6:	0c 0f       	add	r16, r28
    4ea8:	20 2f       	mov	r18, r16
    4eaa:	4d 2f       	mov	r20, r29
    4eac:	6c 2f       	mov	r22, r28
    4eae:	8d 2f       	mov	r24, r29
    4eb0:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
    libUI_DrawLine(x_start, y_start + height, x_start + width, y_start + height);
    4eb4:	20 2f       	mov	r18, r16
    4eb6:	41 2f       	mov	r20, r17
    4eb8:	60 2f       	mov	r22, r16
    4eba:	8d 2f       	mov	r24, r29
    4ebc:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
    libUI_DrawLine(x_start + width, y_start, x_start + width, y_start + height);
    4ec0:	20 2f       	mov	r18, r16
    4ec2:	41 2f       	mov	r20, r17
    4ec4:	6c 2f       	mov	r22, r28
    4ec6:	81 2f       	mov	r24, r17
    4ec8:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <libUI_DrawLine>
    return;
}
    4ecc:	df 91       	pop	r29
    4ece:	cf 91       	pop	r28
    4ed0:	1f 91       	pop	r17
    4ed2:	0f 91       	pop	r16
    4ed4:	08 95       	ret

00004ed6 <libUI_PrintText>:
    va_end(args);
    return;
}

void libUI_PrintText(const char *buffer, uint8_t x_pos, uint8_t y_pos)
{
    4ed6:	2f 92       	push	r2
    4ed8:	3f 92       	push	r3
    4eda:	4f 92       	push	r4
    4edc:	5f 92       	push	r5
    4ede:	6f 92       	push	r6
    4ee0:	7f 92       	push	r7
    4ee2:	8f 92       	push	r8
    4ee4:	9f 92       	push	r9
    4ee6:	af 92       	push	r10
    4ee8:	bf 92       	push	r11
    4eea:	cf 92       	push	r12
    4eec:	df 92       	push	r13
    4eee:	ef 92       	push	r14
    4ef0:	ff 92       	push	r15
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	00 d0       	rcall	.+0      	; 0x4efc <libUI_PrintText+0x26>
    4efc:	00 d0       	rcall	.+0      	; 0x4efe <libUI_PrintText+0x28>
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <libUI_PrintText+0x2a>
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	9a 83       	std	Y+2, r25	; 0x02
    4f06:	89 83       	std	Y+1, r24	; 0x01
    4f08:	76 2e       	mov	r7, r22
    4f0a:	34 2e       	mov	r3, r20
    uint8_t buffer_index;
    uint8_t data_row = 0;
    uint8_t data_column = 0;

    //TODO: Fix this very bad code!
    for (buffer_index = 0; buffer_index < strlen(buffer); ++buffer_index)
    4f0c:	21 2c       	mov	r2, r1
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
                {
                    byte_index = (data_row * current_font->widthPages) + data_column;
                    for (bit_index = 0; bit_index < 8; ++bit_index)
                    {
                        if ((pgm_read_byte(&(current_font->data[char_offset + byte_index])) & (1 <<
    4f0e:	ee 24       	eor	r14, r14
    4f10:	e3 94       	inc	r14
    4f12:	f1 2c       	mov	r15, r1
            desc_offset = (buffer[buffer_index] - (char)current_font->startChar);
            char_offset = pgm_read_word(&current_font->charInfo[desc_offset].offset);

            for (data_row = 0; data_row < current_font->heightPages; ++data_row)
            {
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
    4f14:	41 2c       	mov	r4, r1
                    for (bit_index = 0; bit_index < 8; ++bit_index)
                    {
                        if ((pgm_read_byte(&(current_font->data[char_offset + byte_index])) & (1 <<
                                (7 - bit_index))) > 0)
                        {
                            libDisplay_SetPixel(x_pos + bit_index + (data_column << 3), y_pos + data_row);
    4f16:	0f 2e       	mov	r0, r31
    4f18:	f7 e0       	ldi	r31, 0x07	; 7
    4f1a:	5f 2e       	mov	r5, r31
    4f1c:	f0 2d       	mov	r31, r0
    4f1e:	61 2c       	mov	r6, r1
    uint8_t buffer_index;
    uint8_t data_row = 0;
    uint8_t data_column = 0;

    //TODO: Fix this very bad code!
    for (buffer_index = 0; buffer_index < strlen(buffer); ++buffer_index)
    4f20:	89 c0       	rjmp	.+274    	; 0x5034 <libUI_PrintText+0x15e>
    {
        if ((char)buffer[buffer_index] != ' ')
    4f22:	e9 81       	ldd	r30, Y+1	; 0x01
    4f24:	fa 81       	ldd	r31, Y+2	; 0x02
    4f26:	e8 0f       	add	r30, r24
    4f28:	f9 1f       	adc	r31, r25
    4f2a:	80 81       	ld	r24, Z
    4f2c:	80 32       	cpi	r24, 0x20	; 32
    4f2e:	09 f4       	brne	.+2      	; 0x4f32 <libUI_PrintText+0x5c>
    4f30:	7e c0       	rjmp	.+252    	; 0x502e <libUI_PrintText+0x158>
        {
            desc_offset = (buffer[buffer_index] - (char)current_font->startChar);
    4f32:	a0 91 42 07 	lds	r26, 0x0742
    4f36:	b0 91 43 07 	lds	r27, 0x0743
    4f3a:	12 96       	adiw	r26, 0x02	; 2
    4f3c:	9c 91       	ld	r25, X
    4f3e:	12 97       	sbiw	r26, 0x02	; 2
    4f40:	89 1b       	sub	r24, r25
            char_offset = pgm_read_word(&current_font->charInfo[desc_offset].offset);
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	9c 01       	movw	r18, r24
    4f46:	22 0f       	add	r18, r18
    4f48:	33 1f       	adc	r19, r19
    4f4a:	a9 01       	movw	r20, r18
    4f4c:	48 0f       	add	r20, r24
    4f4e:	59 1f       	adc	r21, r25
    4f50:	5c 83       	std	Y+4, r21	; 0x04
    4f52:	4b 83       	std	Y+3, r20	; 0x03
    4f54:	15 96       	adiw	r26, 0x05	; 5
    4f56:	2d 91       	ld	r18, X+
    4f58:	3c 91       	ld	r19, X
    4f5a:	16 97       	sbiw	r26, 0x06	; 6
    4f5c:	24 0f       	add	r18, r20
    4f5e:	35 1f       	adc	r19, r21
    4f60:	f9 01       	movw	r30, r18
    4f62:	31 96       	adiw	r30, 0x01	; 1
    4f64:	c5 90       	lpm	r12, Z+
    4f66:	d4 90       	lpm	r13, Z

            for (data_row = 0; data_row < current_font->heightPages; ++data_row)
    4f68:	11 96       	adiw	r26, 0x01	; 1
    4f6a:	8c 91       	ld	r24, X
    4f6c:	11 97       	sbiw	r26, 0x01	; 1
    4f6e:	88 23       	and	r24, r24
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <libUI_PrintText+0x9e>
    4f72:	50 c0       	rjmp	.+160    	; 0x5014 <libUI_PrintText+0x13e>
    4f74:	81 2c       	mov	r8, r1
    4f76:	43 c0       	rjmp	.+134    	; 0x4ffe <libUI_PrintText+0x128>
            {
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
                {
                    byte_index = (data_row * current_font->widthPages) + data_column;
    4f78:	5a 2d       	mov	r21, r10
    4f7a:	88 9d       	mul	r24, r8
    4f7c:	50 0d       	add	r21, r0
    4f7e:	11 24       	eor	r1, r1
                    for (bit_index = 0; bit_index < 8; ++bit_index)
                    {
                        if ((pgm_read_byte(&(current_font->data[char_offset + byte_index])) & (1 <<
                                (7 - bit_index))) > 0)
                        {
                            libDisplay_SetPixel(x_pos + bit_index + (data_column << 3), y_pos + data_row);
    4f80:	ba 2c       	mov	r11, r10
    4f82:	bb 0c       	add	r11, r11
    4f84:	bb 0c       	add	r11, r11
    4f86:	bb 0c       	add	r11, r11
    4f88:	b7 0c       	add	r11, r7
    4f8a:	5d 82       	std	Y+5, r5	; 0x05
    4f8c:	6e 82       	std	Y+6, r6	; 0x06
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
                {
                    byte_index = (data_row * current_font->widthPages) + data_column;
                    for (bit_index = 0; bit_index < 8; ++bit_index)
                    {
                        if ((pgm_read_byte(&(current_font->data[char_offset + byte_index])) & (1 <<
    4f8e:	86 01       	movw	r16, r12
    4f90:	05 0f       	add	r16, r21
    4f92:	11 1d       	adc	r17, r1
    4f94:	e0 91 42 07 	lds	r30, 0x0742
    4f98:	f0 91 43 07 	lds	r31, 0x0743
    4f9c:	07 80       	ldd	r0, Z+7	; 0x07
    4f9e:	f0 85       	ldd	r31, Z+8	; 0x08
    4fa0:	e0 2d       	mov	r30, r0
    4fa2:	e0 0f       	add	r30, r16
    4fa4:	f1 1f       	adc	r31, r17
    4fa6:	e4 91       	lpm	r30, Z
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	c7 01       	movw	r24, r14
    4fac:	0d 80       	ldd	r0, Y+5	; 0x05
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <libUI_PrintText+0xde>
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	0a 94       	dec	r0
    4fb6:	e2 f7       	brpl	.-8      	; 0x4fb0 <libUI_PrintText+0xda>
    4fb8:	e8 23       	and	r30, r24
    4fba:	f9 23       	and	r31, r25
    4fbc:	1e 16       	cp	r1, r30
    4fbe:	1f 06       	cpc	r1, r31
    4fc0:	24 f4       	brge	.+8      	; 0x4fca <libUI_PrintText+0xf4>
                                (7 - bit_index))) > 0)
                        {
                            libDisplay_SetPixel(x_pos + bit_index + (data_column << 3), y_pos + data_row);
    4fc2:	69 2d       	mov	r22, r9
    4fc4:	8b 2d       	mov	r24, r11
    4fc6:	0e 94 31 25 	call	0x4a62	; 0x4a62 <libDisplay_SetPixel>
    4fca:	8d 81       	ldd	r24, Y+5	; 0x05
    4fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	9e 83       	std	Y+6, r25	; 0x06
    4fd2:	8d 83       	std	Y+5, r24	; 0x05
    4fd4:	b3 94       	inc	r11
            for (data_row = 0; data_row < current_font->heightPages; ++data_row)
            {
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
                {
                    byte_index = (data_row * current_font->widthPages) + data_column;
                    for (bit_index = 0; bit_index < 8; ++bit_index)
    4fd6:	01 96       	adiw	r24, 0x01	; 1
    4fd8:	e9 f6       	brne	.-70     	; 0x4f94 <libUI_PrintText+0xbe>
            desc_offset = (buffer[buffer_index] - (char)current_font->startChar);
            char_offset = pgm_read_word(&current_font->charInfo[desc_offset].offset);

            for (data_row = 0; data_row < current_font->heightPages; ++data_row)
            {
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
    4fda:	a3 94       	inc	r10
    4fdc:	e0 91 42 07 	lds	r30, 0x0742
    4fe0:	f0 91 43 07 	lds	r31, 0x0743
    4fe4:	80 81       	ld	r24, Z
    4fe6:	a8 16       	cp	r10, r24
    4fe8:	38 f2       	brcs	.-114    	; 0x4f78 <libUI_PrintText+0xa2>
        if ((char)buffer[buffer_index] != ' ')
        {
            desc_offset = (buffer[buffer_index] - (char)current_font->startChar);
            char_offset = pgm_read_word(&current_font->charInfo[desc_offset].offset);

            for (data_row = 0; data_row < current_font->heightPages; ++data_row)
    4fea:	83 94       	inc	r8
    4fec:	a0 91 42 07 	lds	r26, 0x0742
    4ff0:	b0 91 43 07 	lds	r27, 0x0743
    4ff4:	11 96       	adiw	r26, 0x01	; 1
    4ff6:	8c 91       	ld	r24, X
    4ff8:	11 97       	sbiw	r26, 0x01	; 1
    4ffa:	88 16       	cp	r8, r24
    4ffc:	58 f4       	brcc	.+22     	; 0x5014 <libUI_PrintText+0x13e>
            {
                for (data_column = 0; data_column < current_font->widthPages; ++data_column)
    4ffe:	e0 91 42 07 	lds	r30, 0x0742
    5002:	f0 91 43 07 	lds	r31, 0x0743
    5006:	80 81       	ld	r24, Z
    5008:	88 23       	and	r24, r24
    500a:	79 f3       	breq	.-34     	; 0x4fea <libUI_PrintText+0x114>
    500c:	a4 2c       	mov	r10, r4
    500e:	98 2c       	mov	r9, r8
    5010:	93 0c       	add	r9, r3
    5012:	b2 cf       	rjmp	.-156    	; 0x4f78 <libUI_PrintText+0xa2>
                            libDisplay_SetPixel(x_pos + bit_index + (data_column << 3), y_pos + data_row);
                        }
                    }
                }
            }
            x_pos += (pgm_read_byte(&current_font->charInfo[desc_offset].widthBits) + 2);
    5014:	15 96       	adiw	r26, 0x05	; 5
    5016:	ed 91       	ld	r30, X+
    5018:	fc 91       	ld	r31, X
    501a:	16 97       	sbiw	r26, 0x06	; 6
    501c:	2b 81       	ldd	r18, Y+3	; 0x03
    501e:	3c 81       	ldd	r19, Y+4	; 0x04
    5020:	e2 0f       	add	r30, r18
    5022:	f3 1f       	adc	r31, r19
    5024:	e4 91       	lpm	r30, Z
    5026:	73 94       	inc	r7
    5028:	73 94       	inc	r7
    502a:	7e 0e       	add	r7, r30
    502c:	02 c0       	rjmp	.+4      	; 0x5032 <libUI_PrintText+0x15c>
        }
        else
        {
            x_pos += 6;
    502e:	36 e0       	ldi	r19, 0x06	; 6
    5030:	73 0e       	add	r7, r19
    uint8_t buffer_index;
    uint8_t data_row = 0;
    uint8_t data_column = 0;

    //TODO: Fix this very bad code!
    for (buffer_index = 0; buffer_index < strlen(buffer); ++buffer_index)
    5032:	23 94       	inc	r2
    5034:	82 2d       	mov	r24, r2
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	e9 81       	ldd	r30, Y+1	; 0x01
    503a:	fa 81       	ldd	r31, Y+2	; 0x02
    503c:	01 90       	ld	r0, Z+
    503e:	00 20       	and	r0, r0
    5040:	e9 f7       	brne	.-6      	; 0x503c <libUI_PrintText+0x166>
    5042:	31 97       	sbiw	r30, 0x01	; 1
    5044:	49 81       	ldd	r20, Y+1	; 0x01
    5046:	5a 81       	ldd	r21, Y+2	; 0x02
    5048:	e4 1b       	sub	r30, r20
    504a:	f5 0b       	sbc	r31, r21
    504c:	8e 17       	cp	r24, r30
    504e:	9f 07       	cpc	r25, r31
    5050:	08 f4       	brcc	.+2      	; 0x5054 <libUI_PrintText+0x17e>
    5052:	67 cf       	rjmp	.-306    	; 0x4f22 <libUI_PrintText+0x4c>
        {
            x_pos += 6;
        }
    }
    return;
}
    5054:	26 96       	adiw	r28, 0x06	; 6
    5056:	0f b6       	in	r0, 0x3f	; 63
    5058:	f8 94       	cli
    505a:	de bf       	out	0x3e, r29	; 62
    505c:	0f be       	out	0x3f, r0	; 63
    505e:	cd bf       	out	0x3d, r28	; 61
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	1f 91       	pop	r17
    5066:	0f 91       	pop	r16
    5068:	ff 90       	pop	r15
    506a:	ef 90       	pop	r14
    506c:	df 90       	pop	r13
    506e:	cf 90       	pop	r12
    5070:	bf 90       	pop	r11
    5072:	af 90       	pop	r10
    5074:	9f 90       	pop	r9
    5076:	8f 90       	pop	r8
    5078:	7f 90       	pop	r7
    507a:	6f 90       	pop	r6
    507c:	5f 90       	pop	r5
    507e:	4f 90       	pop	r4
    5080:	3f 90       	pop	r3
    5082:	2f 90       	pop	r2
    5084:	08 95       	ret

00005086 <libUI_Print_P>:
/// @param  y_pos Horizontal position in pixels
/// @param  variable number of arguments
/// @return None
///
void libUI_Print_P(const char *text, uint8_t x_pos, uint8_t y_pos, ...)
{
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	68 97       	sbiw	r28, 0x18	; 24
    5090:	0f b6       	in	r0, 0x3f	; 63
    5092:	f8 94       	cli
    5094:	de bf       	out	0x3e, r29	; 62
    5096:	0f be       	out	0x3f, r0	; 63
    5098:	cd bf       	out	0x3d, r28	; 61
    va_list args;
    char buffer[PRINT_BUFFER_SIZE];

    va_start(args, y_pos);

    vsnprintf_P(buffer, sizeof(buffer), text, args);
    509a:	9e 01       	movw	r18, r28
    509c:	2f 5d       	subi	r18, 0xDF	; 223
    509e:	3f 4f       	sbci	r19, 0xFF	; 255
    50a0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    50a2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    50a4:	68 e1       	ldi	r22, 0x18	; 24
    50a6:	70 e0       	ldi	r23, 0x00	; 0
    50a8:	ce 01       	movw	r24, r28
    50aa:	01 96       	adiw	r24, 0x01	; 1
    50ac:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <vsnprintf_P>

    //Make sure that the buffer is null terminated.
    buffer[sizeof(buffer) - 1] = '\0';
    50b0:	18 8e       	std	Y+24, r1	; 0x18

    libUI_PrintText(buffer, x_pos, y_pos);
    50b2:	48 a1       	ldd	r20, Y+32	; 0x20
    50b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    50b6:	ce 01       	movw	r24, r28
    50b8:	01 96       	adiw	r24, 0x01	; 1
    50ba:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <libUI_PrintText>
    va_end(args);
    return;
}
    50be:	68 96       	adiw	r28, 0x18	; 24
    50c0:	0f b6       	in	r0, 0x3f	; 63
    50c2:	f8 94       	cli
    50c4:	de bf       	out	0x3e, r29	; 62
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	cd bf       	out	0x3d, r28	; 61
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <CheckHealth>:
    CRITICAL("Main loop exit");
    SoftReset();
}

void CheckHealth(void)
{
    50d0:	0f 93       	push	r16
    50d2:	1f 93       	push	r17
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	00 d0       	rcall	.+0      	; 0x50da <CheckHealth+0xa>
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
    static bool memory_low_flag = false;
    static bool high_mcu_temp_flag = false;

    uint16_t unused_memory = StackCount();
    50de:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <StackCount>
    50e2:	8c 01       	movw	r16, r24
    if (!memory_low_flag && unused_memory < LOW_STACK_LIMIT)
    50e4:	80 91 45 07 	lds	r24, 0x0745
    50e8:	81 11       	cpse	r24, r1
    50ea:	1c c0       	rjmp	.+56     	; 0x5124 <CheckHealth+0x54>
    50ec:	04 36       	cpi	r16, 0x64	; 100
    50ee:	11 05       	cpc	r17, r1
    50f0:	c8 f4       	brcc	.+50     	; 0x5124 <CheckHealth+0x54>
    {
        ErrorHandler_LogError(LOW_STACK, unused_memory);
    50f2:	60 2f       	mov	r22, r16
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	0e 94 12 1c 	call	0x3824	; 0x3824 <ErrorHandler_LogError>
        memory_low_flag = true;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	80 93 45 07 	sts	0x0745, r24
        WARNING("Low memory: %u", unused_memory);
    5100:	1f 93       	push	r17
    5102:	0f 93       	push	r16
    5104:	87 ef       	ldi	r24, 0xF7	; 247
    5106:	92 e0       	ldi	r25, 0x02	; 2
    5108:	9f 93       	push	r25
    510a:	8f 93       	push	r24
    510c:	85 eb       	ldi	r24, 0xB5	; 181
    510e:	95 e1       	ldi	r25, 0x15	; 21
    5110:	9f 93       	push	r25
    5112:	8f 93       	push	r24
    5114:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    }

    uint16_t mcu_temperature;
    Sensor_GetSensorValue(SENSOR_INTERNAL_TEMPERATURE, &mcu_temperature);
    5124:	be 01       	movw	r22, r28
    5126:	6f 5f       	subi	r22, 0xFF	; 255
    5128:	7f 4f       	sbci	r23, 0xFF	; 255
    512a:	88 e0       	ldi	r24, 0x08	; 8
    512c:	0e 94 91 23 	call	0x4722	; 0x4722 <Sensor_GetSensorValue>
    if (!high_mcu_temp_flag && mcu_temperature > HICH_MCU_TEMP_LIMIT)
    5130:	80 91 44 07 	lds	r24, 0x0744
    5134:	81 11       	cpse	r24, r1
    5136:	1f c0       	rjmp	.+62     	; 0x5176 <CheckHealth+0xa6>
    5138:	69 81       	ldd	r22, Y+1	; 0x01
    513a:	7a 81       	ldd	r23, Y+2	; 0x02
    513c:	6c 34       	cpi	r22, 0x4C	; 76
    513e:	71 05       	cpc	r23, r1
    5140:	d0 f0       	brcs	.+52     	; 0x5176 <CheckHealth+0xa6>
    {
        ErrorHandler_LogError(HICH_MCU_TEMP_LIMIT, (uint8_t)mcu_temperature);
    5142:	8b e4       	ldi	r24, 0x4B	; 75
    5144:	0e 94 12 1c 	call	0x3824	; 0x3824 <ErrorHandler_LogError>
        high_mcu_temp_flag = true;
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	80 93 44 07 	sts	0x0744, r24
        WARNING("High MCU temperature: %u", mcu_temperature);
    514e:	8a 81       	ldd	r24, Y+2	; 0x02
    5150:	8f 93       	push	r24
    5152:	89 81       	ldd	r24, Y+1	; 0x01
    5154:	8f 93       	push	r24
    5156:	87 ef       	ldi	r24, 0xF7	; 247
    5158:	92 e0       	ldi	r25, 0x02	; 2
    515a:	9f 93       	push	r25
    515c:	8f 93       	push	r24
    515e:	8b e8       	ldi	r24, 0x8B	; 139
    5160:	95 e1       	ldi	r25, 0x15	; 21
    5162:	9f 93       	push	r25
    5164:	8f 93       	push	r24
    5166:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    516a:	0f 90       	pop	r0
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
    5172:	0f 90       	pop	r0
    5174:	0f 90       	pop	r0
    }

    sc_assert(unused_memory > 0);
    5176:	01 2b       	or	r16, r17
    5178:	41 f4       	brne	.+16     	; 0x518a <CheckHealth+0xba>
    517a:	49 e7       	ldi	r20, 0x79	; 121
    517c:	55 e1       	ldi	r21, 0x15	; 21
    517e:	69 ea       	ldi	r22, 0xA9	; 169
    5180:	70 e0       	ldi	r23, 0x00	; 0
    5182:	84 e6       	ldi	r24, 0x64	; 100
    5184:	95 e1       	ldi	r25, 0x15	; 21
    5186:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ErrorHandler_AssertFail>
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	0f 91       	pop	r16
    5196:	08 95       	ret

00005198 <main>:
//////////////////////////////////////////////////////////////////////////

int main(void)
{
#ifdef DEBUG_ENABLE
    uint8_t mcu_status = MCUSR;
    5198:	d4 b6       	in	r13, 0x34	; 52
    MCUSR = 0;
    519a:	14 be       	out	0x34, r1	; 52
#endif

    wdt_disable();
    519c:	88 e1       	ldi	r24, 0x18	; 24
    519e:	0f b6       	in	r0, 0x3f	; 63
    51a0:	f8 94       	cli
    51a2:	80 93 60 00 	sts	0x0060, r24
    51a6:	10 92 60 00 	sts	0x0060, r1
    51aa:	0f be       	out	0x3f, r0	; 63

    libDS3234_InitHW();
    51ac:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <libDS3234_InitHW>
    libRFM69_InitHW();
    51b0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <libRFM69_InitHW>

    libDebug_Init();
    51b4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <libDebug_Init>
    INFO("Main unit started");
    51b8:	c3 e0       	ldi	r28, 0x03	; 3
    51ba:	d3 e0       	ldi	r29, 0x03	; 3
    51bc:	df 93       	push	r29
    51be:	cf 93       	push	r28
    51c0:	88 e3       	ldi	r24, 0x38	; 56
    51c2:	96 e1       	ldi	r25, 0x16	; 22
    51c4:	9f 93       	push	r25
    51c6:	8f 93       	push	r24
    51c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    INFO("Last reset: 0x%02X", mcu_status);
    51cc:	1f 92       	push	r1
    51ce:	df 92       	push	r13
    51d0:	df 93       	push	r29
    51d2:	cf 93       	push	r28
    51d4:	87 e1       	ldi	r24, 0x17	; 23
    51d6:	96 e1       	ldi	r25, 0x16	; 22
    51d8:	9f 93       	push	r25
    51da:	8f 93       	push	r24
    51dc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    ErrorHandler_Init();
    51e0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <ErrorHandler_Init>
    libADC_Init();
    51e4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <libADC_Init>
    Timer_Init();
    51e8:	0e 94 b6 14 	call	0x296c	; 0x296c <libTimer_Init>
    libSPI_Init(1);
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	0e 94 58 14 	call	0x28b0	; 0x28b0 <libSPI_Init>
    libDS3234_Init();
    51f2:	0e 94 08 26 	call	0x4c10	; 0x4c10 <libDS3234_Init>
    libADC_Enable(true);
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <libADC_Enable>
    Sensor_Init();
    51fc:	0e 94 44 23 	call	0x4688	; 0x4688 <Sensor_Init>
    libInput_Init();
    5200:	0e 94 ab 22 	call	0x4556	; 0x4556 <libInput_Init>
    Config_Load();
    5204:	0e 94 17 0c 	call	0x182e	; 0x182e <Config_Load>
    Transceiver_Init();
    5208:	0e 94 fd 18 	call	0x31fa	; 0x31fa <Transceiver_Init>
    Interface_Init();
    520c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <Interface_Init>
    //NOTE: The first gui init called will be the root view.
    guiRTC_Init();
    5210:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <guiRTC_Init>
    guiSensor_Init();
    5214:	0e 94 0d 21 	call	0x421a	; 0x421a <guiSensor_Init>
    Nodes_Init();
    5218:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <Nodes_Init>

    libInput_SetCallbacks(Interface_NextView, Interface_PreviousView,
    521c:	46 e8       	ldi	r20, 0x86	; 134
    521e:	52 e2       	ldi	r21, 0x22	; 34
    5220:	6e e4       	ldi	r22, 0x4E	; 78
    5222:	72 e2       	ldi	r23, 0x22	; 34
    5224:	8a e6       	ldi	r24, 0x6A	; 106
    5226:	92 e2       	ldi	r25, 0x22	; 34
    5228:	0e 94 cd 22 	call	0x459a	; 0x459a <libInput_SetCallbacks>
                          Interface_ActivateView);

    INFO("Start up done");
    522c:	df 93       	push	r29
    522e:	cf 93       	push	r28
    5230:	8b ef       	ldi	r24, 0xFB	; 251
    5232:	95 e1       	ldi	r25, 0x15	; 21
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("Node ID: 0x%02X\r\n", Config_GetNodeId());
    523c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <Config_GetNodeId>
    5240:	1f 92       	push	r1
    5242:	8f 93       	push	r24
    5244:	89 ee       	ldi	r24, 0xE9	; 233
    5246:	95 e1       	ldi	r25, 0x15	; 21
    5248:	9f 93       	push	r25
    524a:	8f 93       	push	r24
    524c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>
    DEBUG("Node role: 0x%02X\r\n", Config_GetNodeRole());
    5250:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <Config_GetNodeRole>
    5254:	1f 92       	push	r1
    5256:	8f 93       	push	r24
    5258:	85 ed       	ldi	r24, 0xD5	; 213
    525a:	95 e1       	ldi	r25, 0x15	; 21
    525c:	9f 93       	push	r25
    525e:	8f 93       	push	r24
    5260:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <libDebug_Print_P>

    ErrorHandler_PrintLog();
    5264:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <ErrorHandler_DumpLog>

    uint32_t check_timer = Timer_GetMilliseconds();
    5268:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    526c:	6b 01       	movw	r12, r22
    526e:	7c 01       	movw	r14, r24
    5270:	8d b7       	in	r24, 0x3d	; 61
    5272:	9e b7       	in	r25, 0x3e	; 62
    5274:	46 96       	adiw	r24, 0x16	; 22
    5276:	0f b6       	in	r0, 0x3f	; 63
    5278:	f8 94       	cli
    527a:	9e bf       	out	0x3e, r25	; 62
    527c:	0f be       	out	0x3f, r0	; 63
    527e:	8d bf       	out	0x3d, r24	; 61

    while (1)
    {
        libADC_Update();
    5280:	0e 94 93 0c 	call	0x1926	; 0x1926 <libADC_Update>
        libInput_Update();
    5284:	0e 94 2e 23 	call	0x465c	; 0x465c <libInput_Update>
        Sensor_Update();
    5288:	0e 94 0c 24 	call	0x4818	; 0x4818 <Sensor_Update>

        Transceiver_Update();
    528c:	0e 94 8f 19 	call	0x331e	; 0x331e <Transceiver_Update>
        Interface_Update();
    5290:	0e 94 82 21 	call	0x4304	; 0x4304 <Interface_Update>

        if (Timer_TimeDifference(check_timer) > 1000)
    5294:	c7 01       	movw	r24, r14
    5296:	b6 01       	movw	r22, r12
    5298:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <Timer_TimeDifference>
    529c:	69 3e       	cpi	r22, 0xE9	; 233
    529e:	73 40       	sbci	r23, 0x03	; 3
    52a0:	81 05       	cpc	r24, r1
    52a2:	91 05       	cpc	r25, r1
    52a4:	68 f3       	brcs	.-38     	; 0x5280 <main+0xe8>
        {
            CheckHealth();
    52a6:	0e 94 68 28 	call	0x50d0	; 0x50d0 <CheckHealth>
            check_timer = Timer_GetMilliseconds();
    52aa:	0e 94 cd 14 	call	0x299a	; 0x299a <libTimer_GetMilliseconds>
    52ae:	6b 01       	movw	r12, r22
    52b0:	7c 01       	movw	r14, r24
    52b2:	e6 cf       	rjmp	.-52     	; 0x5280 <main+0xe8>

000052b4 <__subsf3>:
    52b4:	50 58       	subi	r21, 0x80	; 128

000052b6 <__addsf3>:
    52b6:	bb 27       	eor	r27, r27
    52b8:	aa 27       	eor	r26, r26
    52ba:	0e d0       	rcall	.+28     	; 0x52d8 <__addsf3x>
    52bc:	4d c1       	rjmp	.+666    	; 0x5558 <__fp_round>
    52be:	3e d1       	rcall	.+636    	; 0x553c <__fp_pscA>
    52c0:	30 f0       	brcs	.+12     	; 0x52ce <__addsf3+0x18>
    52c2:	43 d1       	rcall	.+646    	; 0x554a <__fp_pscB>
    52c4:	20 f0       	brcs	.+8      	; 0x52ce <__addsf3+0x18>
    52c6:	31 f4       	brne	.+12     	; 0x52d4 <__addsf3+0x1e>
    52c8:	9f 3f       	cpi	r25, 0xFF	; 255
    52ca:	11 f4       	brne	.+4      	; 0x52d0 <__addsf3+0x1a>
    52cc:	1e f4       	brtc	.+6      	; 0x52d4 <__addsf3+0x1e>
    52ce:	33 c1       	rjmp	.+614    	; 0x5536 <__fp_nan>
    52d0:	0e f4       	brtc	.+2      	; 0x52d4 <__addsf3+0x1e>
    52d2:	e0 95       	com	r30
    52d4:	e7 fb       	bst	r30, 7
    52d6:	29 c1       	rjmp	.+594    	; 0x552a <__fp_inf>

000052d8 <__addsf3x>:
    52d8:	e9 2f       	mov	r30, r25
    52da:	4f d1       	rcall	.+670    	; 0x557a <__fp_split3>
    52dc:	80 f3       	brcs	.-32     	; 0x52be <__addsf3+0x8>
    52de:	ba 17       	cp	r27, r26
    52e0:	62 07       	cpc	r22, r18
    52e2:	73 07       	cpc	r23, r19
    52e4:	84 07       	cpc	r24, r20
    52e6:	95 07       	cpc	r25, r21
    52e8:	18 f0       	brcs	.+6      	; 0x52f0 <__addsf3x+0x18>
    52ea:	71 f4       	brne	.+28     	; 0x5308 <__addsf3x+0x30>
    52ec:	9e f5       	brtc	.+102    	; 0x5354 <__addsf3x+0x7c>
    52ee:	67 c1       	rjmp	.+718    	; 0x55be <__fp_zero>
    52f0:	0e f4       	brtc	.+2      	; 0x52f4 <__addsf3x+0x1c>
    52f2:	e0 95       	com	r30
    52f4:	0b 2e       	mov	r0, r27
    52f6:	ba 2f       	mov	r27, r26
    52f8:	a0 2d       	mov	r26, r0
    52fa:	0b 01       	movw	r0, r22
    52fc:	b9 01       	movw	r22, r18
    52fe:	90 01       	movw	r18, r0
    5300:	0c 01       	movw	r0, r24
    5302:	ca 01       	movw	r24, r20
    5304:	a0 01       	movw	r20, r0
    5306:	11 24       	eor	r1, r1
    5308:	ff 27       	eor	r31, r31
    530a:	59 1b       	sub	r21, r25
    530c:	99 f0       	breq	.+38     	; 0x5334 <__addsf3x+0x5c>
    530e:	59 3f       	cpi	r21, 0xF9	; 249
    5310:	50 f4       	brcc	.+20     	; 0x5326 <__addsf3x+0x4e>
    5312:	50 3e       	cpi	r21, 0xE0	; 224
    5314:	68 f1       	brcs	.+90     	; 0x5370 <__addsf3x+0x98>
    5316:	1a 16       	cp	r1, r26
    5318:	f0 40       	sbci	r31, 0x00	; 0
    531a:	a2 2f       	mov	r26, r18
    531c:	23 2f       	mov	r18, r19
    531e:	34 2f       	mov	r19, r20
    5320:	44 27       	eor	r20, r20
    5322:	58 5f       	subi	r21, 0xF8	; 248
    5324:	f3 cf       	rjmp	.-26     	; 0x530c <__addsf3x+0x34>
    5326:	46 95       	lsr	r20
    5328:	37 95       	ror	r19
    532a:	27 95       	ror	r18
    532c:	a7 95       	ror	r26
    532e:	f0 40       	sbci	r31, 0x00	; 0
    5330:	53 95       	inc	r21
    5332:	c9 f7       	brne	.-14     	; 0x5326 <__addsf3x+0x4e>
    5334:	7e f4       	brtc	.+30     	; 0x5354 <__addsf3x+0x7c>
    5336:	1f 16       	cp	r1, r31
    5338:	ba 0b       	sbc	r27, r26
    533a:	62 0b       	sbc	r22, r18
    533c:	73 0b       	sbc	r23, r19
    533e:	84 0b       	sbc	r24, r20
    5340:	ba f0       	brmi	.+46     	; 0x5370 <__addsf3x+0x98>
    5342:	91 50       	subi	r25, 0x01	; 1
    5344:	a1 f0       	breq	.+40     	; 0x536e <__addsf3x+0x96>
    5346:	ff 0f       	add	r31, r31
    5348:	bb 1f       	adc	r27, r27
    534a:	66 1f       	adc	r22, r22
    534c:	77 1f       	adc	r23, r23
    534e:	88 1f       	adc	r24, r24
    5350:	c2 f7       	brpl	.-16     	; 0x5342 <__addsf3x+0x6a>
    5352:	0e c0       	rjmp	.+28     	; 0x5370 <__addsf3x+0x98>
    5354:	ba 0f       	add	r27, r26
    5356:	62 1f       	adc	r22, r18
    5358:	73 1f       	adc	r23, r19
    535a:	84 1f       	adc	r24, r20
    535c:	48 f4       	brcc	.+18     	; 0x5370 <__addsf3x+0x98>
    535e:	87 95       	ror	r24
    5360:	77 95       	ror	r23
    5362:	67 95       	ror	r22
    5364:	b7 95       	ror	r27
    5366:	f7 95       	ror	r31
    5368:	9e 3f       	cpi	r25, 0xFE	; 254
    536a:	08 f0       	brcs	.+2      	; 0x536e <__addsf3x+0x96>
    536c:	b3 cf       	rjmp	.-154    	; 0x52d4 <__addsf3+0x1e>
    536e:	93 95       	inc	r25
    5370:	88 0f       	add	r24, r24
    5372:	08 f0       	brcs	.+2      	; 0x5376 <__addsf3x+0x9e>
    5374:	99 27       	eor	r25, r25
    5376:	ee 0f       	add	r30, r30
    5378:	97 95       	ror	r25
    537a:	87 95       	ror	r24
    537c:	08 95       	ret

0000537e <__divsf3>:
    537e:	0c d0       	rcall	.+24     	; 0x5398 <__divsf3x>
    5380:	eb c0       	rjmp	.+470    	; 0x5558 <__fp_round>
    5382:	e3 d0       	rcall	.+454    	; 0x554a <__fp_pscB>
    5384:	40 f0       	brcs	.+16     	; 0x5396 <__divsf3+0x18>
    5386:	da d0       	rcall	.+436    	; 0x553c <__fp_pscA>
    5388:	30 f0       	brcs	.+12     	; 0x5396 <__divsf3+0x18>
    538a:	21 f4       	brne	.+8      	; 0x5394 <__divsf3+0x16>
    538c:	5f 3f       	cpi	r21, 0xFF	; 255
    538e:	19 f0       	breq	.+6      	; 0x5396 <__divsf3+0x18>
    5390:	cc c0       	rjmp	.+408    	; 0x552a <__fp_inf>
    5392:	51 11       	cpse	r21, r1
    5394:	15 c1       	rjmp	.+554    	; 0x55c0 <__fp_szero>
    5396:	cf c0       	rjmp	.+414    	; 0x5536 <__fp_nan>

00005398 <__divsf3x>:
    5398:	f0 d0       	rcall	.+480    	; 0x557a <__fp_split3>
    539a:	98 f3       	brcs	.-26     	; 0x5382 <__divsf3+0x4>

0000539c <__divsf3_pse>:
    539c:	99 23       	and	r25, r25
    539e:	c9 f3       	breq	.-14     	; 0x5392 <__divsf3+0x14>
    53a0:	55 23       	and	r21, r21
    53a2:	b1 f3       	breq	.-20     	; 0x5390 <__divsf3+0x12>
    53a4:	95 1b       	sub	r25, r21
    53a6:	55 0b       	sbc	r21, r21
    53a8:	bb 27       	eor	r27, r27
    53aa:	aa 27       	eor	r26, r26
    53ac:	62 17       	cp	r22, r18
    53ae:	73 07       	cpc	r23, r19
    53b0:	84 07       	cpc	r24, r20
    53b2:	38 f0       	brcs	.+14     	; 0x53c2 <__divsf3_pse+0x26>
    53b4:	9f 5f       	subi	r25, 0xFF	; 255
    53b6:	5f 4f       	sbci	r21, 0xFF	; 255
    53b8:	22 0f       	add	r18, r18
    53ba:	33 1f       	adc	r19, r19
    53bc:	44 1f       	adc	r20, r20
    53be:	aa 1f       	adc	r26, r26
    53c0:	a9 f3       	breq	.-22     	; 0x53ac <__divsf3_pse+0x10>
    53c2:	33 d0       	rcall	.+102    	; 0x542a <__divsf3_pse+0x8e>
    53c4:	0e 2e       	mov	r0, r30
    53c6:	3a f0       	brmi	.+14     	; 0x53d6 <__divsf3_pse+0x3a>
    53c8:	e0 e8       	ldi	r30, 0x80	; 128
    53ca:	30 d0       	rcall	.+96     	; 0x542c <__divsf3_pse+0x90>
    53cc:	91 50       	subi	r25, 0x01	; 1
    53ce:	50 40       	sbci	r21, 0x00	; 0
    53d0:	e6 95       	lsr	r30
    53d2:	00 1c       	adc	r0, r0
    53d4:	ca f7       	brpl	.-14     	; 0x53c8 <__divsf3_pse+0x2c>
    53d6:	29 d0       	rcall	.+82     	; 0x542a <__divsf3_pse+0x8e>
    53d8:	fe 2f       	mov	r31, r30
    53da:	27 d0       	rcall	.+78     	; 0x542a <__divsf3_pse+0x8e>
    53dc:	66 0f       	add	r22, r22
    53de:	77 1f       	adc	r23, r23
    53e0:	88 1f       	adc	r24, r24
    53e2:	bb 1f       	adc	r27, r27
    53e4:	26 17       	cp	r18, r22
    53e6:	37 07       	cpc	r19, r23
    53e8:	48 07       	cpc	r20, r24
    53ea:	ab 07       	cpc	r26, r27
    53ec:	b0 e8       	ldi	r27, 0x80	; 128
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <__divsf3_pse+0x56>
    53f0:	bb 0b       	sbc	r27, r27
    53f2:	80 2d       	mov	r24, r0
    53f4:	bf 01       	movw	r22, r30
    53f6:	ff 27       	eor	r31, r31
    53f8:	93 58       	subi	r25, 0x83	; 131
    53fa:	5f 4f       	sbci	r21, 0xFF	; 255
    53fc:	2a f0       	brmi	.+10     	; 0x5408 <__divsf3_pse+0x6c>
    53fe:	9e 3f       	cpi	r25, 0xFE	; 254
    5400:	51 05       	cpc	r21, r1
    5402:	68 f0       	brcs	.+26     	; 0x541e <__divsf3_pse+0x82>
    5404:	92 c0       	rjmp	.+292    	; 0x552a <__fp_inf>
    5406:	dc c0       	rjmp	.+440    	; 0x55c0 <__fp_szero>
    5408:	5f 3f       	cpi	r21, 0xFF	; 255
    540a:	ec f3       	brlt	.-6      	; 0x5406 <__divsf3_pse+0x6a>
    540c:	98 3e       	cpi	r25, 0xE8	; 232
    540e:	dc f3       	brlt	.-10     	; 0x5406 <__divsf3_pse+0x6a>
    5410:	86 95       	lsr	r24
    5412:	77 95       	ror	r23
    5414:	67 95       	ror	r22
    5416:	b7 95       	ror	r27
    5418:	f7 95       	ror	r31
    541a:	9f 5f       	subi	r25, 0xFF	; 255
    541c:	c9 f7       	brne	.-14     	; 0x5410 <__divsf3_pse+0x74>
    541e:	88 0f       	add	r24, r24
    5420:	91 1d       	adc	r25, r1
    5422:	96 95       	lsr	r25
    5424:	87 95       	ror	r24
    5426:	97 f9       	bld	r25, 7
    5428:	08 95       	ret
    542a:	e1 e0       	ldi	r30, 0x01	; 1
    542c:	66 0f       	add	r22, r22
    542e:	77 1f       	adc	r23, r23
    5430:	88 1f       	adc	r24, r24
    5432:	bb 1f       	adc	r27, r27
    5434:	62 17       	cp	r22, r18
    5436:	73 07       	cpc	r23, r19
    5438:	84 07       	cpc	r24, r20
    543a:	ba 07       	cpc	r27, r26
    543c:	20 f0       	brcs	.+8      	; 0x5446 <__divsf3_pse+0xaa>
    543e:	62 1b       	sub	r22, r18
    5440:	73 0b       	sbc	r23, r19
    5442:	84 0b       	sbc	r24, r20
    5444:	ba 0b       	sbc	r27, r26
    5446:	ee 1f       	adc	r30, r30
    5448:	88 f7       	brcc	.-30     	; 0x542c <__divsf3_pse+0x90>
    544a:	e0 95       	com	r30
    544c:	08 95       	ret

0000544e <__fixsfsi>:
    544e:	04 d0       	rcall	.+8      	; 0x5458 <__fixunssfsi>
    5450:	68 94       	set
    5452:	b1 11       	cpse	r27, r1
    5454:	b5 c0       	rjmp	.+362    	; 0x55c0 <__fp_szero>
    5456:	08 95       	ret

00005458 <__fixunssfsi>:
    5458:	98 d0       	rcall	.+304    	; 0x558a <__fp_splitA>
    545a:	88 f0       	brcs	.+34     	; 0x547e <__fixunssfsi+0x26>
    545c:	9f 57       	subi	r25, 0x7F	; 127
    545e:	90 f0       	brcs	.+36     	; 0x5484 <__fixunssfsi+0x2c>
    5460:	b9 2f       	mov	r27, r25
    5462:	99 27       	eor	r25, r25
    5464:	b7 51       	subi	r27, 0x17	; 23
    5466:	a0 f0       	brcs	.+40     	; 0x5490 <__fixunssfsi+0x38>
    5468:	d1 f0       	breq	.+52     	; 0x549e <__fixunssfsi+0x46>
    546a:	66 0f       	add	r22, r22
    546c:	77 1f       	adc	r23, r23
    546e:	88 1f       	adc	r24, r24
    5470:	99 1f       	adc	r25, r25
    5472:	1a f0       	brmi	.+6      	; 0x547a <__fixunssfsi+0x22>
    5474:	ba 95       	dec	r27
    5476:	c9 f7       	brne	.-14     	; 0x546a <__fixunssfsi+0x12>
    5478:	12 c0       	rjmp	.+36     	; 0x549e <__fixunssfsi+0x46>
    547a:	b1 30       	cpi	r27, 0x01	; 1
    547c:	81 f0       	breq	.+32     	; 0x549e <__fixunssfsi+0x46>
    547e:	9f d0       	rcall	.+318    	; 0x55be <__fp_zero>
    5480:	b1 e0       	ldi	r27, 0x01	; 1
    5482:	08 95       	ret
    5484:	9c c0       	rjmp	.+312    	; 0x55be <__fp_zero>
    5486:	67 2f       	mov	r22, r23
    5488:	78 2f       	mov	r23, r24
    548a:	88 27       	eor	r24, r24
    548c:	b8 5f       	subi	r27, 0xF8	; 248
    548e:	39 f0       	breq	.+14     	; 0x549e <__fixunssfsi+0x46>
    5490:	b9 3f       	cpi	r27, 0xF9	; 249
    5492:	cc f3       	brlt	.-14     	; 0x5486 <__fixunssfsi+0x2e>
    5494:	86 95       	lsr	r24
    5496:	77 95       	ror	r23
    5498:	67 95       	ror	r22
    549a:	b3 95       	inc	r27
    549c:	d9 f7       	brne	.-10     	; 0x5494 <__fixunssfsi+0x3c>
    549e:	3e f4       	brtc	.+14     	; 0x54ae <__fixunssfsi+0x56>
    54a0:	90 95       	com	r25
    54a2:	80 95       	com	r24
    54a4:	70 95       	com	r23
    54a6:	61 95       	neg	r22
    54a8:	7f 4f       	sbci	r23, 0xFF	; 255
    54aa:	8f 4f       	sbci	r24, 0xFF	; 255
    54ac:	9f 4f       	sbci	r25, 0xFF	; 255
    54ae:	08 95       	ret

000054b0 <__floatunsisf>:
    54b0:	e8 94       	clt
    54b2:	09 c0       	rjmp	.+18     	; 0x54c6 <__floatsisf+0x12>

000054b4 <__floatsisf>:
    54b4:	97 fb       	bst	r25, 7
    54b6:	3e f4       	brtc	.+14     	; 0x54c6 <__floatsisf+0x12>
    54b8:	90 95       	com	r25
    54ba:	80 95       	com	r24
    54bc:	70 95       	com	r23
    54be:	61 95       	neg	r22
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	8f 4f       	sbci	r24, 0xFF	; 255
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	99 23       	and	r25, r25
    54c8:	a9 f0       	breq	.+42     	; 0x54f4 <__floatsisf+0x40>
    54ca:	f9 2f       	mov	r31, r25
    54cc:	96 e9       	ldi	r25, 0x96	; 150
    54ce:	bb 27       	eor	r27, r27
    54d0:	93 95       	inc	r25
    54d2:	f6 95       	lsr	r31
    54d4:	87 95       	ror	r24
    54d6:	77 95       	ror	r23
    54d8:	67 95       	ror	r22
    54da:	b7 95       	ror	r27
    54dc:	f1 11       	cpse	r31, r1
    54de:	f8 cf       	rjmp	.-16     	; 0x54d0 <__floatsisf+0x1c>
    54e0:	fa f4       	brpl	.+62     	; 0x5520 <__floatsisf+0x6c>
    54e2:	bb 0f       	add	r27, r27
    54e4:	11 f4       	brne	.+4      	; 0x54ea <__floatsisf+0x36>
    54e6:	60 ff       	sbrs	r22, 0
    54e8:	1b c0       	rjmp	.+54     	; 0x5520 <__floatsisf+0x6c>
    54ea:	6f 5f       	subi	r22, 0xFF	; 255
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	8f 4f       	sbci	r24, 0xFF	; 255
    54f0:	9f 4f       	sbci	r25, 0xFF	; 255
    54f2:	16 c0       	rjmp	.+44     	; 0x5520 <__floatsisf+0x6c>
    54f4:	88 23       	and	r24, r24
    54f6:	11 f0       	breq	.+4      	; 0x54fc <__floatsisf+0x48>
    54f8:	96 e9       	ldi	r25, 0x96	; 150
    54fa:	11 c0       	rjmp	.+34     	; 0x551e <__floatsisf+0x6a>
    54fc:	77 23       	and	r23, r23
    54fe:	21 f0       	breq	.+8      	; 0x5508 <__floatsisf+0x54>
    5500:	9e e8       	ldi	r25, 0x8E	; 142
    5502:	87 2f       	mov	r24, r23
    5504:	76 2f       	mov	r23, r22
    5506:	05 c0       	rjmp	.+10     	; 0x5512 <__floatsisf+0x5e>
    5508:	66 23       	and	r22, r22
    550a:	71 f0       	breq	.+28     	; 0x5528 <__floatsisf+0x74>
    550c:	96 e8       	ldi	r25, 0x86	; 134
    550e:	86 2f       	mov	r24, r22
    5510:	70 e0       	ldi	r23, 0x00	; 0
    5512:	60 e0       	ldi	r22, 0x00	; 0
    5514:	2a f0       	brmi	.+10     	; 0x5520 <__floatsisf+0x6c>
    5516:	9a 95       	dec	r25
    5518:	66 0f       	add	r22, r22
    551a:	77 1f       	adc	r23, r23
    551c:	88 1f       	adc	r24, r24
    551e:	da f7       	brpl	.-10     	; 0x5516 <__floatsisf+0x62>
    5520:	88 0f       	add	r24, r24
    5522:	96 95       	lsr	r25
    5524:	87 95       	ror	r24
    5526:	97 f9       	bld	r25, 7
    5528:	08 95       	ret

0000552a <__fp_inf>:
    552a:	97 f9       	bld	r25, 7
    552c:	9f 67       	ori	r25, 0x7F	; 127
    552e:	80 e8       	ldi	r24, 0x80	; 128
    5530:	70 e0       	ldi	r23, 0x00	; 0
    5532:	60 e0       	ldi	r22, 0x00	; 0
    5534:	08 95       	ret

00005536 <__fp_nan>:
    5536:	9f ef       	ldi	r25, 0xFF	; 255
    5538:	80 ec       	ldi	r24, 0xC0	; 192
    553a:	08 95       	ret

0000553c <__fp_pscA>:
    553c:	00 24       	eor	r0, r0
    553e:	0a 94       	dec	r0
    5540:	16 16       	cp	r1, r22
    5542:	17 06       	cpc	r1, r23
    5544:	18 06       	cpc	r1, r24
    5546:	09 06       	cpc	r0, r25
    5548:	08 95       	ret

0000554a <__fp_pscB>:
    554a:	00 24       	eor	r0, r0
    554c:	0a 94       	dec	r0
    554e:	12 16       	cp	r1, r18
    5550:	13 06       	cpc	r1, r19
    5552:	14 06       	cpc	r1, r20
    5554:	05 06       	cpc	r0, r21
    5556:	08 95       	ret

00005558 <__fp_round>:
    5558:	09 2e       	mov	r0, r25
    555a:	03 94       	inc	r0
    555c:	00 0c       	add	r0, r0
    555e:	11 f4       	brne	.+4      	; 0x5564 <__fp_round+0xc>
    5560:	88 23       	and	r24, r24
    5562:	52 f0       	brmi	.+20     	; 0x5578 <__fp_round+0x20>
    5564:	bb 0f       	add	r27, r27
    5566:	40 f4       	brcc	.+16     	; 0x5578 <__fp_round+0x20>
    5568:	bf 2b       	or	r27, r31
    556a:	11 f4       	brne	.+4      	; 0x5570 <__fp_round+0x18>
    556c:	60 ff       	sbrs	r22, 0
    556e:	04 c0       	rjmp	.+8      	; 0x5578 <__fp_round+0x20>
    5570:	6f 5f       	subi	r22, 0xFF	; 255
    5572:	7f 4f       	sbci	r23, 0xFF	; 255
    5574:	8f 4f       	sbci	r24, 0xFF	; 255
    5576:	9f 4f       	sbci	r25, 0xFF	; 255
    5578:	08 95       	ret

0000557a <__fp_split3>:
    557a:	57 fd       	sbrc	r21, 7
    557c:	90 58       	subi	r25, 0x80	; 128
    557e:	44 0f       	add	r20, r20
    5580:	55 1f       	adc	r21, r21
    5582:	59 f0       	breq	.+22     	; 0x559a <__fp_splitA+0x10>
    5584:	5f 3f       	cpi	r21, 0xFF	; 255
    5586:	71 f0       	breq	.+28     	; 0x55a4 <__fp_splitA+0x1a>
    5588:	47 95       	ror	r20

0000558a <__fp_splitA>:
    558a:	88 0f       	add	r24, r24
    558c:	97 fb       	bst	r25, 7
    558e:	99 1f       	adc	r25, r25
    5590:	61 f0       	breq	.+24     	; 0x55aa <__fp_splitA+0x20>
    5592:	9f 3f       	cpi	r25, 0xFF	; 255
    5594:	79 f0       	breq	.+30     	; 0x55b4 <__fp_splitA+0x2a>
    5596:	87 95       	ror	r24
    5598:	08 95       	ret
    559a:	12 16       	cp	r1, r18
    559c:	13 06       	cpc	r1, r19
    559e:	14 06       	cpc	r1, r20
    55a0:	55 1f       	adc	r21, r21
    55a2:	f2 cf       	rjmp	.-28     	; 0x5588 <__fp_split3+0xe>
    55a4:	46 95       	lsr	r20
    55a6:	f1 df       	rcall	.-30     	; 0x558a <__fp_splitA>
    55a8:	08 c0       	rjmp	.+16     	; 0x55ba <__fp_splitA+0x30>
    55aa:	16 16       	cp	r1, r22
    55ac:	17 06       	cpc	r1, r23
    55ae:	18 06       	cpc	r1, r24
    55b0:	99 1f       	adc	r25, r25
    55b2:	f1 cf       	rjmp	.-30     	; 0x5596 <__fp_splitA+0xc>
    55b4:	86 95       	lsr	r24
    55b6:	71 05       	cpc	r23, r1
    55b8:	61 05       	cpc	r22, r1
    55ba:	08 94       	sec
    55bc:	08 95       	ret

000055be <__fp_zero>:
    55be:	e8 94       	clt

000055c0 <__fp_szero>:
    55c0:	bb 27       	eor	r27, r27
    55c2:	66 27       	eor	r22, r22
    55c4:	77 27       	eor	r23, r23
    55c6:	cb 01       	movw	r24, r22
    55c8:	97 f9       	bld	r25, 7
    55ca:	08 95       	ret

000055cc <__mulsf3>:
    55cc:	0b d0       	rcall	.+22     	; 0x55e4 <__mulsf3x>
    55ce:	c4 cf       	rjmp	.-120    	; 0x5558 <__fp_round>
    55d0:	b5 df       	rcall	.-150    	; 0x553c <__fp_pscA>
    55d2:	28 f0       	brcs	.+10     	; 0x55de <__mulsf3+0x12>
    55d4:	ba df       	rcall	.-140    	; 0x554a <__fp_pscB>
    55d6:	18 f0       	brcs	.+6      	; 0x55de <__mulsf3+0x12>
    55d8:	95 23       	and	r25, r21
    55da:	09 f0       	breq	.+2      	; 0x55de <__mulsf3+0x12>
    55dc:	a6 cf       	rjmp	.-180    	; 0x552a <__fp_inf>
    55de:	ab cf       	rjmp	.-170    	; 0x5536 <__fp_nan>
    55e0:	11 24       	eor	r1, r1
    55e2:	ee cf       	rjmp	.-36     	; 0x55c0 <__fp_szero>

000055e4 <__mulsf3x>:
    55e4:	ca df       	rcall	.-108    	; 0x557a <__fp_split3>
    55e6:	a0 f3       	brcs	.-24     	; 0x55d0 <__mulsf3+0x4>

000055e8 <__mulsf3_pse>:
    55e8:	95 9f       	mul	r25, r21
    55ea:	d1 f3       	breq	.-12     	; 0x55e0 <__mulsf3+0x14>
    55ec:	95 0f       	add	r25, r21
    55ee:	50 e0       	ldi	r21, 0x00	; 0
    55f0:	55 1f       	adc	r21, r21
    55f2:	62 9f       	mul	r22, r18
    55f4:	f0 01       	movw	r30, r0
    55f6:	72 9f       	mul	r23, r18
    55f8:	bb 27       	eor	r27, r27
    55fa:	f0 0d       	add	r31, r0
    55fc:	b1 1d       	adc	r27, r1
    55fe:	63 9f       	mul	r22, r19
    5600:	aa 27       	eor	r26, r26
    5602:	f0 0d       	add	r31, r0
    5604:	b1 1d       	adc	r27, r1
    5606:	aa 1f       	adc	r26, r26
    5608:	64 9f       	mul	r22, r20
    560a:	66 27       	eor	r22, r22
    560c:	b0 0d       	add	r27, r0
    560e:	a1 1d       	adc	r26, r1
    5610:	66 1f       	adc	r22, r22
    5612:	82 9f       	mul	r24, r18
    5614:	22 27       	eor	r18, r18
    5616:	b0 0d       	add	r27, r0
    5618:	a1 1d       	adc	r26, r1
    561a:	62 1f       	adc	r22, r18
    561c:	73 9f       	mul	r23, r19
    561e:	b0 0d       	add	r27, r0
    5620:	a1 1d       	adc	r26, r1
    5622:	62 1f       	adc	r22, r18
    5624:	83 9f       	mul	r24, r19
    5626:	a0 0d       	add	r26, r0
    5628:	61 1d       	adc	r22, r1
    562a:	22 1f       	adc	r18, r18
    562c:	74 9f       	mul	r23, r20
    562e:	33 27       	eor	r19, r19
    5630:	a0 0d       	add	r26, r0
    5632:	61 1d       	adc	r22, r1
    5634:	23 1f       	adc	r18, r19
    5636:	84 9f       	mul	r24, r20
    5638:	60 0d       	add	r22, r0
    563a:	21 1d       	adc	r18, r1
    563c:	82 2f       	mov	r24, r18
    563e:	76 2f       	mov	r23, r22
    5640:	6a 2f       	mov	r22, r26
    5642:	11 24       	eor	r1, r1
    5644:	9f 57       	subi	r25, 0x7F	; 127
    5646:	50 40       	sbci	r21, 0x00	; 0
    5648:	8a f0       	brmi	.+34     	; 0x566c <__mulsf3_pse+0x84>
    564a:	e1 f0       	breq	.+56     	; 0x5684 <__mulsf3_pse+0x9c>
    564c:	88 23       	and	r24, r24
    564e:	4a f0       	brmi	.+18     	; 0x5662 <__mulsf3_pse+0x7a>
    5650:	ee 0f       	add	r30, r30
    5652:	ff 1f       	adc	r31, r31
    5654:	bb 1f       	adc	r27, r27
    5656:	66 1f       	adc	r22, r22
    5658:	77 1f       	adc	r23, r23
    565a:	88 1f       	adc	r24, r24
    565c:	91 50       	subi	r25, 0x01	; 1
    565e:	50 40       	sbci	r21, 0x00	; 0
    5660:	a9 f7       	brne	.-22     	; 0x564c <__mulsf3_pse+0x64>
    5662:	9e 3f       	cpi	r25, 0xFE	; 254
    5664:	51 05       	cpc	r21, r1
    5666:	70 f0       	brcs	.+28     	; 0x5684 <__mulsf3_pse+0x9c>
    5668:	60 cf       	rjmp	.-320    	; 0x552a <__fp_inf>
    566a:	aa cf       	rjmp	.-172    	; 0x55c0 <__fp_szero>
    566c:	5f 3f       	cpi	r21, 0xFF	; 255
    566e:	ec f3       	brlt	.-6      	; 0x566a <__mulsf3_pse+0x82>
    5670:	98 3e       	cpi	r25, 0xE8	; 232
    5672:	dc f3       	brlt	.-10     	; 0x566a <__mulsf3_pse+0x82>
    5674:	86 95       	lsr	r24
    5676:	77 95       	ror	r23
    5678:	67 95       	ror	r22
    567a:	b7 95       	ror	r27
    567c:	f7 95       	ror	r31
    567e:	e7 95       	ror	r30
    5680:	9f 5f       	subi	r25, 0xFF	; 255
    5682:	c1 f7       	brne	.-16     	; 0x5674 <__mulsf3_pse+0x8c>
    5684:	fe 2b       	or	r31, r30
    5686:	88 0f       	add	r24, r24
    5688:	91 1d       	adc	r25, r1
    568a:	96 95       	lsr	r25
    568c:	87 95       	ror	r24
    568e:	97 f9       	bld	r25, 7
    5690:	08 95       	ret

00005692 <__mulsi3>:
    5692:	db 01       	movw	r26, r22
    5694:	8f 93       	push	r24
    5696:	9f 93       	push	r25
    5698:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__muluhisi3>
    569c:	bf 91       	pop	r27
    569e:	af 91       	pop	r26
    56a0:	a2 9f       	mul	r26, r18
    56a2:	80 0d       	add	r24, r0
    56a4:	91 1d       	adc	r25, r1
    56a6:	a3 9f       	mul	r26, r19
    56a8:	90 0d       	add	r25, r0
    56aa:	b2 9f       	mul	r27, r18
    56ac:	90 0d       	add	r25, r0
    56ae:	11 24       	eor	r1, r1
    56b0:	08 95       	ret

000056b2 <__udivmodhi4>:
    56b2:	aa 1b       	sub	r26, r26
    56b4:	bb 1b       	sub	r27, r27
    56b6:	51 e1       	ldi	r21, 0x11	; 17
    56b8:	07 c0       	rjmp	.+14     	; 0x56c8 <__udivmodhi4_ep>

000056ba <__udivmodhi4_loop>:
    56ba:	aa 1f       	adc	r26, r26
    56bc:	bb 1f       	adc	r27, r27
    56be:	a6 17       	cp	r26, r22
    56c0:	b7 07       	cpc	r27, r23
    56c2:	10 f0       	brcs	.+4      	; 0x56c8 <__udivmodhi4_ep>
    56c4:	a6 1b       	sub	r26, r22
    56c6:	b7 0b       	sbc	r27, r23

000056c8 <__udivmodhi4_ep>:
    56c8:	88 1f       	adc	r24, r24
    56ca:	99 1f       	adc	r25, r25
    56cc:	5a 95       	dec	r21
    56ce:	a9 f7       	brne	.-22     	; 0x56ba <__udivmodhi4_loop>
    56d0:	80 95       	com	r24
    56d2:	90 95       	com	r25
    56d4:	bc 01       	movw	r22, r24
    56d6:	cd 01       	movw	r24, r26
    56d8:	08 95       	ret

000056da <__divmodhi4>:
    56da:	97 fb       	bst	r25, 7
    56dc:	07 2e       	mov	r0, r23
    56de:	16 f4       	brtc	.+4      	; 0x56e4 <__divmodhi4+0xa>
    56e0:	00 94       	com	r0
    56e2:	07 d0       	rcall	.+14     	; 0x56f2 <__divmodhi4_neg1>
    56e4:	77 fd       	sbrc	r23, 7
    56e6:	09 d0       	rcall	.+18     	; 0x56fa <__divmodhi4_neg2>
    56e8:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__udivmodhi4>
    56ec:	07 fc       	sbrc	r0, 7
    56ee:	05 d0       	rcall	.+10     	; 0x56fa <__divmodhi4_neg2>
    56f0:	3e f4       	brtc	.+14     	; 0x5700 <__divmodhi4_exit>

000056f2 <__divmodhi4_neg1>:
    56f2:	90 95       	com	r25
    56f4:	81 95       	neg	r24
    56f6:	9f 4f       	sbci	r25, 0xFF	; 255
    56f8:	08 95       	ret

000056fa <__divmodhi4_neg2>:
    56fa:	70 95       	com	r23
    56fc:	61 95       	neg	r22
    56fe:	7f 4f       	sbci	r23, 0xFF	; 255

00005700 <__divmodhi4_exit>:
    5700:	08 95       	ret

00005702 <__udivmodsi4>:
    5702:	a1 e2       	ldi	r26, 0x21	; 33
    5704:	1a 2e       	mov	r1, r26
    5706:	aa 1b       	sub	r26, r26
    5708:	bb 1b       	sub	r27, r27
    570a:	fd 01       	movw	r30, r26
    570c:	0d c0       	rjmp	.+26     	; 0x5728 <__udivmodsi4_ep>

0000570e <__udivmodsi4_loop>:
    570e:	aa 1f       	adc	r26, r26
    5710:	bb 1f       	adc	r27, r27
    5712:	ee 1f       	adc	r30, r30
    5714:	ff 1f       	adc	r31, r31
    5716:	a2 17       	cp	r26, r18
    5718:	b3 07       	cpc	r27, r19
    571a:	e4 07       	cpc	r30, r20
    571c:	f5 07       	cpc	r31, r21
    571e:	20 f0       	brcs	.+8      	; 0x5728 <__udivmodsi4_ep>
    5720:	a2 1b       	sub	r26, r18
    5722:	b3 0b       	sbc	r27, r19
    5724:	e4 0b       	sbc	r30, r20
    5726:	f5 0b       	sbc	r31, r21

00005728 <__udivmodsi4_ep>:
    5728:	66 1f       	adc	r22, r22
    572a:	77 1f       	adc	r23, r23
    572c:	88 1f       	adc	r24, r24
    572e:	99 1f       	adc	r25, r25
    5730:	1a 94       	dec	r1
    5732:	69 f7       	brne	.-38     	; 0x570e <__udivmodsi4_loop>
    5734:	60 95       	com	r22
    5736:	70 95       	com	r23
    5738:	80 95       	com	r24
    573a:	90 95       	com	r25
    573c:	9b 01       	movw	r18, r22
    573e:	ac 01       	movw	r20, r24
    5740:	bd 01       	movw	r22, r26
    5742:	cf 01       	movw	r24, r30
    5744:	08 95       	ret

00005746 <__umulhisi3>:
    5746:	a2 9f       	mul	r26, r18
    5748:	b0 01       	movw	r22, r0
    574a:	b3 9f       	mul	r27, r19
    574c:	c0 01       	movw	r24, r0
    574e:	a3 9f       	mul	r26, r19
    5750:	70 0d       	add	r23, r0
    5752:	81 1d       	adc	r24, r1
    5754:	11 24       	eor	r1, r1
    5756:	91 1d       	adc	r25, r1
    5758:	b2 9f       	mul	r27, r18
    575a:	70 0d       	add	r23, r0
    575c:	81 1d       	adc	r24, r1
    575e:	11 24       	eor	r1, r1
    5760:	91 1d       	adc	r25, r1
    5762:	08 95       	ret

00005764 <__usmulhisi3>:
    5764:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>

00005768 <__usmulhisi3_tail>:
    5768:	b7 ff       	sbrs	r27, 7
    576a:	08 95       	ret
    576c:	82 1b       	sub	r24, r18
    576e:	93 0b       	sbc	r25, r19
    5770:	08 95       	ret

00005772 <__muluhisi3>:
    5772:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__umulhisi3>
    5776:	a5 9f       	mul	r26, r21
    5778:	90 0d       	add	r25, r0
    577a:	b4 9f       	mul	r27, r20
    577c:	90 0d       	add	r25, r0
    577e:	a4 9f       	mul	r26, r20
    5780:	80 0d       	add	r24, r0
    5782:	91 1d       	adc	r25, r1
    5784:	11 24       	eor	r1, r1
    5786:	08 95       	ret

00005788 <__mulshisi3>:
    5788:	b7 ff       	sbrs	r27, 7
    578a:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__muluhisi3>

0000578e <__mulohisi3>:
    578e:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__muluhisi3>
    5792:	82 1b       	sub	r24, r18
    5794:	93 0b       	sbc	r25, r19
    5796:	08 95       	ret

00005798 <strncpy_P>:
    5798:	fb 01       	movw	r30, r22
    579a:	dc 01       	movw	r26, r24
    579c:	41 50       	subi	r20, 0x01	; 1
    579e:	50 40       	sbci	r21, 0x00	; 0
    57a0:	48 f0       	brcs	.+18     	; 0x57b4 <strncpy_P+0x1c>
    57a2:	05 90       	lpm	r0, Z+
    57a4:	0d 92       	st	X+, r0
    57a6:	00 20       	and	r0, r0
    57a8:	c9 f7       	brne	.-14     	; 0x579c <strncpy_P+0x4>
    57aa:	01 c0       	rjmp	.+2      	; 0x57ae <strncpy_P+0x16>
    57ac:	1d 92       	st	X+, r1
    57ae:	41 50       	subi	r20, 0x01	; 1
    57b0:	50 40       	sbci	r21, 0x00	; 0
    57b2:	e0 f7       	brcc	.-8      	; 0x57ac <strncpy_P+0x14>
    57b4:	08 95       	ret

000057b6 <memcpy>:
    57b6:	fb 01       	movw	r30, r22
    57b8:	dc 01       	movw	r26, r24
    57ba:	02 c0       	rjmp	.+4      	; 0x57c0 <memcpy+0xa>
    57bc:	01 90       	ld	r0, Z+
    57be:	0d 92       	st	X+, r0
    57c0:	41 50       	subi	r20, 0x01	; 1
    57c2:	50 40       	sbci	r21, 0x00	; 0
    57c4:	d8 f7       	brcc	.-10     	; 0x57bc <memcpy+0x6>
    57c6:	08 95       	ret

000057c8 <vsnprintf_P>:
    57c8:	ae e0       	ldi	r26, 0x0E	; 14
    57ca:	b0 e0       	ldi	r27, 0x00	; 0
    57cc:	ea ee       	ldi	r30, 0xEA	; 234
    57ce:	fb e2       	ldi	r31, 0x2B	; 43
    57d0:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <__prologue_saves__+0x1c>
    57d4:	8c 01       	movw	r16, r24
    57d6:	ca 01       	movw	r24, r20
    57d8:	4e e0       	ldi	r20, 0x0E	; 14
    57da:	4c 83       	std	Y+4, r20	; 0x04
    57dc:	1a 83       	std	Y+2, r17	; 0x02
    57de:	09 83       	std	Y+1, r16	; 0x01
    57e0:	77 ff       	sbrs	r23, 7
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <vsnprintf_P+0x20>
    57e4:	60 e0       	ldi	r22, 0x00	; 0
    57e6:	70 e8       	ldi	r23, 0x80	; 128
    57e8:	61 50       	subi	r22, 0x01	; 1
    57ea:	71 09       	sbc	r23, r1
    57ec:	7e 83       	std	Y+6, r23	; 0x06
    57ee:	6d 83       	std	Y+5, r22	; 0x05
    57f0:	a9 01       	movw	r20, r18
    57f2:	bc 01       	movw	r22, r24
    57f4:	ce 01       	movw	r24, r28
    57f6:	01 96       	adiw	r24, 0x01	; 1
    57f8:	0e 94 10 2c 	call	0x5820	; 0x5820 <vfprintf>
    57fc:	4d 81       	ldd	r20, Y+5	; 0x05
    57fe:	5e 81       	ldd	r21, Y+6	; 0x06
    5800:	57 fd       	sbrc	r21, 7
    5802:	0a c0       	rjmp	.+20     	; 0x5818 <vsnprintf_P+0x50>
    5804:	2f 81       	ldd	r18, Y+7	; 0x07
    5806:	38 85       	ldd	r19, Y+8	; 0x08
    5808:	42 17       	cp	r20, r18
    580a:	53 07       	cpc	r21, r19
    580c:	0c f4       	brge	.+2      	; 0x5810 <vsnprintf_P+0x48>
    580e:	9a 01       	movw	r18, r20
    5810:	f8 01       	movw	r30, r16
    5812:	e2 0f       	add	r30, r18
    5814:	f3 1f       	adc	r31, r19
    5816:	10 82       	st	Z, r1
    5818:	2e 96       	adiw	r28, 0x0e	; 14
    581a:	e4 e0       	ldi	r30, 0x04	; 4
    581c:	0c 94 e0 2e 	jmp	0x5dc0	; 0x5dc0 <__epilogue_restores__+0x1c>

00005820 <vfprintf>:
    5820:	ac e0       	ldi	r26, 0x0C	; 12
    5822:	b0 e0       	ldi	r27, 0x00	; 0
    5824:	e6 e1       	ldi	r30, 0x16	; 22
    5826:	fc e2       	ldi	r31, 0x2C	; 44
    5828:	0c 94 b6 2e 	jmp	0x5d6c	; 0x5d6c <__prologue_saves__>
    582c:	7c 01       	movw	r14, r24
    582e:	6b 01       	movw	r12, r22
    5830:	8a 01       	movw	r16, r20
    5832:	fc 01       	movw	r30, r24
    5834:	17 82       	std	Z+7, r1	; 0x07
    5836:	16 82       	std	Z+6, r1	; 0x06
    5838:	83 81       	ldd	r24, Z+3	; 0x03
    583a:	81 ff       	sbrs	r24, 1
    583c:	bd c1       	rjmp	.+890    	; 0x5bb8 <vfprintf+0x398>
    583e:	ce 01       	movw	r24, r28
    5840:	01 96       	adiw	r24, 0x01	; 1
    5842:	4c 01       	movw	r8, r24
    5844:	f7 01       	movw	r30, r14
    5846:	93 81       	ldd	r25, Z+3	; 0x03
    5848:	f6 01       	movw	r30, r12
    584a:	93 fd       	sbrc	r25, 3
    584c:	85 91       	lpm	r24, Z+
    584e:	93 ff       	sbrs	r25, 3
    5850:	81 91       	ld	r24, Z+
    5852:	6f 01       	movw	r12, r30
    5854:	88 23       	and	r24, r24
    5856:	09 f4       	brne	.+2      	; 0x585a <vfprintf+0x3a>
    5858:	ab c1       	rjmp	.+854    	; 0x5bb0 <vfprintf+0x390>
    585a:	85 32       	cpi	r24, 0x25	; 37
    585c:	39 f4       	brne	.+14     	; 0x586c <vfprintf+0x4c>
    585e:	93 fd       	sbrc	r25, 3
    5860:	85 91       	lpm	r24, Z+
    5862:	93 ff       	sbrs	r25, 3
    5864:	81 91       	ld	r24, Z+
    5866:	6f 01       	movw	r12, r30
    5868:	85 32       	cpi	r24, 0x25	; 37
    586a:	29 f4       	brne	.+10     	; 0x5876 <vfprintf+0x56>
    586c:	b7 01       	movw	r22, r14
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5874:	e7 cf       	rjmp	.-50     	; 0x5844 <vfprintf+0x24>
    5876:	51 2c       	mov	r5, r1
    5878:	31 2c       	mov	r3, r1
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	20 32       	cpi	r18, 0x20	; 32
    587e:	a0 f4       	brcc	.+40     	; 0x58a8 <vfprintf+0x88>
    5880:	8b 32       	cpi	r24, 0x2B	; 43
    5882:	69 f0       	breq	.+26     	; 0x589e <vfprintf+0x7e>
    5884:	30 f4       	brcc	.+12     	; 0x5892 <vfprintf+0x72>
    5886:	80 32       	cpi	r24, 0x20	; 32
    5888:	59 f0       	breq	.+22     	; 0x58a0 <vfprintf+0x80>
    588a:	83 32       	cpi	r24, 0x23	; 35
    588c:	69 f4       	brne	.+26     	; 0x58a8 <vfprintf+0x88>
    588e:	20 61       	ori	r18, 0x10	; 16
    5890:	2c c0       	rjmp	.+88     	; 0x58ea <vfprintf+0xca>
    5892:	8d 32       	cpi	r24, 0x2D	; 45
    5894:	39 f0       	breq	.+14     	; 0x58a4 <vfprintf+0x84>
    5896:	80 33       	cpi	r24, 0x30	; 48
    5898:	39 f4       	brne	.+14     	; 0x58a8 <vfprintf+0x88>
    589a:	21 60       	ori	r18, 0x01	; 1
    589c:	26 c0       	rjmp	.+76     	; 0x58ea <vfprintf+0xca>
    589e:	22 60       	ori	r18, 0x02	; 2
    58a0:	24 60       	ori	r18, 0x04	; 4
    58a2:	23 c0       	rjmp	.+70     	; 0x58ea <vfprintf+0xca>
    58a4:	28 60       	ori	r18, 0x08	; 8
    58a6:	21 c0       	rjmp	.+66     	; 0x58ea <vfprintf+0xca>
    58a8:	27 fd       	sbrc	r18, 7
    58aa:	27 c0       	rjmp	.+78     	; 0x58fa <vfprintf+0xda>
    58ac:	30 ed       	ldi	r19, 0xD0	; 208
    58ae:	38 0f       	add	r19, r24
    58b0:	3a 30       	cpi	r19, 0x0A	; 10
    58b2:	78 f4       	brcc	.+30     	; 0x58d2 <vfprintf+0xb2>
    58b4:	26 ff       	sbrs	r18, 6
    58b6:	06 c0       	rjmp	.+12     	; 0x58c4 <vfprintf+0xa4>
    58b8:	fa e0       	ldi	r31, 0x0A	; 10
    58ba:	5f 9e       	mul	r5, r31
    58bc:	30 0d       	add	r19, r0
    58be:	11 24       	eor	r1, r1
    58c0:	53 2e       	mov	r5, r19
    58c2:	13 c0       	rjmp	.+38     	; 0x58ea <vfprintf+0xca>
    58c4:	8a e0       	ldi	r24, 0x0A	; 10
    58c6:	38 9e       	mul	r3, r24
    58c8:	30 0d       	add	r19, r0
    58ca:	11 24       	eor	r1, r1
    58cc:	33 2e       	mov	r3, r19
    58ce:	20 62       	ori	r18, 0x20	; 32
    58d0:	0c c0       	rjmp	.+24     	; 0x58ea <vfprintf+0xca>
    58d2:	8e 32       	cpi	r24, 0x2E	; 46
    58d4:	21 f4       	brne	.+8      	; 0x58de <vfprintf+0xbe>
    58d6:	26 fd       	sbrc	r18, 6
    58d8:	6b c1       	rjmp	.+726    	; 0x5bb0 <vfprintf+0x390>
    58da:	20 64       	ori	r18, 0x40	; 64
    58dc:	06 c0       	rjmp	.+12     	; 0x58ea <vfprintf+0xca>
    58de:	8c 36       	cpi	r24, 0x6C	; 108
    58e0:	11 f4       	brne	.+4      	; 0x58e6 <vfprintf+0xc6>
    58e2:	20 68       	ori	r18, 0x80	; 128
    58e4:	02 c0       	rjmp	.+4      	; 0x58ea <vfprintf+0xca>
    58e6:	88 36       	cpi	r24, 0x68	; 104
    58e8:	41 f4       	brne	.+16     	; 0x58fa <vfprintf+0xda>
    58ea:	f6 01       	movw	r30, r12
    58ec:	93 fd       	sbrc	r25, 3
    58ee:	85 91       	lpm	r24, Z+
    58f0:	93 ff       	sbrs	r25, 3
    58f2:	81 91       	ld	r24, Z+
    58f4:	6f 01       	movw	r12, r30
    58f6:	81 11       	cpse	r24, r1
    58f8:	c1 cf       	rjmp	.-126    	; 0x587c <vfprintf+0x5c>
    58fa:	98 2f       	mov	r25, r24
    58fc:	9f 7d       	andi	r25, 0xDF	; 223
    58fe:	95 54       	subi	r25, 0x45	; 69
    5900:	93 30       	cpi	r25, 0x03	; 3
    5902:	28 f4       	brcc	.+10     	; 0x590e <vfprintf+0xee>
    5904:	0c 5f       	subi	r16, 0xFC	; 252
    5906:	1f 4f       	sbci	r17, 0xFF	; 255
    5908:	ff e3       	ldi	r31, 0x3F	; 63
    590a:	f9 83       	std	Y+1, r31	; 0x01
    590c:	0d c0       	rjmp	.+26     	; 0x5928 <vfprintf+0x108>
    590e:	83 36       	cpi	r24, 0x63	; 99
    5910:	31 f0       	breq	.+12     	; 0x591e <vfprintf+0xfe>
    5912:	83 37       	cpi	r24, 0x73	; 115
    5914:	71 f0       	breq	.+28     	; 0x5932 <vfprintf+0x112>
    5916:	83 35       	cpi	r24, 0x53	; 83
    5918:	09 f0       	breq	.+2      	; 0x591c <vfprintf+0xfc>
    591a:	5b c0       	rjmp	.+182    	; 0x59d2 <vfprintf+0x1b2>
    591c:	22 c0       	rjmp	.+68     	; 0x5962 <vfprintf+0x142>
    591e:	f8 01       	movw	r30, r16
    5920:	80 81       	ld	r24, Z
    5922:	89 83       	std	Y+1, r24	; 0x01
    5924:	0e 5f       	subi	r16, 0xFE	; 254
    5926:	1f 4f       	sbci	r17, 0xFF	; 255
    5928:	44 24       	eor	r4, r4
    592a:	43 94       	inc	r4
    592c:	51 2c       	mov	r5, r1
    592e:	54 01       	movw	r10, r8
    5930:	15 c0       	rjmp	.+42     	; 0x595c <vfprintf+0x13c>
    5932:	38 01       	movw	r6, r16
    5934:	f2 e0       	ldi	r31, 0x02	; 2
    5936:	6f 0e       	add	r6, r31
    5938:	71 1c       	adc	r7, r1
    593a:	f8 01       	movw	r30, r16
    593c:	a0 80       	ld	r10, Z
    593e:	b1 80       	ldd	r11, Z+1	; 0x01
    5940:	26 ff       	sbrs	r18, 6
    5942:	03 c0       	rjmp	.+6      	; 0x594a <vfprintf+0x12a>
    5944:	65 2d       	mov	r22, r5
    5946:	70 e0       	ldi	r23, 0x00	; 0
    5948:	02 c0       	rjmp	.+4      	; 0x594e <vfprintf+0x12e>
    594a:	6f ef       	ldi	r22, 0xFF	; 255
    594c:	7f ef       	ldi	r23, 0xFF	; 255
    594e:	c5 01       	movw	r24, r10
    5950:	2c 87       	std	Y+12, r18	; 0x0c
    5952:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <strnlen>
    5956:	2c 01       	movw	r4, r24
    5958:	83 01       	movw	r16, r6
    595a:	2c 85       	ldd	r18, Y+12	; 0x0c
    595c:	2f 77       	andi	r18, 0x7F	; 127
    595e:	22 2e       	mov	r2, r18
    5960:	17 c0       	rjmp	.+46     	; 0x5990 <vfprintf+0x170>
    5962:	38 01       	movw	r6, r16
    5964:	f2 e0       	ldi	r31, 0x02	; 2
    5966:	6f 0e       	add	r6, r31
    5968:	71 1c       	adc	r7, r1
    596a:	f8 01       	movw	r30, r16
    596c:	a0 80       	ld	r10, Z
    596e:	b1 80       	ldd	r11, Z+1	; 0x01
    5970:	26 ff       	sbrs	r18, 6
    5972:	03 c0       	rjmp	.+6      	; 0x597a <vfprintf+0x15a>
    5974:	65 2d       	mov	r22, r5
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	02 c0       	rjmp	.+4      	; 0x597e <vfprintf+0x15e>
    597a:	6f ef       	ldi	r22, 0xFF	; 255
    597c:	7f ef       	ldi	r23, 0xFF	; 255
    597e:	c5 01       	movw	r24, r10
    5980:	2c 87       	std	Y+12, r18	; 0x0c
    5982:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <strnlen_P>
    5986:	2c 01       	movw	r4, r24
    5988:	2c 85       	ldd	r18, Y+12	; 0x0c
    598a:	20 68       	ori	r18, 0x80	; 128
    598c:	22 2e       	mov	r2, r18
    598e:	83 01       	movw	r16, r6
    5990:	23 fc       	sbrc	r2, 3
    5992:	1b c0       	rjmp	.+54     	; 0x59ca <vfprintf+0x1aa>
    5994:	83 2d       	mov	r24, r3
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	48 16       	cp	r4, r24
    599a:	59 06       	cpc	r5, r25
    599c:	b0 f4       	brcc	.+44     	; 0x59ca <vfprintf+0x1aa>
    599e:	b7 01       	movw	r22, r14
    59a0:	80 e2       	ldi	r24, 0x20	; 32
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    59a8:	3a 94       	dec	r3
    59aa:	f4 cf       	rjmp	.-24     	; 0x5994 <vfprintf+0x174>
    59ac:	f5 01       	movw	r30, r10
    59ae:	27 fc       	sbrc	r2, 7
    59b0:	85 91       	lpm	r24, Z+
    59b2:	27 fe       	sbrs	r2, 7
    59b4:	81 91       	ld	r24, Z+
    59b6:	5f 01       	movw	r10, r30
    59b8:	b7 01       	movw	r22, r14
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    59c0:	31 10       	cpse	r3, r1
    59c2:	3a 94       	dec	r3
    59c4:	f1 e0       	ldi	r31, 0x01	; 1
    59c6:	4f 1a       	sub	r4, r31
    59c8:	51 08       	sbc	r5, r1
    59ca:	41 14       	cp	r4, r1
    59cc:	51 04       	cpc	r5, r1
    59ce:	71 f7       	brne	.-36     	; 0x59ac <vfprintf+0x18c>
    59d0:	e5 c0       	rjmp	.+458    	; 0x5b9c <vfprintf+0x37c>
    59d2:	84 36       	cpi	r24, 0x64	; 100
    59d4:	11 f0       	breq	.+4      	; 0x59da <vfprintf+0x1ba>
    59d6:	89 36       	cpi	r24, 0x69	; 105
    59d8:	39 f5       	brne	.+78     	; 0x5a28 <vfprintf+0x208>
    59da:	f8 01       	movw	r30, r16
    59dc:	27 ff       	sbrs	r18, 7
    59de:	07 c0       	rjmp	.+14     	; 0x59ee <vfprintf+0x1ce>
    59e0:	60 81       	ld	r22, Z
    59e2:	71 81       	ldd	r23, Z+1	; 0x01
    59e4:	82 81       	ldd	r24, Z+2	; 0x02
    59e6:	93 81       	ldd	r25, Z+3	; 0x03
    59e8:	0c 5f       	subi	r16, 0xFC	; 252
    59ea:	1f 4f       	sbci	r17, 0xFF	; 255
    59ec:	08 c0       	rjmp	.+16     	; 0x59fe <vfprintf+0x1de>
    59ee:	60 81       	ld	r22, Z
    59f0:	71 81       	ldd	r23, Z+1	; 0x01
    59f2:	88 27       	eor	r24, r24
    59f4:	77 fd       	sbrc	r23, 7
    59f6:	80 95       	com	r24
    59f8:	98 2f       	mov	r25, r24
    59fa:	0e 5f       	subi	r16, 0xFE	; 254
    59fc:	1f 4f       	sbci	r17, 0xFF	; 255
    59fe:	2f 76       	andi	r18, 0x6F	; 111
    5a00:	b2 2e       	mov	r11, r18
    5a02:	97 ff       	sbrs	r25, 7
    5a04:	09 c0       	rjmp	.+18     	; 0x5a18 <vfprintf+0x1f8>
    5a06:	90 95       	com	r25
    5a08:	80 95       	com	r24
    5a0a:	70 95       	com	r23
    5a0c:	61 95       	neg	r22
    5a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a10:	8f 4f       	sbci	r24, 0xFF	; 255
    5a12:	9f 4f       	sbci	r25, 0xFF	; 255
    5a14:	20 68       	ori	r18, 0x80	; 128
    5a16:	b2 2e       	mov	r11, r18
    5a18:	2a e0       	ldi	r18, 0x0A	; 10
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	a4 01       	movw	r20, r8
    5a1e:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__ultoa_invert>
    5a22:	a8 2e       	mov	r10, r24
    5a24:	a8 18       	sub	r10, r8
    5a26:	44 c0       	rjmp	.+136    	; 0x5ab0 <vfprintf+0x290>
    5a28:	85 37       	cpi	r24, 0x75	; 117
    5a2a:	29 f4       	brne	.+10     	; 0x5a36 <vfprintf+0x216>
    5a2c:	2f 7e       	andi	r18, 0xEF	; 239
    5a2e:	b2 2e       	mov	r11, r18
    5a30:	2a e0       	ldi	r18, 0x0A	; 10
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	25 c0       	rjmp	.+74     	; 0x5a80 <vfprintf+0x260>
    5a36:	f2 2f       	mov	r31, r18
    5a38:	f9 7f       	andi	r31, 0xF9	; 249
    5a3a:	bf 2e       	mov	r11, r31
    5a3c:	8f 36       	cpi	r24, 0x6F	; 111
    5a3e:	c1 f0       	breq	.+48     	; 0x5a70 <vfprintf+0x250>
    5a40:	18 f4       	brcc	.+6      	; 0x5a48 <vfprintf+0x228>
    5a42:	88 35       	cpi	r24, 0x58	; 88
    5a44:	79 f0       	breq	.+30     	; 0x5a64 <vfprintf+0x244>
    5a46:	b4 c0       	rjmp	.+360    	; 0x5bb0 <vfprintf+0x390>
    5a48:	80 37       	cpi	r24, 0x70	; 112
    5a4a:	19 f0       	breq	.+6      	; 0x5a52 <vfprintf+0x232>
    5a4c:	88 37       	cpi	r24, 0x78	; 120
    5a4e:	21 f0       	breq	.+8      	; 0x5a58 <vfprintf+0x238>
    5a50:	af c0       	rjmp	.+350    	; 0x5bb0 <vfprintf+0x390>
    5a52:	2f 2f       	mov	r18, r31
    5a54:	20 61       	ori	r18, 0x10	; 16
    5a56:	b2 2e       	mov	r11, r18
    5a58:	b4 fe       	sbrs	r11, 4
    5a5a:	0d c0       	rjmp	.+26     	; 0x5a76 <vfprintf+0x256>
    5a5c:	8b 2d       	mov	r24, r11
    5a5e:	84 60       	ori	r24, 0x04	; 4
    5a60:	b8 2e       	mov	r11, r24
    5a62:	09 c0       	rjmp	.+18     	; 0x5a76 <vfprintf+0x256>
    5a64:	24 ff       	sbrs	r18, 4
    5a66:	0a c0       	rjmp	.+20     	; 0x5a7c <vfprintf+0x25c>
    5a68:	9f 2f       	mov	r25, r31
    5a6a:	96 60       	ori	r25, 0x06	; 6
    5a6c:	b9 2e       	mov	r11, r25
    5a6e:	06 c0       	rjmp	.+12     	; 0x5a7c <vfprintf+0x25c>
    5a70:	28 e0       	ldi	r18, 0x08	; 8
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	05 c0       	rjmp	.+10     	; 0x5a80 <vfprintf+0x260>
    5a76:	20 e1       	ldi	r18, 0x10	; 16
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	02 c0       	rjmp	.+4      	; 0x5a80 <vfprintf+0x260>
    5a7c:	20 e1       	ldi	r18, 0x10	; 16
    5a7e:	32 e0       	ldi	r19, 0x02	; 2
    5a80:	f8 01       	movw	r30, r16
    5a82:	b7 fe       	sbrs	r11, 7
    5a84:	07 c0       	rjmp	.+14     	; 0x5a94 <vfprintf+0x274>
    5a86:	60 81       	ld	r22, Z
    5a88:	71 81       	ldd	r23, Z+1	; 0x01
    5a8a:	82 81       	ldd	r24, Z+2	; 0x02
    5a8c:	93 81       	ldd	r25, Z+3	; 0x03
    5a8e:	0c 5f       	subi	r16, 0xFC	; 252
    5a90:	1f 4f       	sbci	r17, 0xFF	; 255
    5a92:	06 c0       	rjmp	.+12     	; 0x5aa0 <vfprintf+0x280>
    5a94:	60 81       	ld	r22, Z
    5a96:	71 81       	ldd	r23, Z+1	; 0x01
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	0e 5f       	subi	r16, 0xFE	; 254
    5a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa0:	a4 01       	movw	r20, r8
    5aa2:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__ultoa_invert>
    5aa6:	a8 2e       	mov	r10, r24
    5aa8:	a8 18       	sub	r10, r8
    5aaa:	fb 2d       	mov	r31, r11
    5aac:	ff 77       	andi	r31, 0x7F	; 127
    5aae:	bf 2e       	mov	r11, r31
    5ab0:	b6 fe       	sbrs	r11, 6
    5ab2:	0b c0       	rjmp	.+22     	; 0x5aca <vfprintf+0x2aa>
    5ab4:	2b 2d       	mov	r18, r11
    5ab6:	2e 7f       	andi	r18, 0xFE	; 254
    5ab8:	a5 14       	cp	r10, r5
    5aba:	50 f4       	brcc	.+20     	; 0x5ad0 <vfprintf+0x2b0>
    5abc:	b4 fe       	sbrs	r11, 4
    5abe:	0a c0       	rjmp	.+20     	; 0x5ad4 <vfprintf+0x2b4>
    5ac0:	b2 fc       	sbrc	r11, 2
    5ac2:	08 c0       	rjmp	.+16     	; 0x5ad4 <vfprintf+0x2b4>
    5ac4:	2b 2d       	mov	r18, r11
    5ac6:	2e 7e       	andi	r18, 0xEE	; 238
    5ac8:	05 c0       	rjmp	.+10     	; 0x5ad4 <vfprintf+0x2b4>
    5aca:	7a 2c       	mov	r7, r10
    5acc:	2b 2d       	mov	r18, r11
    5ace:	03 c0       	rjmp	.+6      	; 0x5ad6 <vfprintf+0x2b6>
    5ad0:	7a 2c       	mov	r7, r10
    5ad2:	01 c0       	rjmp	.+2      	; 0x5ad6 <vfprintf+0x2b6>
    5ad4:	75 2c       	mov	r7, r5
    5ad6:	24 ff       	sbrs	r18, 4
    5ad8:	0d c0       	rjmp	.+26     	; 0x5af4 <vfprintf+0x2d4>
    5ada:	fe 01       	movw	r30, r28
    5adc:	ea 0d       	add	r30, r10
    5ade:	f1 1d       	adc	r31, r1
    5ae0:	80 81       	ld	r24, Z
    5ae2:	80 33       	cpi	r24, 0x30	; 48
    5ae4:	11 f4       	brne	.+4      	; 0x5aea <vfprintf+0x2ca>
    5ae6:	29 7e       	andi	r18, 0xE9	; 233
    5ae8:	09 c0       	rjmp	.+18     	; 0x5afc <vfprintf+0x2dc>
    5aea:	22 ff       	sbrs	r18, 2
    5aec:	06 c0       	rjmp	.+12     	; 0x5afa <vfprintf+0x2da>
    5aee:	73 94       	inc	r7
    5af0:	73 94       	inc	r7
    5af2:	04 c0       	rjmp	.+8      	; 0x5afc <vfprintf+0x2dc>
    5af4:	82 2f       	mov	r24, r18
    5af6:	86 78       	andi	r24, 0x86	; 134
    5af8:	09 f0       	breq	.+2      	; 0x5afc <vfprintf+0x2dc>
    5afa:	73 94       	inc	r7
    5afc:	23 fd       	sbrc	r18, 3
    5afe:	13 c0       	rjmp	.+38     	; 0x5b26 <vfprintf+0x306>
    5b00:	20 ff       	sbrs	r18, 0
    5b02:	06 c0       	rjmp	.+12     	; 0x5b10 <vfprintf+0x2f0>
    5b04:	5a 2c       	mov	r5, r10
    5b06:	73 14       	cp	r7, r3
    5b08:	18 f4       	brcc	.+6      	; 0x5b10 <vfprintf+0x2f0>
    5b0a:	53 0c       	add	r5, r3
    5b0c:	57 18       	sub	r5, r7
    5b0e:	73 2c       	mov	r7, r3
    5b10:	73 14       	cp	r7, r3
    5b12:	68 f4       	brcc	.+26     	; 0x5b2e <vfprintf+0x30e>
    5b14:	b7 01       	movw	r22, r14
    5b16:	80 e2       	ldi	r24, 0x20	; 32
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	2c 87       	std	Y+12, r18	; 0x0c
    5b1c:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5b20:	73 94       	inc	r7
    5b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b24:	f5 cf       	rjmp	.-22     	; 0x5b10 <vfprintf+0x2f0>
    5b26:	73 14       	cp	r7, r3
    5b28:	10 f4       	brcc	.+4      	; 0x5b2e <vfprintf+0x30e>
    5b2a:	37 18       	sub	r3, r7
    5b2c:	01 c0       	rjmp	.+2      	; 0x5b30 <vfprintf+0x310>
    5b2e:	31 2c       	mov	r3, r1
    5b30:	24 ff       	sbrs	r18, 4
    5b32:	12 c0       	rjmp	.+36     	; 0x5b58 <vfprintf+0x338>
    5b34:	b7 01       	movw	r22, r14
    5b36:	80 e3       	ldi	r24, 0x30	; 48
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	2c 87       	std	Y+12, r18	; 0x0c
    5b3c:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5b40:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b42:	22 ff       	sbrs	r18, 2
    5b44:	17 c0       	rjmp	.+46     	; 0x5b74 <vfprintf+0x354>
    5b46:	21 ff       	sbrs	r18, 1
    5b48:	03 c0       	rjmp	.+6      	; 0x5b50 <vfprintf+0x330>
    5b4a:	88 e5       	ldi	r24, 0x58	; 88
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	02 c0       	rjmp	.+4      	; 0x5b54 <vfprintf+0x334>
    5b50:	88 e7       	ldi	r24, 0x78	; 120
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	b7 01       	movw	r22, r14
    5b56:	0c c0       	rjmp	.+24     	; 0x5b70 <vfprintf+0x350>
    5b58:	82 2f       	mov	r24, r18
    5b5a:	86 78       	andi	r24, 0x86	; 134
    5b5c:	59 f0       	breq	.+22     	; 0x5b74 <vfprintf+0x354>
    5b5e:	21 fd       	sbrc	r18, 1
    5b60:	02 c0       	rjmp	.+4      	; 0x5b66 <vfprintf+0x346>
    5b62:	80 e2       	ldi	r24, 0x20	; 32
    5b64:	01 c0       	rjmp	.+2      	; 0x5b68 <vfprintf+0x348>
    5b66:	8b e2       	ldi	r24, 0x2B	; 43
    5b68:	27 fd       	sbrc	r18, 7
    5b6a:	8d e2       	ldi	r24, 0x2D	; 45
    5b6c:	b7 01       	movw	r22, r14
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5b74:	a5 14       	cp	r10, r5
    5b76:	38 f4       	brcc	.+14     	; 0x5b86 <vfprintf+0x366>
    5b78:	b7 01       	movw	r22, r14
    5b7a:	80 e3       	ldi	r24, 0x30	; 48
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5b82:	5a 94       	dec	r5
    5b84:	f7 cf       	rjmp	.-18     	; 0x5b74 <vfprintf+0x354>
    5b86:	aa 94       	dec	r10
    5b88:	f4 01       	movw	r30, r8
    5b8a:	ea 0d       	add	r30, r10
    5b8c:	f1 1d       	adc	r31, r1
    5b8e:	80 81       	ld	r24, Z
    5b90:	b7 01       	movw	r22, r14
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5b98:	a1 10       	cpse	r10, r1
    5b9a:	f5 cf       	rjmp	.-22     	; 0x5b86 <vfprintf+0x366>
    5b9c:	33 20       	and	r3, r3
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <vfprintf+0x382>
    5ba0:	51 ce       	rjmp	.-862    	; 0x5844 <vfprintf+0x24>
    5ba2:	b7 01       	movw	r22, r14
    5ba4:	80 e2       	ldi	r24, 0x20	; 32
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <fputc>
    5bac:	3a 94       	dec	r3
    5bae:	f6 cf       	rjmp	.-20     	; 0x5b9c <vfprintf+0x37c>
    5bb0:	f7 01       	movw	r30, r14
    5bb2:	86 81       	ldd	r24, Z+6	; 0x06
    5bb4:	97 81       	ldd	r25, Z+7	; 0x07
    5bb6:	02 c0       	rjmp	.+4      	; 0x5bbc <vfprintf+0x39c>
    5bb8:	8f ef       	ldi	r24, 0xFF	; 255
    5bba:	9f ef       	ldi	r25, 0xFF	; 255
    5bbc:	2c 96       	adiw	r28, 0x0c	; 12
    5bbe:	e2 e1       	ldi	r30, 0x12	; 18
    5bc0:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <__epilogue_restores__>

00005bc4 <__eerd_block_m328p>:
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22

00005bc8 <__eerd_blraw_m328p>:
    5bc8:	fc 01       	movw	r30, r24
    5bca:	f9 99       	sbic	0x1f, 1	; 31
    5bcc:	fe cf       	rjmp	.-4      	; 0x5bca <__eerd_blraw_m328p+0x2>
    5bce:	06 c0       	rjmp	.+12     	; 0x5bdc <__eerd_blraw_m328p+0x14>
    5bd0:	f2 bd       	out	0x22, r31	; 34
    5bd2:	e1 bd       	out	0x21, r30	; 33
    5bd4:	f8 9a       	sbi	0x1f, 0	; 31
    5bd6:	31 96       	adiw	r30, 0x01	; 1
    5bd8:	00 b4       	in	r0, 0x20	; 32
    5bda:	0d 92       	st	X+, r0
    5bdc:	41 50       	subi	r20, 0x01	; 1
    5bde:	50 40       	sbci	r21, 0x00	; 0
    5be0:	b8 f7       	brcc	.-18     	; 0x5bd0 <__eerd_blraw_m328p+0x8>
    5be2:	08 95       	ret

00005be4 <__eerd_word_m328p>:
    5be4:	a8 e1       	ldi	r26, 0x18	; 24
    5be6:	b0 e0       	ldi	r27, 0x00	; 0
    5be8:	42 e0       	ldi	r20, 0x02	; 2
    5bea:	50 e0       	ldi	r21, 0x00	; 0
    5bec:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <__eerd_blraw_m328p>

00005bf0 <__eewr_block_m328p>:
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	03 c0       	rjmp	.+6      	; 0x5bfc <__eewr_block_m328p+0xc>
    5bf6:	2d 91       	ld	r18, X+
    5bf8:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <__eewr_r18_m328p>
    5bfc:	41 50       	subi	r20, 0x01	; 1
    5bfe:	50 40       	sbci	r21, 0x00	; 0
    5c00:	d0 f7       	brcc	.-12     	; 0x5bf6 <__eewr_block_m328p+0x6>
    5c02:	08 95       	ret

00005c04 <__eewr_byte_m328p>:
    5c04:	26 2f       	mov	r18, r22

00005c06 <__eewr_r18_m328p>:
    5c06:	f9 99       	sbic	0x1f, 1	; 31
    5c08:	fe cf       	rjmp	.-4      	; 0x5c06 <__eewr_r18_m328p>
    5c0a:	1f ba       	out	0x1f, r1	; 31
    5c0c:	92 bd       	out	0x22, r25	; 34
    5c0e:	81 bd       	out	0x21, r24	; 33
    5c10:	20 bd       	out	0x20, r18	; 32
    5c12:	0f b6       	in	r0, 0x3f	; 63
    5c14:	f8 94       	cli
    5c16:	fa 9a       	sbi	0x1f, 2	; 31
    5c18:	f9 9a       	sbi	0x1f, 1	; 31
    5c1a:	0f be       	out	0x3f, r0	; 63
    5c1c:	01 96       	adiw	r24, 0x01	; 1
    5c1e:	08 95       	ret

00005c20 <strnlen_P>:
    5c20:	fc 01       	movw	r30, r24
    5c22:	05 90       	lpm	r0, Z+
    5c24:	61 50       	subi	r22, 0x01	; 1
    5c26:	70 40       	sbci	r23, 0x00	; 0
    5c28:	01 10       	cpse	r0, r1
    5c2a:	d8 f7       	brcc	.-10     	; 0x5c22 <strnlen_P+0x2>
    5c2c:	80 95       	com	r24
    5c2e:	90 95       	com	r25
    5c30:	8e 0f       	add	r24, r30
    5c32:	9f 1f       	adc	r25, r31
    5c34:	08 95       	ret

00005c36 <strnlen>:
    5c36:	fc 01       	movw	r30, r24
    5c38:	61 50       	subi	r22, 0x01	; 1
    5c3a:	70 40       	sbci	r23, 0x00	; 0
    5c3c:	01 90       	ld	r0, Z+
    5c3e:	01 10       	cpse	r0, r1
    5c40:	d8 f7       	brcc	.-10     	; 0x5c38 <strnlen+0x2>
    5c42:	80 95       	com	r24
    5c44:	90 95       	com	r25
    5c46:	8e 0f       	add	r24, r30
    5c48:	9f 1f       	adc	r25, r31
    5c4a:	08 95       	ret

00005c4c <fputc>:
    5c4c:	0f 93       	push	r16
    5c4e:	1f 93       	push	r17
    5c50:	cf 93       	push	r28
    5c52:	df 93       	push	r29
    5c54:	18 2f       	mov	r17, r24
    5c56:	09 2f       	mov	r16, r25
    5c58:	eb 01       	movw	r28, r22
    5c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c5c:	81 fd       	sbrc	r24, 1
    5c5e:	03 c0       	rjmp	.+6      	; 0x5c66 <fputc+0x1a>
    5c60:	8f ef       	ldi	r24, 0xFF	; 255
    5c62:	9f ef       	ldi	r25, 0xFF	; 255
    5c64:	20 c0       	rjmp	.+64     	; 0x5ca6 <fputc+0x5a>
    5c66:	82 ff       	sbrs	r24, 2
    5c68:	10 c0       	rjmp	.+32     	; 0x5c8a <fputc+0x3e>
    5c6a:	4e 81       	ldd	r20, Y+6	; 0x06
    5c6c:	5f 81       	ldd	r21, Y+7	; 0x07
    5c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    5c70:	3d 81       	ldd	r19, Y+5	; 0x05
    5c72:	42 17       	cp	r20, r18
    5c74:	53 07       	cpc	r21, r19
    5c76:	7c f4       	brge	.+30     	; 0x5c96 <fputc+0x4a>
    5c78:	e8 81       	ld	r30, Y
    5c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    5c7c:	9f 01       	movw	r18, r30
    5c7e:	2f 5f       	subi	r18, 0xFF	; 255
    5c80:	3f 4f       	sbci	r19, 0xFF	; 255
    5c82:	39 83       	std	Y+1, r19	; 0x01
    5c84:	28 83       	st	Y, r18
    5c86:	10 83       	st	Z, r17
    5c88:	06 c0       	rjmp	.+12     	; 0x5c96 <fputc+0x4a>
    5c8a:	e8 85       	ldd	r30, Y+8	; 0x08
    5c8c:	f9 85       	ldd	r31, Y+9	; 0x09
    5c8e:	81 2f       	mov	r24, r17
    5c90:	09 95       	icall
    5c92:	89 2b       	or	r24, r25
    5c94:	29 f7       	brne	.-54     	; 0x5c60 <fputc+0x14>
    5c96:	2e 81       	ldd	r18, Y+6	; 0x06
    5c98:	3f 81       	ldd	r19, Y+7	; 0x07
    5c9a:	2f 5f       	subi	r18, 0xFF	; 255
    5c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c9e:	3f 83       	std	Y+7, r19	; 0x07
    5ca0:	2e 83       	std	Y+6, r18	; 0x06
    5ca2:	81 2f       	mov	r24, r17
    5ca4:	90 2f       	mov	r25, r16
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	0f 91       	pop	r16
    5cae:	08 95       	ret

00005cb0 <__ultoa_invert>:
    5cb0:	fa 01       	movw	r30, r20
    5cb2:	aa 27       	eor	r26, r26
    5cb4:	28 30       	cpi	r18, 0x08	; 8
    5cb6:	51 f1       	breq	.+84     	; 0x5d0c <__ultoa_invert+0x5c>
    5cb8:	20 31       	cpi	r18, 0x10	; 16
    5cba:	81 f1       	breq	.+96     	; 0x5d1c <__ultoa_invert+0x6c>
    5cbc:	e8 94       	clt
    5cbe:	6f 93       	push	r22
    5cc0:	6e 7f       	andi	r22, 0xFE	; 254
    5cc2:	6e 5f       	subi	r22, 0xFE	; 254
    5cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    5cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cca:	af 4f       	sbci	r26, 0xFF	; 255
    5ccc:	b1 e0       	ldi	r27, 0x01	; 1
    5cce:	3e d0       	rcall	.+124    	; 0x5d4c <__ultoa_invert+0x9c>
    5cd0:	b4 e0       	ldi	r27, 0x04	; 4
    5cd2:	3c d0       	rcall	.+120    	; 0x5d4c <__ultoa_invert+0x9c>
    5cd4:	67 0f       	add	r22, r23
    5cd6:	78 1f       	adc	r23, r24
    5cd8:	89 1f       	adc	r24, r25
    5cda:	9a 1f       	adc	r25, r26
    5cdc:	a1 1d       	adc	r26, r1
    5cde:	68 0f       	add	r22, r24
    5ce0:	79 1f       	adc	r23, r25
    5ce2:	8a 1f       	adc	r24, r26
    5ce4:	91 1d       	adc	r25, r1
    5ce6:	a1 1d       	adc	r26, r1
    5ce8:	6a 0f       	add	r22, r26
    5cea:	71 1d       	adc	r23, r1
    5cec:	81 1d       	adc	r24, r1
    5cee:	91 1d       	adc	r25, r1
    5cf0:	a1 1d       	adc	r26, r1
    5cf2:	20 d0       	rcall	.+64     	; 0x5d34 <__ultoa_invert+0x84>
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <__ultoa_invert+0x48>
    5cf6:	68 94       	set
    5cf8:	3f 91       	pop	r19
    5cfa:	2a e0       	ldi	r18, 0x0A	; 10
    5cfc:	26 9f       	mul	r18, r22
    5cfe:	11 24       	eor	r1, r1
    5d00:	30 19       	sub	r19, r0
    5d02:	30 5d       	subi	r19, 0xD0	; 208
    5d04:	31 93       	st	Z+, r19
    5d06:	de f6       	brtc	.-74     	; 0x5cbe <__ultoa_invert+0xe>
    5d08:	cf 01       	movw	r24, r30
    5d0a:	08 95       	ret
    5d0c:	46 2f       	mov	r20, r22
    5d0e:	47 70       	andi	r20, 0x07	; 7
    5d10:	40 5d       	subi	r20, 0xD0	; 208
    5d12:	41 93       	st	Z+, r20
    5d14:	b3 e0       	ldi	r27, 0x03	; 3
    5d16:	0f d0       	rcall	.+30     	; 0x5d36 <__ultoa_invert+0x86>
    5d18:	c9 f7       	brne	.-14     	; 0x5d0c <__ultoa_invert+0x5c>
    5d1a:	f6 cf       	rjmp	.-20     	; 0x5d08 <__ultoa_invert+0x58>
    5d1c:	46 2f       	mov	r20, r22
    5d1e:	4f 70       	andi	r20, 0x0F	; 15
    5d20:	40 5d       	subi	r20, 0xD0	; 208
    5d22:	4a 33       	cpi	r20, 0x3A	; 58
    5d24:	18 f0       	brcs	.+6      	; 0x5d2c <__ultoa_invert+0x7c>
    5d26:	49 5d       	subi	r20, 0xD9	; 217
    5d28:	31 fd       	sbrc	r19, 1
    5d2a:	40 52       	subi	r20, 0x20	; 32
    5d2c:	41 93       	st	Z+, r20
    5d2e:	02 d0       	rcall	.+4      	; 0x5d34 <__ultoa_invert+0x84>
    5d30:	a9 f7       	brne	.-22     	; 0x5d1c <__ultoa_invert+0x6c>
    5d32:	ea cf       	rjmp	.-44     	; 0x5d08 <__ultoa_invert+0x58>
    5d34:	b4 e0       	ldi	r27, 0x04	; 4
    5d36:	a6 95       	lsr	r26
    5d38:	97 95       	ror	r25
    5d3a:	87 95       	ror	r24
    5d3c:	77 95       	ror	r23
    5d3e:	67 95       	ror	r22
    5d40:	ba 95       	dec	r27
    5d42:	c9 f7       	brne	.-14     	; 0x5d36 <__ultoa_invert+0x86>
    5d44:	00 97       	sbiw	r24, 0x00	; 0
    5d46:	61 05       	cpc	r22, r1
    5d48:	71 05       	cpc	r23, r1
    5d4a:	08 95       	ret
    5d4c:	9b 01       	movw	r18, r22
    5d4e:	ac 01       	movw	r20, r24
    5d50:	0a 2e       	mov	r0, r26
    5d52:	06 94       	lsr	r0
    5d54:	57 95       	ror	r21
    5d56:	47 95       	ror	r20
    5d58:	37 95       	ror	r19
    5d5a:	27 95       	ror	r18
    5d5c:	ba 95       	dec	r27
    5d5e:	c9 f7       	brne	.-14     	; 0x5d52 <__ultoa_invert+0xa2>
    5d60:	62 0f       	add	r22, r18
    5d62:	73 1f       	adc	r23, r19
    5d64:	84 1f       	adc	r24, r20
    5d66:	95 1f       	adc	r25, r21
    5d68:	a0 1d       	adc	r26, r0
    5d6a:	08 95       	ret

00005d6c <__prologue_saves__>:
    5d6c:	2f 92       	push	r2
    5d6e:	3f 92       	push	r3
    5d70:	4f 92       	push	r4
    5d72:	5f 92       	push	r5
    5d74:	6f 92       	push	r6
    5d76:	7f 92       	push	r7
    5d78:	8f 92       	push	r8
    5d7a:	9f 92       	push	r9
    5d7c:	af 92       	push	r10
    5d7e:	bf 92       	push	r11
    5d80:	cf 92       	push	r12
    5d82:	df 92       	push	r13
    5d84:	ef 92       	push	r14
    5d86:	ff 92       	push	r15
    5d88:	0f 93       	push	r16
    5d8a:	1f 93       	push	r17
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	cd b7       	in	r28, 0x3d	; 61
    5d92:	de b7       	in	r29, 0x3e	; 62
    5d94:	ca 1b       	sub	r28, r26
    5d96:	db 0b       	sbc	r29, r27
    5d98:	0f b6       	in	r0, 0x3f	; 63
    5d9a:	f8 94       	cli
    5d9c:	de bf       	out	0x3e, r29	; 62
    5d9e:	0f be       	out	0x3f, r0	; 63
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	09 94       	ijmp

00005da4 <__epilogue_restores__>:
    5da4:	2a 88       	ldd	r2, Y+18	; 0x12
    5da6:	39 88       	ldd	r3, Y+17	; 0x11
    5da8:	48 88       	ldd	r4, Y+16	; 0x10
    5daa:	5f 84       	ldd	r5, Y+15	; 0x0f
    5dac:	6e 84       	ldd	r6, Y+14	; 0x0e
    5dae:	7d 84       	ldd	r7, Y+13	; 0x0d
    5db0:	8c 84       	ldd	r8, Y+12	; 0x0c
    5db2:	9b 84       	ldd	r9, Y+11	; 0x0b
    5db4:	aa 84       	ldd	r10, Y+10	; 0x0a
    5db6:	b9 84       	ldd	r11, Y+9	; 0x09
    5db8:	c8 84       	ldd	r12, Y+8	; 0x08
    5dba:	df 80       	ldd	r13, Y+7	; 0x07
    5dbc:	ee 80       	ldd	r14, Y+6	; 0x06
    5dbe:	fd 80       	ldd	r15, Y+5	; 0x05
    5dc0:	0c 81       	ldd	r16, Y+4	; 0x04
    5dc2:	1b 81       	ldd	r17, Y+3	; 0x03
    5dc4:	aa 81       	ldd	r26, Y+2	; 0x02
    5dc6:	b9 81       	ldd	r27, Y+1	; 0x01
    5dc8:	ce 0f       	add	r28, r30
    5dca:	d1 1d       	adc	r29, r1
    5dcc:	0f b6       	in	r0, 0x3f	; 63
    5dce:	f8 94       	cli
    5dd0:	de bf       	out	0x3e, r29	; 62
    5dd2:	0f be       	out	0x3f, r0	; 63
    5dd4:	cd bf       	out	0x3d, r28	; 61
    5dd6:	ed 01       	movw	r28, r26
    5dd8:	08 95       	ret

00005dda <_exit>:
    5dda:	f8 94       	cli

00005ddc <__stop_program>:
    5ddc:	ff cf       	rjmp	.-2      	; 0x5ddc <__stop_program>
